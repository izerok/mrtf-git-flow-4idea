// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _SqlLexer.flex

package com.github.xiaolyuh.sql;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.xiaolyuh.sql.psi.SqlTypes.*;


public class _SqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\12\23\1\0\1\24"+
    "\1\25\1\26\1\27\2\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\0"+
    "\1\62\1\0\1\63\1\62\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\41\1\42\1\75"+
    "\1\44\1\76\1\77\1\100\1\50\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\57\1\107\1\61\1\110\1\111"+
    "\1\112\1\113\6\0\1\3\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\3\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\114";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\4\24\1\25"+
    "\35\24\1\26\1\27\1\30\1\31\1\32\1\0\1\33"+
    "\1\0\1\34\1\0\1\17\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\6\24\1\43\3\24\1\44\30\24\1\45"+
    "\2\24\1\46\1\47\1\46\6\24\1\50\2\24\1\51"+
    "\1\52\1\53\16\24\1\54\13\24\1\55\1\0\2\24"+
    "\1\56\1\24\1\57\2\24\1\60\1\61\30\24\1\62"+
    "\6\24\1\63\15\24\1\64\5\24\1\65\22\24\1\66"+
    "\2\24\1\67\17\24\1\0\13\24\1\70\1\71\16\24"+
    "\1\72\2\24\1\73\1\74\1\75\5\24\1\76\2\24"+
    "\1\77\1\100\12\24\1\101\1\102\1\103\1\104\3\24"+
    "\1\105\3\24\1\106\21\24\1\107\1\110\2\24\1\111"+
    "\6\24\1\112\1\24\1\113\1\24\1\114\1\115\1\116"+
    "\1\24\1\117\1\120\4\24\1\121\2\24\1\122\6\24"+
    "\1\123\15\24\1\124\1\24\1\125\3\24\1\126\1\24"+
    "\1\127\3\24\1\130\1\131\2\24\1\132\1\133\2\24"+
    "\1\134\1\135\11\24\1\136\2\24\1\137\3\24\1\140"+
    "\2\24\1\141\3\24\1\142\1\24\1\143\1\24\1\144"+
    "\1\24\1\145\3\24\1\146\1\147\2\24\1\150\5\24"+
    "\1\151\1\152\1\24\1\153\1\154\1\24\1\155\2\24"+
    "\1\156\1\157\3\24\1\160\3\24\1\161\1\162\3\24"+
    "\1\163\2\24\1\164\4\24\1\165\3\24\1\166\1\167"+
    "\1\170\1\171\2\24\1\172\1\24\1\173\1\174\1\175"+
    "\4\24\1\176\4\24\1\177\1\200\1\24\1\201\1\24"+
    "\1\202\1\24\1\203\1\204\2\24\1\205\1\206\1\207"+
    "\5\24\1\210\1\211\1\212\1\24\1\213\2\24\1\214"+
    "\1\24\1\215\1\216\6\24\1\217\1\220\10\24\1\221"+
    "\1\222\1\223\1\224\1\225\1\24\1\226\1\227\2\24"+
    "\1\230\2\24\1\231\1\232\4\24\1\233\1\24\1\234"+
    "\1\235\1\236\4\24\1\237";

  private static int [] zzUnpackAction() {
    int [] result = new int[580];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\115\0\115\0\115"+
    "\0\115\0\u0181\0\115\0\115\0\115\0\115\0\115\0\u01ce"+
    "\0\115\0\u021b\0\u0268\0\115\0\u02b5\0\u0302\0\u034f\0\u039c"+
    "\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604"+
    "\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c"+
    "\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4"+
    "\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c"+
    "\0\u0d89\0\115\0\u0dd6\0\115\0\115\0\115\0\u0134\0\115"+
    "\0\u0181\0\u0e23\0\u0e70\0\u0ebd\0\115\0\115\0\115\0\115"+
    "\0\115\0\115\0\u0f0a\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b"+
    "\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u0a87\0\u120c\0\u1259\0\u12a6"+
    "\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474\0\u14c1\0\u150e"+
    "\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776"+
    "\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u0a87\0\u1944\0\u1991"+
    "\0\u19de\0\u0a87\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac"+
    "\0\u1bf9\0\u1c46\0\u1c93\0\u1c46\0\u1ce0\0\u0a87\0\u1d2d\0\u1d7a"+
    "\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2"+
    "\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u0a87\0\u21b0\0\u21fd"+
    "\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u23cb\0\u2418\0\u2465"+
    "\0\u24b2\0\115\0\u24ff\0\u254c\0\u2599\0\u0a87\0\u25e6\0\u0a87"+
    "\0\u2633\0\u2680\0\u0a87\0\u0a87\0\u26cd\0\u271a\0\u2767\0\u27b4"+
    "\0\u2801\0\u284e\0\u289b\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u2a1c"+
    "\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84"+
    "\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u0a87\0\u2e05\0\u2e52\0\u2e9f"+
    "\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u3107"+
    "\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u3288\0\u32d5\0\u3322\0\u336f"+
    "\0\u33bc\0\u0a87\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u0a87"+
    "\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b\0\u3758\0\u37a5"+
    "\0\u37f2\0\u383f\0\u388c\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u3a0d"+
    "\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u0a87\0\u3bdb\0\u3c28"+
    "\0\u3c75\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90"+
    "\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8"+
    "\0\u4145\0\u4192\0\u41df\0\u422c\0\u4279\0\u42c6\0\u4313\0\u4360"+
    "\0\u43ad\0\u0a87\0\u0a87\0\u43fa\0\u4447\0\u4494\0\u44e1\0\u452e"+
    "\0\u457b\0\u45c8\0\u4615\0\u4662\0\u46af\0\u46fc\0\u4749\0\u4796"+
    "\0\u47e3\0\u0a87\0\u4830\0\u487d\0\u0a87\0\u0a87\0\u0a87\0\u48ca"+
    "\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u0a87\0\u4a4b\0\u4a98\0\u0a87"+
    "\0\u0a87\0\u4ae5\0\u4b32\0\u4b7f\0\u4bcc\0\u4c19\0\u4c66\0\u4cb3"+
    "\0\u4d00\0\u4d4d\0\u4d9a\0\u0a87\0\u0a87\0\u0a87\0\u0a87\0\u4de7"+
    "\0\u4e34\0\u4e81\0\u0a87\0\u4ece\0\u4f1b\0\u4f68\0\u0a87\0\u4fb5"+
    "\0\u5002\0\u504f\0\u509c\0\u50e9\0\u5136\0\u5183\0\u51d0\0\u521d"+
    "\0\u526a\0\u52b7\0\u5304\0\u5351\0\u539e\0\u53eb\0\u5438\0\u5485"+
    "\0\u54d2\0\u0a87\0\u551f\0\u556c\0\u0a87\0\u55b9\0\u5606\0\u5653"+
    "\0\u56a0\0\u56ed\0\u573a\0\u0a87\0\u5787\0\u0a87\0\u57d4\0\u5821"+
    "\0\u24ff\0\u0a87\0\u586e\0\u0a87\0\u0a87\0\u58bb\0\u5908\0\u5955"+
    "\0\u59a2\0\u0a87\0\u59ef\0\u5a3c\0\u0a87\0\u5a89\0\u5ad6\0\u5b23"+
    "\0\u5b70\0\u5bbd\0\u5c0a\0\u0a87\0\u5c57\0\u5ca4\0\u5cf1\0\u5d3e"+
    "\0\u5d8b\0\u5dd8\0\u5e25\0\u5e72\0\u5ebf\0\u5f0c\0\u5f59\0\u5fa6"+
    "\0\u5ff3\0\u0a87\0\u6040\0\u0a87\0\u608d\0\u60da\0\u6127\0\u6174"+
    "\0\u61c1\0\u0a87\0\u620e\0\u625b\0\u62a8\0\u0a87\0\u0a87\0\u62f5"+
    "\0\u6342\0\u0a87\0\u0a87\0\u638f\0\u63dc\0\u0a87\0\u0a87\0\u6429"+
    "\0\u6476\0\u64c3\0\u6510\0\u655d\0\u65aa\0\u65f7\0\u6644\0\u6691"+
    "\0\u0a87\0\u66de\0\u672b\0\u0a87\0\u6778\0\u67c5\0\u6812\0\u0a87"+
    "\0\u685f\0\u68ac\0\u0a87\0\u68f9\0\u6946\0\u6993\0\u0a87\0\u69e0"+
    "\0\u0a87\0\u6a2d\0\u0a87\0\u6a7a\0\u0a87\0\u6ac7\0\u6b14\0\u6b61"+
    "\0\u0a87\0\u0a87\0\u6bae\0\u6bfb\0\u0a87\0\u6c48\0\u6c95\0\u6ce2"+
    "\0\u6d2f\0\u6d7c\0\u0a87\0\u0a87\0\u6dc9\0\u0a87\0\u0a87\0\u6e16"+
    "\0\u0a87\0\u6e63\0\u6eb0\0\u0a87\0\u0a87\0\u6efd\0\u6f4a\0\u6f97"+
    "\0\u0a87\0\u6fe4\0\u7031\0\u707e\0\u0a87\0\u0a87\0\u70cb\0\u7118"+
    "\0\u7165\0\u0a87\0\u71b2\0\u71ff\0\u0a87\0\u724c\0\u7299\0\u72e6"+
    "\0\u7333\0\u0a87\0\u7380\0\u73cd\0\u741a\0\u0a87\0\u0a87\0\u0a87"+
    "\0\u0a87\0\u7467\0\u74b4\0\u0a87\0\u7501\0\u0a87\0\u0a87\0\u0a87"+
    "\0\u754e\0\u759b\0\u75e8\0\u7635\0\u0a87\0\u7682\0\u76cf\0\u771c"+
    "\0\u7769\0\u0a87\0\u0a87\0\u77b6\0\u0a87\0\u7803\0\u0a87\0\u7850"+
    "\0\u0a87\0\u0a87\0\u789d\0\u78ea\0\u0a87\0\u0a87\0\u0a87\0\u7937"+
    "\0\u7984\0\u79d1\0\u7a1e\0\u7a6b\0\u0a87\0\u0a87\0\u0a87\0\u7ab8"+
    "\0\u0a87\0\u7b05\0\u7b52\0\u0a87\0\u7b9f\0\u0a87\0\u0a87\0\u7bec"+
    "\0\u7c39\0\u7c86\0\u7cd3\0\u7d20\0\u7d6d\0\u0a87\0\u0a87\0\u7dba"+
    "\0\u7e07\0\u7e54\0\u7ea1\0\u7eee\0\u7f3b\0\u7f88\0\u7fd5\0\u0a87"+
    "\0\u0a87\0\u0a87\0\u0a87\0\u0a87\0\u8022\0\u0a87\0\u0a87\0\u806f"+
    "\0\u80bc\0\u0a87\0\u8109\0\u8156\0\u0a87\0\u0a87\0\u81a3\0\u81f0"+
    "\0\u823d\0\u828a\0\u0a87\0\u82d7\0\u0a87\0\u8324\0\u0a87\0\u8371"+
    "\0\u83be\0\u840b\0\u8458\0\u0a87";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[580];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\5\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\35\1\36\1\57\1\65\1\43"+
    "\1\66\1\46\1\47\1\67\1\52\1\70\1\54\1\71"+
    "\1\56\1\57\1\72\1\73\1\74\1\75\1\2\116\0"+
    "\3\3\137\0\1\76\66\0\5\77\1\100\107\77\12\101"+
    "\1\100\102\101\20\0\1\102\111\0\1\103\120\0\1\104"+
    "\1\0\1\23\4\0\60\57\32\0\1\105\1\106\1\107"+
    "\113\0\1\110\114\0\1\111\1\112\110\0\1\57\4\0"+
    "\1\57\1\113\1\114\1\115\1\57\1\116\5\57\1\117"+
    "\1\57\1\120\4\57\1\121\1\122\1\123\10\57\1\113"+
    "\1\57\1\115\5\57\1\117\1\120\3\57\1\121\1\122"+
    "\1\123\3\57\30\0\1\57\4\0\4\57\1\124\23\57"+
    "\1\125\7\57\1\126\16\57\1\125\30\0\1\57\4\0"+
    "\1\127\6\57\1\130\6\57\1\131\2\57\1\132\2\57"+
    "\1\133\7\57\1\127\6\57\1\130\2\57\1\134\1\135"+
    "\1\57\1\132\2\57\1\133\3\57\30\0\1\57\4\0"+
    "\1\136\3\57\1\137\3\57\1\140\10\57\1\141\12\57"+
    "\1\136\3\57\1\142\3\57\1\140\4\57\1\141\6\57"+
    "\30\0\1\57\4\0\1\143\12\57\1\144\1\57\1\145"+
    "\4\57\1\146\4\57\1\147\15\57\1\144\1\145\3\57"+
    "\1\146\5\57\30\0\1\57\4\0\1\150\15\57\1\151"+
    "\2\57\1\152\12\57\1\150\12\57\1\151\1\57\1\152"+
    "\6\57\30\0\1\57\4\0\13\57\1\153\5\57\1\154"+
    "\23\57\1\153\3\57\1\154\6\57\30\0\1\57\4\0"+
    "\1\155\57\57\30\0\1\57\4\0\5\57\1\156\1\157"+
    "\5\57\1\160\1\161\4\57\1\162\16\57\1\156\1\157"+
    "\3\57\1\163\3\57\1\162\5\57\30\0\1\57\4\0"+
    "\16\57\1\164\30\57\1\164\10\57\30\0\1\57\4\0"+
    "\4\57\1\165\33\57\1\165\17\57\30\0\1\57\4\0"+
    "\4\57\1\166\3\57\1\167\27\57\1\166\3\57\1\167"+
    "\13\57\30\0\1\57\4\0\1\170\33\57\1\170\23\57"+
    "\30\0\1\57\4\0\1\171\15\57\1\172\5\57\1\173"+
    "\7\57\1\171\12\57\1\174\4\57\1\173\3\57\30\0"+
    "\1\57\4\0\5\57\1\175\7\57\1\176\3\57\1\177"+
    "\2\57\1\200\14\57\1\175\4\57\1\176\2\57\1\177"+
    "\2\57\1\200\3\57\30\0\1\57\4\0\13\57\1\201"+
    "\5\57\1\202\23\57\1\201\3\57\1\202\6\57\30\0"+
    "\1\57\4\0\24\57\1\203\27\57\1\203\3\57\30\0"+
    "\1\57\4\0\1\204\3\57\1\205\11\57\1\206\15\57"+
    "\1\204\3\57\1\207\6\57\1\210\10\57\30\0\1\57"+
    "\4\0\1\211\3\57\1\212\27\57\1\211\3\57\1\212"+
    "\17\57\30\0\1\57\4\0\1\213\3\57\1\214\2\57"+
    "\1\215\6\57\1\216\2\57\1\217\12\57\1\213\3\57"+
    "\1\214\2\57\1\215\3\57\1\216\1\57\1\220\6\57"+
    "\30\0\1\57\4\0\15\57\1\221\1\57\1\222\2\57"+
    "\1\223\23\57\1\221\1\57\1\222\1\57\1\223\5\57"+
    "\30\0\1\57\4\0\1\224\7\57\1\225\23\57\1\224"+
    "\7\57\1\226\13\57\30\0\1\57\4\0\7\57\1\227"+
    "\1\230\32\57\1\227\1\230\13\57\30\0\1\57\4\0"+
    "\60\57\30\0\1\57\4\0\1\57\1\113\1\57\1\115"+
    "\7\57\1\117\1\57\1\120\4\57\1\121\1\122\1\123"+
    "\10\57\1\113\1\57\1\115\5\57\1\117\1\120\3\57"+
    "\1\121\1\122\1\123\3\57\30\0\1\57\4\0\4\57"+
    "\1\126\23\57\1\125\7\57\1\126\16\57\1\125\30\0"+
    "\1\57\4\0\1\127\6\57\1\130\6\57\1\231\2\57"+
    "\1\132\2\57\1\133\7\57\1\127\6\57\1\130\2\57"+
    "\1\134\1\135\1\57\1\132\2\57\1\133\3\57\30\0"+
    "\1\57\4\0\1\136\3\57\1\142\3\57\1\140\10\57"+
    "\1\141\12\57\1\136\3\57\1\142\3\57\1\140\4\57"+
    "\1\141\6\57\30\0\1\57\4\0\13\57\1\144\1\57"+
    "\1\145\4\57\1\146\4\57\1\147\15\57\1\144\1\145"+
    "\3\57\1\146\5\57\30\0\1\57\4\0\5\57\1\156"+
    "\1\157\5\57\1\160\1\163\4\57\1\162\16\57\1\156"+
    "\1\157\3\57\1\163\3\57\1\162\5\57\30\0\1\57"+
    "\4\0\1\171\15\57\1\174\5\57\1\173\7\57\1\171"+
    "\12\57\1\174\4\57\1\173\3\57\30\0\1\57\4\0"+
    "\1\204\3\57\1\207\11\57\1\210\15\57\1\204\3\57"+
    "\1\207\6\57\1\210\10\57\30\0\1\57\4\0\1\213"+
    "\3\57\1\214\2\57\1\215\6\57\1\216\2\57\1\220"+
    "\12\57\1\213\3\57\1\214\2\57\1\215\3\57\1\216"+
    "\1\57\1\220\6\57\30\0\1\57\4\0\1\224\7\57"+
    "\1\226\23\57\1\224\7\57\1\226\13\57\116\0\1\232"+
    "\3\0\2\102\2\0\110\102\16\0\1\233\122\0\1\104"+
    "\114\0\1\57\4\0\16\57\1\234\30\57\1\234\10\57"+
    "\30\0\1\57\4\0\23\57\1\235\34\57\30\0\1\57"+
    "\4\0\3\57\1\236\33\57\1\236\20\57\30\0\1\57"+
    "\4\0\23\57\1\237\34\57\30\0\1\57\4\0\13\57"+
    "\1\240\7\57\1\241\21\57\1\240\5\57\1\241\4\57"+
    "\30\0\1\57\4\0\1\242\2\57\1\243\30\57\1\242"+
    "\2\57\1\243\20\57\30\0\1\57\4\0\2\57\1\244"+
    "\33\57\1\244\21\57\30\0\1\57\4\0\23\57\1\245"+
    "\27\57\1\245\4\57\30\0\1\57\4\0\23\57\1\246"+
    "\27\57\1\246\4\57\30\0\1\57\4\0\5\57\1\247"+
    "\1\250\14\57\1\251\16\57\1\250\10\57\1\251\4\57"+
    "\30\0\1\57\4\0\6\57\1\250\14\57\1\251\16\57"+
    "\1\250\10\57\1\251\4\57\30\0\1\57\4\0\22\57"+
    "\1\252\27\57\1\252\5\57\30\0\1\57\4\0\4\57"+
    "\1\253\33\57\1\253\17\57\30\0\1\57\4\0\13\57"+
    "\1\254\1\255\1\256\27\57\1\254\1\257\11\57\30\0"+
    "\1\57\4\0\4\57\1\260\11\57\1\261\21\57\1\260"+
    "\6\57\1\261\10\57\30\0\1\57\4\0\21\57\1\262"+
    "\27\57\1\262\6\57\30\0\1\57\4\0\15\57\1\257"+
    "\30\57\1\257\11\57\30\0\1\57\4\0\13\57\1\254"+
    "\1\255\30\57\1\254\12\57\30\0\1\57\4\0\23\57"+
    "\1\263\27\57\1\263\4\57\30\0\1\57\4\0\5\57"+
    "\1\264\5\57\1\265\6\57\1\266\1\267\15\57\1\270"+
    "\3\57\1\265\4\57\1\266\5\57\30\0\1\57\4\0"+
    "\22\57\1\271\27\57\1\271\5\57\30\0\1\57\4\0"+
    "\16\57\1\272\30\57\1\272\10\57\30\0\1\57\4\0"+
    "\5\57\1\270\5\57\1\265\6\57\1\266\16\57\1\270"+
    "\3\57\1\265\4\57\1\266\5\57\30\0\1\57\4\0"+
    "\2\57\1\273\55\57\30\0\1\57\4\0\22\57\1\274"+
    "\27\57\1\274\5\57\30\0\1\57\4\0\3\57\1\275"+
    "\33\57\1\275\20\57\30\0\1\57\4\0\2\57\1\276"+
    "\33\57\1\276\21\57\30\0\1\57\4\0\2\57\1\277"+
    "\5\57\1\300\6\57\1\301\16\57\1\277\5\57\1\300"+
    "\3\57\1\301\7\57\30\0\1\57\4\0\10\57\1\302"+
    "\2\57\1\303\30\57\1\302\1\303\12\57\30\0\1\57"+
    "\4\0\21\57\1\304\27\57\1\304\6\57\30\0\1\57"+
    "\4\0\16\57\1\305\30\57\1\305\10\57\30\0\1\57"+
    "\4\0\16\57\1\306\30\57\1\306\10\57\30\0\1\57"+
    "\4\0\16\57\1\307\30\57\1\307\10\57\30\0\1\57"+
    "\4\0\25\57\1\310\32\57\30\0\1\57\4\0\15\57"+
    "\1\311\30\57\1\311\11\57\30\0\1\57\4\0\14\57"+
    "\1\312\43\57\30\0\1\57\4\0\3\57\1\313\4\57"+
    "\1\314\4\57\1\315\4\57\1\316\1\317\13\57\1\313"+
    "\6\57\1\315\3\57\1\320\1\317\4\57\30\0\1\57"+
    "\4\0\3\57\1\313\11\57\1\315\4\57\1\320\1\317"+
    "\13\57\1\313\6\57\1\315\3\57\1\320\1\317\4\57"+
    "\30\0\1\57\4\0\10\57\1\321\33\57\1\321\13\57"+
    "\30\0\1\57\4\0\30\57\1\322\26\57\1\322\30\0"+
    "\1\57\4\0\5\57\1\323\33\57\1\323\16\57\30\0"+
    "\1\57\4\0\12\57\1\324\1\57\1\325\43\57\30\0"+
    "\1\57\4\0\23\57\1\326\27\57\1\326\4\57\30\0"+
    "\1\57\4\0\23\57\1\327\27\57\1\327\4\57\30\0"+
    "\1\57\4\0\23\57\1\330\27\57\1\330\4\57\30\0"+
    "\1\57\4\0\13\57\1\331\31\57\1\331\12\57\30\0"+
    "\1\57\4\0\5\57\1\332\33\57\1\332\16\57\30\0"+
    "\1\57\4\0\3\57\1\333\33\57\1\333\20\57\30\0"+
    "\1\57\4\0\23\57\1\334\27\57\1\334\4\57\30\0"+
    "\1\57\4\0\1\335\33\57\1\335\23\57\30\0\1\57"+
    "\4\0\1\336\7\57\1\337\23\57\1\336\7\57\1\337"+
    "\13\57\30\0\1\57\4\0\4\57\1\340\33\57\1\340"+
    "\17\57\30\0\1\57\4\0\10\57\1\341\33\57\1\341"+
    "\13\57\30\0\1\57\4\0\2\57\1\342\2\57\1\343"+
    "\1\344\1\57\1\345\2\57\1\346\1\57\1\347\1\57"+
    "\1\350\2\57\1\351\13\57\1\342\2\57\1\343\1\344"+
    "\1\57\1\345\1\346\1\347\3\57\1\351\5\57\30\0"+
    "\1\57\4\0\13\57\1\352\12\57\1\353\16\57\1\352"+
    "\12\57\30\0\1\57\4\0\2\57\1\342\2\57\1\343"+
    "\1\344\1\57\1\345\2\57\1\346\1\57\1\347\4\57"+
    "\1\351\13\57\1\342\2\57\1\343\1\344\1\57\1\345"+
    "\1\346\1\347\3\57\1\351\5\57\30\0\1\57\4\0"+
    "\13\57\1\352\31\57\1\352\12\57\30\0\1\57\4\0"+
    "\25\57\1\354\27\57\1\354\2\57\30\0\1\57\4\0"+
    "\13\57\1\355\7\57\1\356\21\57\1\355\5\57\1\356"+
    "\4\57\30\0\1\57\4\0\1\57\1\357\33\57\1\357"+
    "\22\57\30\0\1\57\4\0\14\57\1\360\43\57\30\0"+
    "\1\57\4\0\4\57\1\361\33\57\1\361\17\57\30\0"+
    "\1\57\4\0\1\362\7\57\1\363\13\57\1\364\7\57"+
    "\1\362\17\57\1\364\3\57\30\0\1\57\4\0\1\362"+
    "\23\57\1\364\7\57\1\362\17\57\1\364\3\57\30\0"+
    "\1\57\4\0\10\57\1\365\33\57\1\365\13\57\30\0"+
    "\1\57\4\0\3\57\1\366\33\57\1\366\20\57\30\0"+
    "\1\57\4\0\10\57\1\367\33\57\1\367\13\57\30\0"+
    "\1\57\4\0\2\57\1\370\10\57\1\371\22\57\1\370"+
    "\6\57\1\371\12\57\30\0\1\57\4\0\4\57\1\372"+
    "\14\57\1\373\16\57\1\372\17\57\30\0\1\57\4\0"+
    "\4\57\1\372\33\57\1\372\17\57\30\0\1\57\4\0"+
    "\4\57\1\374\33\57\1\374\17\57\30\0\1\57\4\0"+
    "\23\57\1\375\27\57\1\375\4\57\30\0\1\57\4\0"+
    "\13\57\1\254\1\255\1\257\27\57\1\254\1\257\11\57"+
    "\5\0\3\233\1\0\11\233\1\376\76\233\24\0\1\57"+
    "\4\0\21\57\1\377\27\57\1\377\6\57\30\0\1\57"+
    "\4\0\10\57\1\u0100\47\57\30\0\1\57\4\0\4\57"+
    "\1\u0101\53\57\30\0\1\57\4\0\4\57\1\u0102\33\57"+
    "\1\u0102\17\57\30\0\1\57\4\0\13\57\1\u0103\31\57"+
    "\1\u0103\12\57\30\0\1\57\4\0\1\u0104\33\57\1\u0104"+
    "\23\57\30\0\1\57\4\0\16\57\1\u0105\30\57\1\u0105"+
    "\10\57\30\0\1\57\4\0\16\57\1\u0106\41\57\30\0"+
    "\1\57\4\0\10\57\1\u0107\33\57\1\u0107\13\57\30\0"+
    "\1\57\4\0\26\57\1\u0108\27\57\1\u0108\1\57\30\0"+
    "\1\57\4\0\2\57\1\u0109\1\57\1\u010a\16\57\1\u010b"+
    "\12\57\1\u0109\1\57\1\u010a\12\57\1\u010b\4\57\30\0"+
    "\1\57\4\0\2\57\1\u010c\33\57\1\u010c\21\57\30\0"+
    "\1\57\4\0\13\57\1\u010d\10\57\1\u010e\20\57\1\u010d"+
    "\6\57\1\u010e\3\57\30\0\1\57\4\0\14\57\1\u010f"+
    "\43\57\30\0\1\57\4\0\5\57\1\u0110\14\57\1\u0111"+
    "\27\57\1\u0111\5\57\30\0\1\57\4\0\22\57\1\u0111"+
    "\27\57\1\u0111\5\57\30\0\1\57\4\0\1\u0112\33\57"+
    "\1\u0112\23\57\30\0\1\57\4\0\22\57\1\u0113\27\57"+
    "\1\u0113\5\57\30\0\1\57\4\0\21\57\1\u0114\27\57"+
    "\1\u0114\6\57\30\0\1\57\4\0\1\u0115\33\57\1\u0115"+
    "\23\57\30\0\1\57\4\0\1\u0116\3\57\1\u0117\27\57"+
    "\1\u0116\3\57\1\u0118\17\57\30\0\1\57\4\0\4\57"+
    "\1\u0119\33\57\1\u0119\17\57\30\0\1\57\4\0\2\57"+
    "\1\u011a\33\57\1\u011a\21\57\30\0\1\57\4\0\1\u011b"+
    "\57\57\30\0\1\57\4\0\1\u0116\3\57\1\u0118\27\57"+
    "\1\u0116\3\57\1\u0118\17\57\30\0\1\57\4\0\23\57"+
    "\1\u011c\27\57\1\u011c\4\57\30\0\1\57\4\0\17\57"+
    "\1\u011d\30\57\1\u011d\7\57\30\0\1\57\4\0\7\57"+
    "\1\u011e\50\57\30\0\1\57\4\0\4\57\1\u011f\33\57"+
    "\1\u011f\17\57\30\0\1\57\4\0\1\u0120\33\57\1\u0120"+
    "\23\57\30\0\1\57\4\0\4\57\1\u0121\6\57\1\u0122"+
    "\24\57\1\u0121\4\57\1\u0122\12\57\30\0\1\57\4\0"+
    "\22\57\1\u0123\27\57\1\u0123\5\57\30\0\1\57\4\0"+
    "\13\57\1\u0124\31\57\1\u0124\12\57\30\0\1\57\4\0"+
    "\13\57\1\u0125\31\57\1\u0125\12\57\30\0\1\57\4\0"+
    "\22\57\1\u0126\27\57\1\u0126\5\57\30\0\1\57\4\0"+
    "\4\57\1\u0127\33\57\1\u0127\17\57\30\0\1\57\4\0"+
    "\14\57\1\u0128\43\57\30\0\1\57\4\0\1\57\1\u0129"+
    "\33\57\1\u0129\22\57\30\0\1\57\4\0\24\57\1\u012a"+
    "\27\57\1\u012a\3\57\30\0\1\57\4\0\10\57\1\u012b"+
    "\47\57\30\0\1\57\4\0\16\57\1\u012c\30\57\1\u012c"+
    "\10\57\30\0\1\57\4\0\4\57\1\u012d\33\57\1\u012d"+
    "\17\57\30\0\1\57\4\0\4\57\1\u012e\33\57\1\u012e"+
    "\17\57\30\0\1\57\4\0\23\57\1\u012f\34\57\30\0"+
    "\1\57\4\0\4\57\1\u0130\33\57\1\u0130\17\57\30\0"+
    "\1\57\4\0\4\57\1\u0131\16\57\1\u0132\14\57\1\u0131"+
    "\17\57\30\0\1\57\4\0\4\57\1\u0133\11\57\1\u0134"+
    "\21\57\1\u0133\6\57\1\u0134\10\57\30\0\1\57\4\0"+
    "\4\57\1\u0131\33\57\1\u0131\17\57\30\0\1\57\4\0"+
    "\15\57\1\u0135\30\57\1\u0135\11\57\30\0\1\57\4\0"+
    "\23\57\1\u0136\27\57\1\u0136\4\57\30\0\1\57\4\0"+
    "\4\57\1\u0137\33\57\1\u0137\17\57\30\0\1\57\4\0"+
    "\10\57\1\u0138\33\57\1\u0138\13\57\30\0\1\57\4\0"+
    "\2\57\1\u0139\33\57\1\u0139\21\57\30\0\1\57\4\0"+
    "\24\57\1\u013a\27\57\1\u013a\3\57\30\0\1\57\4\0"+
    "\13\57\1\u013b\31\57\1\u013b\12\57\30\0\1\57\4\0"+
    "\22\57\1\u013c\27\57\1\u013c\5\57\30\0\1\57\4\0"+
    "\4\57\1\u013d\33\57\1\u013d\17\57\30\0\1\57\4\0"+
    "\4\57\1\u013e\33\57\1\u013e\17\57\30\0\1\57\4\0"+
    "\15\57\1\u013f\30\57\1\u013f\11\57\30\0\1\57\4\0"+
    "\6\57\1\u0140\33\57\1\u0140\15\57\30\0\1\57\4\0"+
    "\14\57\1\u0141\43\57\30\0\1\57\4\0\21\57\1\u0142"+
    "\27\57\1\u0142\6\57\30\0\1\57\4\0\22\57\1\u0143"+
    "\27\57\1\u0143\5\57\30\0\1\57\4\0\24\57\1\u0144"+
    "\27\57\1\u0144\3\57\30\0\1\57\4\0\4\57\1\u0145"+
    "\33\57\1\u0145\17\57\30\0\1\57\4\0\4\57\1\u0146"+
    "\33\57\1\u0146\17\57\30\0\1\57\4\0\15\57\1\u0147"+
    "\30\57\1\u0147\11\57\30\0\1\57\4\0\4\57\1\u0148"+
    "\33\57\1\u0148\17\57\30\0\1\57\4\0\1\u0149\33\57"+
    "\1\u0149\23\57\30\0\1\57\4\0\13\57\1\u014a\44\57"+
    "\30\0\1\57\4\0\23\57\1\u014b\27\57\1\u014b\4\57"+
    "\30\0\1\57\4\0\13\57\1\u014c\31\57\1\u014c\12\57"+
    "\30\0\1\57\4\0\10\57\1\u014d\47\57\30\0\1\57"+
    "\4\0\4\57\1\u014e\33\57\1\u014e\17\57\30\0\1\57"+
    "\4\0\4\57\1\u014f\33\57\1\u014f\17\57\30\0\1\57"+
    "\4\0\13\57\1\u0150\31\57\1\u0150\12\57\30\0\1\57"+
    "\4\0\17\57\1\u0151\30\57\1\u0151\7\57\30\0\1\57"+
    "\4\0\15\57\1\u0152\30\57\1\u0152\11\57\30\0\1\57"+
    "\4\0\15\57\1\u0153\30\57\1\u0153\11\57\30\0\1\57"+
    "\4\0\6\57\1\u0154\51\57\30\0\1\57\4\0\4\57"+
    "\1\u0155\33\57\1\u0155\17\57\30\0\1\57\4\0\16\57"+
    "\1\u0156\1\57\1\u0157\26\57\1\u0156\10\57\30\0\1\57"+
    "\4\0\1\u0158\33\57\1\u0158\23\57\30\0\1\57\4\0"+
    "\15\57\1\u0159\30\57\1\u0159\11\57\30\0\1\57\4\0"+
    "\24\57\1\u015a\27\57\1\u015a\3\57\30\0\1\57\4\0"+
    "\24\57\1\u015b\27\57\1\u015b\3\57\30\0\1\57\4\0"+
    "\26\57\1\u015c\27\57\1\u015c\1\57\30\0\1\57\4\0"+
    "\23\57\1\u015d\34\57\30\0\1\57\4\0\15\57\1\u015e"+
    "\3\57\1\u015f\24\57\1\u015e\2\57\1\u015f\6\57\30\0"+
    "\1\57\4\0\7\57\1\u0160\33\57\1\u0160\14\57\5\0"+
    "\3\233\1\0\11\233\1\376\4\233\1\u0161\71\233\24\0"+
    "\1\57\4\0\23\57\1\u0162\27\57\1\u0162\4\57\30\0"+
    "\1\57\4\0\16\57\1\u0163\41\57\30\0\1\57\4\0"+
    "\21\57\1\u0164\36\57\30\0\1\57\4\0\21\57\1\u0165"+
    "\27\57\1\u0165\6\57\30\0\1\57\4\0\30\57\1\u0166"+
    "\26\57\1\u0166\30\0\1\57\4\0\2\57\1\u0167\33\57"+
    "\1\u0167\21\57\30\0\1\57\4\0\10\57\1\u0168\33\57"+
    "\1\u0168\13\57\30\0\1\57\4\0\21\57\1\u0169\36\57"+
    "\30\0\1\57\4\0\15\57\1\u016a\30\57\1\u016a\11\57"+
    "\30\0\1\57\4\0\4\57\1\u016b\33\57\1\u016b\17\57"+
    "\30\0\1\57\4\0\1\u016c\33\57\1\u016c\23\57\30\0"+
    "\1\57\4\0\12\57\1\u016d\45\57\30\0\1\57\4\0"+
    "\1\u016e\33\57\1\u016e\23\57\30\0\1\57\4\0\14\57"+
    "\1\u016f\43\57\30\0\1\57\4\0\10\57\1\u0170\33\57"+
    "\1\u0170\13\57\30\0\1\57\4\0\13\57\1\u0171\44\57"+
    "\30\0\1\57\4\0\23\57\1\u0172\27\57\1\u0172\4\57"+
    "\30\0\1\57\4\0\23\57\1\u0173\27\57\1\u0173\4\57"+
    "\30\0\1\57\4\0\22\57\1\u0174\27\57\1\u0174\5\57"+
    "\30\0\1\57\4\0\4\57\1\u0175\33\57\1\u0175\17\57"+
    "\30\0\1\57\4\0\1\57\1\u0176\33\57\1\u0176\22\57"+
    "\30\0\1\57\4\0\24\57\1\u0177\27\57\1\u0177\3\57"+
    "\30\0\1\57\4\0\21\57\1\u0178\27\57\1\u0179\6\57"+
    "\30\0\1\57\4\0\21\57\1\u0179\27\57\1\u0179\6\57"+
    "\30\0\1\57\4\0\23\57\1\u017a\27\57\1\u017a\4\57"+
    "\30\0\1\57\4\0\2\57\1\u017b\55\57\30\0\1\57"+
    "\4\0\10\57\1\u017c\33\57\1\u017c\13\57\30\0\1\57"+
    "\4\0\17\57\1\u017d\30\57\1\u017d\7\57\30\0\1\57"+
    "\4\0\17\57\1\u017e\30\57\1\u017e\7\57\30\0\1\57"+
    "\4\0\24\57\1\u017f\27\57\1\u017f\3\57\30\0\1\57"+
    "\4\0\23\57\1\u0180\27\57\1\u0180\4\57\30\0\1\57"+
    "\4\0\1\u0181\33\57\1\u0181\23\57\30\0\1\57\4\0"+
    "\4\57\1\u0182\33\57\1\u0182\17\57\30\0\1\57\4\0"+
    "\10\57\1\u0183\33\57\1\u0183\13\57\30\0\1\57\4\0"+
    "\17\57\1\u0184\30\57\1\u0184\7\57\30\0\1\57\4\0"+
    "\15\57\1\u0185\42\57\30\0\1\57\4\0\21\57\1\u0186"+
    "\27\57\1\u0186\6\57\30\0\1\57\4\0\3\57\1\u0187"+
    "\33\57\1\u0187\20\57\30\0\1\57\4\0\27\57\1\u0188"+
    "\30\57\30\0\1\57\4\0\10\57\1\u0189\47\57\30\0"+
    "\1\57\4\0\21\57\1\u018a\27\57\1\u018a\6\57\30\0"+
    "\1\57\4\0\21\57\1\u018b\27\57\1\u018b\6\57\30\0"+
    "\1\57\4\0\4\57\1\u018c\53\57\30\0\1\57\4\0"+
    "\21\57\1\u018d\27\57\1\u018d\6\57\30\0\1\57\4\0"+
    "\23\57\1\u018e\27\57\1\u018e\4\57\30\0\1\57\4\0"+
    "\7\57\1\u018f\33\57\1\u018f\14\57\30\0\1\57\4\0"+
    "\21\57\1\u0190\27\57\1\u0190\6\57\30\0\1\57\4\0"+
    "\4\57\1\u0191\33\57\1\u0191\17\57\30\0\1\57\4\0"+
    "\21\57\1\u0192\27\57\1\u0192\6\57\30\0\1\57\4\0"+
    "\21\57\1\u0193\27\57\1\u0193\6\57\30\0\1\57\4\0"+
    "\14\57\1\u0194\43\57\30\0\1\57\4\0\1\u0195\33\57"+
    "\1\u0195\23\57\30\0\1\57\4\0\30\57\1\u0196\26\57"+
    "\1\u0196\30\0\1\57\4\0\4\57\1\u0197\33\57\1\u0197"+
    "\17\57\30\0\1\57\4\0\21\57\1\u0198\27\57\1\u0198"+
    "\6\57\30\0\1\57\4\0\21\57\1\u0199\27\57\1\u0199"+
    "\6\57\30\0\1\57\4\0\27\57\1\u019a\30\57\30\0"+
    "\1\57\4\0\3\57\1\u019b\33\57\1\u019b\20\57\30\0"+
    "\1\57\4\0\1\u019c\33\57\1\u019c\23\57\30\0\1\57"+
    "\4\0\14\57\1\u019d\43\57\30\0\1\57\4\0\1\u019e"+
    "\57\57\30\0\1\57\4\0\21\57\1\u019f\27\57\1\u019f"+
    "\6\57\30\0\1\57\4\0\1\57\1\u01a0\33\57\1\u01a0"+
    "\22\57\30\0\1\57\4\0\3\57\1\u01a1\54\57\30\0"+
    "\1\57\4\0\17\57\1\u01a2\30\57\1\u01a2\7\57\30\0"+
    "\1\57\4\0\2\57\1\u01a3\33\57\1\u01a3\21\57\30\0"+
    "\1\57\4\0\4\57\1\u01a4\33\57\1\u01a4\17\57\30\0"+
    "\1\57\4\0\16\57\1\u01a5\30\57\1\u01a5\10\57\30\0"+
    "\1\57\4\0\22\57\1\u01a6\27\57\1\u01a6\5\57\30\0"+
    "\1\57\4\0\6\57\1\u01a7\51\57\30\0\1\57\4\0"+
    "\15\57\1\u01a8\30\57\1\u01a8\11\57\30\0\1\57\4\0"+
    "\24\57\1\u01a9\27\57\1\u01a9\3\57\30\0\1\57\4\0"+
    "\23\57\1\u01aa\27\57\1\u01aa\4\57\30\0\1\57\4\0"+
    "\6\57\1\u01ab\33\57\1\u01ab\15\57\30\0\1\57\4\0"+
    "\24\57\1\u01ac\27\57\1\u01ac\3\57\30\0\1\57\4\0"+
    "\4\57\1\u01ad\33\57\1\u01ad\17\57\30\0\1\57\4\0"+
    "\24\57\1\u01ae\33\57\30\0\1\57\4\0\4\57\1\u01af"+
    "\33\57\1\u01af\17\57\30\0\1\57\4\0\16\57\1\u01b0"+
    "\30\57\1\u01b0\10\57\30\0\1\57\4\0\15\57\1\u01b1"+
    "\42\57\30\0\1\57\4\0\31\57\1\u01b2\26\57\30\0"+
    "\1\57\4\0\7\57\1\u01b3\33\57\1\u01b3\14\57\30\0"+
    "\1\57\4\0\15\57\1\u01b4\30\57\1\u01b4\11\57\30\0"+
    "\1\57\4\0\4\57\1\u01b5\53\57\30\0\1\57\4\0"+
    "\4\57\1\u01b6\33\57\1\u01b6\17\57\30\0\1\57\4\0"+
    "\3\57\1\u01b7\33\57\1\u01b7\20\57\30\0\1\57\4\0"+
    "\23\57\1\u01b8\27\57\1\u01b8\4\57\30\0\1\57\4\0"+
    "\15\57\1\u01b9\30\57\1\u01b9\11\57\30\0\1\57\4\0"+
    "\23\57\1\u01ba\27\57\1\u01ba\4\57\30\0\1\57\4\0"+
    "\10\57\1\u01bb\47\57\30\0\1\57\4\0\21\57\1\u01bc"+
    "\27\57\1\u01bc\6\57\30\0\1\57\4\0\4\57\1\u01bd"+
    "\33\57\1\u01bd\17\57\30\0\1\57\4\0\15\57\1\u01be"+
    "\30\57\1\u01be\11\57\30\0\1\57\4\0\1\u01bf\33\57"+
    "\1\u01bf\23\57\30\0\1\57\4\0\13\57\1\u01c0\31\57"+
    "\1\u01c0\12\57\30\0\1\57\4\0\21\57\1\u01c1\27\57"+
    "\1\u01c2\6\57\30\0\1\57\4\0\21\57\1\u01c2\27\57"+
    "\1\u01c2\6\57\30\0\1\57\4\0\4\57\1\u01c3\33\57"+
    "\1\u01c3\17\57\30\0\1\57\4\0\7\57\1\u01c4\50\57"+
    "\30\0\1\57\4\0\15\57\1\u01c5\30\57\1\u01c5\11\57"+
    "\30\0\1\57\4\0\4\57\1\u01c6\33\57\1\u01c6\17\57"+
    "\30\0\1\57\4\0\23\57\1\u01c7\27\57\1\u01c7\4\57"+
    "\30\0\1\57\4\0\22\57\1\u01c8\27\57\1\u01c8\5\57"+
    "\30\0\1\57\4\0\22\57\1\u01c9\27\57\1\u01c9\5\57"+
    "\30\0\1\57\4\0\10\57\1\u01ca\33\57\1\u01ca\13\57"+
    "\30\0\1\57\4\0\6\57\1\u01cb\33\57\1\u01cb\15\57"+
    "\30\0\1\57\4\0\6\57\1\u01cc\51\57\30\0\1\57"+
    "\4\0\4\57\1\u01cd\33\57\1\u01cd\17\57\30\0\1\57"+
    "\4\0\10\57\1\u01ce\33\57\1\u01ce\13\57\30\0\1\57"+
    "\4\0\4\57\1\u01cf\33\57\1\u01cf\17\57\30\0\1\57"+
    "\4\0\1\u01d0\57\57\30\0\1\57\4\0\23\57\1\u01d1"+
    "\27\57\1\u01d1\4\57\30\0\1\57\4\0\1\u01d2\57\57"+
    "\30\0\1\57\4\0\22\57\1\u01d3\27\57\1\u01d3\5\57"+
    "\30\0\1\57\4\0\1\u01d4\33\57\1\u01d4\23\57\30\0"+
    "\1\57\4\0\23\57\1\u01d5\27\57\1\u01d5\4\57\30\0"+
    "\1\57\4\0\1\u01d6\33\57\1\u01d6\23\57\30\0\1\57"+
    "\4\0\21\57\1\u01d7\27\57\1\u01d7\6\57\30\0\1\57"+
    "\4\0\22\57\1\u01d8\27\57\1\u01d8\5\57\30\0\1\57"+
    "\4\0\4\57\1\u01d9\33\57\1\u01d9\17\57\30\0\1\57"+
    "\4\0\17\57\1\u01da\30\57\1\u01da\7\57\30\0\1\57"+
    "\4\0\4\57\1\u01db\33\57\1\u01db\17\57\30\0\1\57"+
    "\4\0\22\57\1\u01dc\27\57\1\u01dc\5\57\30\0\1\57"+
    "\4\0\4\57\1\u01dd\33\57\1\u01dd\17\57\30\0\1\57"+
    "\4\0\2\57\1\u01de\55\57\30\0\1\57\4\0\10\57"+
    "\1\u01df\33\57\1\u01df\13\57\30\0\1\57\4\0\1\u01e0"+
    "\33\57\1\u01e0\23\57\30\0\1\57\4\0\16\57\1\u01e1"+
    "\30\57\1\u01e1\10\57\30\0\1\57\4\0\23\57\1\u01e2"+
    "\27\57\1\u01e2\4\57\30\0\1\57\4\0\21\57\1\u01e3"+
    "\27\57\1\u01e3\6\57\30\0\1\57\4\0\1\u01e4\33\57"+
    "\1\u01e4\23\57\30\0\1\57\4\0\4\57\1\u01e5\53\57"+
    "\30\0\1\57\4\0\4\57\1\u01e6\33\57\1\u01e6\17\57"+
    "\30\0\1\57\4\0\4\57\1\u01e7\33\57\1\u01e7\17\57"+
    "\30\0\1\57\4\0\14\57\1\u01e8\43\57\30\0\1\57"+
    "\4\0\22\57\1\u01e9\27\57\1\u01e9\5\57\30\0\1\57"+
    "\4\0\1\u01ea\57\57\30\0\1\57\4\0\24\57\1\u01eb"+
    "\27\57\1\u01eb\3\57\30\0\1\57\4\0\4\57\1\u01ec"+
    "\33\57\1\u01ec\17\57\30\0\1\57\4\0\2\57\1\u01ed"+
    "\33\57\1\u01ed\21\57\30\0\1\57\4\0\15\57\1\u01ee"+
    "\30\57\1\u01ee\11\57\30\0\1\57\4\0\4\57\1\u01ef"+
    "\33\57\1\u01ef\17\57\30\0\1\57\4\0\4\57\1\u01f0"+
    "\33\57\1\u01f0\17\57\30\0\1\57\4\0\2\57\1\u01f1"+
    "\55\57\30\0\1\57\4\0\1\u01f2\33\57\1\u01f2\23\57"+
    "\30\0\1\57\4\0\23\57\1\u01f3\27\57\1\u01f3\4\57"+
    "\30\0\1\57\4\0\22\57\1\u01f4\27\57\1\u01f4\5\57"+
    "\30\0\1\57\4\0\23\57\1\u01f5\27\57\1\u01f5\4\57"+
    "\30\0\1\57\4\0\1\u01f6\3\57\1\u01f7\33\57\1\u01f7"+
    "\17\57\30\0\1\57\4\0\4\57\1\u01f7\33\57\1\u01f7"+
    "\17\57\30\0\1\57\4\0\2\57\1\u01f8\33\57\1\u01f8"+
    "\21\57\30\0\1\57\4\0\10\57\1\u01f9\33\57\1\u01f9"+
    "\13\57\30\0\1\57\4\0\15\57\1\u01fa\30\57\1\u01fa"+
    "\11\57\30\0\1\57\4\0\15\57\1\u01fb\30\57\1\u01fb"+
    "\11\57\30\0\1\57\4\0\1\u01fc\33\57\1\u01fc\23\57"+
    "\30\0\1\57\4\0\3\57\1\u01fd\33\57\1\u01fd\20\57"+
    "\30\0\1\57\4\0\13\57\1\u01fe\44\57\30\0\1\57"+
    "\4\0\3\57\1\u01ff\54\57\30\0\1\57\4\0\4\57"+
    "\1\u0200\33\57\1\u0200\17\57\30\0\1\57\4\0\13\57"+
    "\1\u0201\31\57\1\u0201\12\57\30\0\1\57\4\0\30\57"+
    "\1\u0202\26\57\1\u0202\30\0\1\57\4\0\10\57\1\u0203"+
    "\33\57\1\u0203\13\57\30\0\1\57\4\0\15\57\1\u0204"+
    "\30\57\1\u0204\11\57\30\0\1\57\4\0\27\57\1\u0205"+
    "\30\57\30\0\1\57\4\0\4\57\1\u0206\33\57\1\u0206"+
    "\17\57\30\0\1\57\4\0\4\57\1\u0207\53\57\30\0"+
    "\1\57\4\0\2\57\1\u0208\33\57\1\u0208\21\57\30\0"+
    "\1\57\4\0\2\57\1\u0209\33\57\1\u0209\21\57\30\0"+
    "\1\57\4\0\10\57\1\u020a\33\57\1\u020a\13\57\30\0"+
    "\1\57\4\0\1\u020b\33\57\1\u020b\23\57\30\0\1\57"+
    "\4\0\2\57\1\u020c\33\57\1\u020c\21\57\30\0\1\57"+
    "\4\0\21\57\1\u020d\36\57\30\0\1\57\4\0\13\57"+
    "\1\u020e\44\57\30\0\1\57\4\0\23\57\1\u020f\27\57"+
    "\1\u020f\4\57\30\0\1\57\4\0\21\57\1\u0210\27\57"+
    "\1\u0210\6\57\30\0\1\57\4\0\23\57\1\u0211\34\57"+
    "\30\0\1\57\4\0\10\57\1\u0212\33\57\1\u0212\13\57"+
    "\30\0\1\57\4\0\33\57\1\u0213\24\57\30\0\1\57"+
    "\4\0\4\57\1\u0214\33\57\1\u0214\17\57\30\0\1\57"+
    "\4\0\1\57\1\u0215\56\57\30\0\1\57\4\0\3\57"+
    "\1\u0216\33\57\1\u0216\20\57\30\0\1\57\4\0\23\57"+
    "\1\u0217\27\57\1\u0217\4\57\30\0\1\57\4\0\25\57"+
    "\1\u0218\27\57\1\u0218\2\57\30\0\1\57\4\0\23\57"+
    "\1\u0219\27\57\1\u0219\4\57\30\0\1\57\4\0\13\57"+
    "\1\u021a\44\57\30\0\1\57\4\0\2\57\1\u021b\33\57"+
    "\1\u021b\21\57\30\0\1\57\4\0\25\57\1\u021c\27\57"+
    "\1\u021c\2\57\30\0\1\57\4\0\2\57\1\u021d\33\57"+
    "\1\u021d\21\57\30\0\1\57\4\0\23\57\1\u021e\27\57"+
    "\1\u021e\4\57\30\0\1\57\4\0\12\57\1\u021f\45\57"+
    "\30\0\1\57\4\0\15\57\1\u0220\30\57\1\u0220\11\57"+
    "\30\0\1\57\4\0\21\57\1\u0221\27\57\1\u0221\6\57"+
    "\30\0\1\57\4\0\23\57\1\u0222\27\57\1\u0222\4\57"+
    "\30\0\1\57\4\0\4\57\1\u0223\33\57\1\u0223\17\57"+
    "\30\0\1\57\4\0\15\57\1\u0224\30\57\1\u0224\11\57"+
    "\30\0\1\57\4\0\3\57\1\u0225\17\57\1\u0226\13\57"+
    "\1\u0225\13\57\1\u0226\4\57\30\0\1\57\4\0\13\57"+
    "\1\u0227\44\57\30\0\1\57\4\0\4\57\1\u0228\33\57"+
    "\1\u0228\17\57\30\0\1\57\4\0\4\57\1\u0229\33\57"+
    "\1\u0229\17\57\30\0\1\57\4\0\30\57\1\u022a\27\57"+
    "\30\0\1\57\4\0\23\57\1\u022b\27\57\1\u022b\4\57"+
    "\30\0\1\57\4\0\4\57\1\u022c\33\57\1\u022c\17\57"+
    "\30\0\1\57\4\0\4\57\1\u022d\33\57\1\u022d\17\57"+
    "\30\0\1\57\4\0\23\57\1\u022e\27\57\1\u022e\4\57"+
    "\30\0\1\57\4\0\30\57\1\u022f\26\57\1\u022f\30\0"+
    "\1\57\4\0\10\57\1\u0230\33\57\1\u0230\13\57\30\0"+
    "\1\57\4\0\14\57\1\u0231\43\57\30\0\1\57\4\0"+
    "\23\57\1\u0232\27\57\1\u0232\4\57\30\0\1\57\4\0"+
    "\1\u0233\33\57\1\u0233\23\57\30\0\1\57\4\0\10\57"+
    "\1\u0234\33\57\1\u0234\13\57\30\0\1\57\4\0\4\57"+
    "\1\u0235\53\57\30\0\1\57\4\0\22\57\1\u0236\27\57"+
    "\1\u0236\5\57\30\0\1\57\4\0\16\57\1\u0237\30\57"+
    "\1\u0237\10\57\30\0\1\57\4\0\4\57\1\u0238\33\57"+
    "\1\u0238\17\57\30\0\1\57\4\0\23\57\1\u0239\27\57"+
    "\1\u0239\4\57\30\0\1\57\4\0\14\57\1\u023a\43\57"+
    "\30\0\1\57\4\0\15\57\1\u023b\30\57\1\u023b\11\57"+
    "\30\0\1\57\4\0\15\57\1\u023c\30\57\1\u023c\11\57"+
    "\30\0\1\57\4\0\4\57\1\u023d\33\57\1\u023d\17\57"+
    "\30\0\1\57\4\0\4\57\1\u023e\33\57\1\u023e\17\57"+
    "\30\0\1\57\4\0\23\57\1\u023f\27\57\1\u023f\4\57"+
    "\30\0\1\57\4\0\22\57\1\u0240\27\57\1\u0240\5\57"+
    "\30\0\1\57\4\0\23\57\1\u0241\27\57\1\u0241\4\57"+
    "\30\0\1\57\4\0\1\u0242\33\57\1\u0242\23\57\30\0"+
    "\1\57\4\0\14\57\1\u0243\43\57\30\0\1\57\4\0"+
    "\17\57\1\u0244\30\57\1\u0244\7\57\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[33957];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\4\11\1\1\5\11\1\1\1\11"+
    "\2\1\1\11\45\1\1\11\1\1\3\11\1\0\1\11"+
    "\1\0\1\1\1\0\1\1\6\11\117\1\1\11\1\0"+
    "\142\1\1\0\u0146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[580];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _SqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 160: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 161: break;
          case 3:
            { return SHARP;
            }
          // fall through
          case 162: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 163: break;
          case 5:
            { return MOD;
            }
          // fall through
          case 164: break;
          case 6:
            { return BITWISE_AND;
            }
          // fall through
          case 165: break;
          case 7:
            { return LP;
            }
          // fall through
          case 166: break;
          case 8:
            { return RP;
            }
          // fall through
          case 167: break;
          case 9:
            { return MULTIPLY;
            }
          // fall through
          case 168: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 169: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 170: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 171: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 172: break;
          case 14:
            { return DIVIDE;
            }
          // fall through
          case 173: break;
          case 15:
            { return DIGIT;
            }
          // fall through
          case 174: break;
          case 16:
            { return SEMI;
            }
          // fall through
          case 175: break;
          case 17:
            { return LT;
            }
          // fall through
          case 176: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 177: break;
          case 19:
            { return GT;
            }
          // fall through
          case 178: break;
          case 20:
            { return ID;
            }
          // fall through
          case 179: break;
          case 21:
            { return E;
            }
          // fall through
          case 180: break;
          case 22:
            { return LB;
            }
          // fall through
          case 181: break;
          case 23:
            { return BITWISE_OR;
            }
          // fall through
          case 182: break;
          case 24:
            { return RB;
            }
          // fall through
          case 183: break;
          case 25:
            { return BITWISE_NOT;
            }
          // fall through
          case 184: break;
          case 26:
            { return NEQ;
            }
          // fall through
          case 185: break;
          case 27:
            { return STRING;
            }
          // fall through
          case 186: break;
          case 28:
            { return COMMENT;
            }
          // fall through
          case 187: break;
          case 29:
            { return SHIFT_LEFT;
            }
          // fall through
          case 188: break;
          case 30:
            { return LTE;
            }
          // fall through
          case 189: break;
          case 31:
            { return NEQ2;
            }
          // fall through
          case 190: break;
          case 32:
            { return EQ2;
            }
          // fall through
          case 191: break;
          case 33:
            { return GTE;
            }
          // fall through
          case 192: break;
          case 34:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 193: break;
          case 35:
            { return AS;
            }
          // fall through
          case 194: break;
          case 36:
            { return BY;
            }
          // fall through
          case 195: break;
          case 37:
            { return IF;
            }
          // fall through
          case 196: break;
          case 38:
            { return IN;
            }
          // fall through
          case 197: break;
          case 39:
            { return IS;
            }
          // fall through
          case 198: break;
          case 40:
            { return NO;
            }
          // fall through
          case 199: break;
          case 41:
            { return OF;
            }
          // fall through
          case 200: break;
          case 42:
            { return ON;
            }
          // fall through
          case 201: break;
          case 43:
            { return OR;
            }
          // fall through
          case 202: break;
          case 44:
            { return TO;
            }
          // fall through
          case 203: break;
          case 45:
            { return CONCAT;
            }
          // fall through
          case 204: break;
          case 46:
            { return ADD;
            }
          // fall through
          case 205: break;
          case 47:
            { return ALL;
            }
          // fall through
          case 206: break;
          case 48:
            { return AND;
            }
          // fall through
          case 207: break;
          case 49:
            { return ASC;
            }
          // fall through
          case 208: break;
          case 50:
            { return END;
            }
          // fall through
          case 209: break;
          case 51:
            { return FOR;
            }
          // fall through
          case 210: break;
          case 52:
            { return KEY;
            }
          // fall through
          case 211: break;
          case 53:
            { return NOT;
            }
          // fall through
          case 212: break;
          case 54:
            { return ROW;
            }
          // fall through
          case 213: break;
          case 55:
            { return SET;
            }
          // fall through
          case 214: break;
          case 56:
            { return CASE;
            }
          // fall through
          case 215: break;
          case 57:
            { return CAST;
            }
          // fall through
          case 216: break;
          case 58:
            { return DESC;
            }
          // fall through
          case 217: break;
          case 59:
            { return DROP;
            }
          // fall through
          case 218: break;
          case 60:
            { return EACH;
            }
          // fall through
          case 219: break;
          case 61:
            { return ELSE;
            }
          // fall through
          case 220: break;
          case 62:
            { return FAIL;
            }
          // fall through
          case 221: break;
          case 63:
            { return FROM;
            }
          // fall through
          case 222: break;
          case 64:
            { return GLOB;
            }
          // fall through
          case 223: break;
          case 65:
            { return INTO;
            }
          // fall through
          case 224: break;
          case 66:
            { return JOIN;
            }
          // fall through
          case 225: break;
          case 67:
            { return LEFT;
            }
          // fall through
          case 226: break;
          case 68:
            { return LIKE;
            }
          // fall through
          case 227: break;
          case 69:
            { return NULL;
            }
          // fall through
          case 228: break;
          case 70:
            { return PLAN;
            }
          // fall through
          case 229: break;
          case 71:
            { return TEMP;
            }
          // fall through
          case 230: break;
          case 72:
            { return THEN;
            }
          // fall through
          case 231: break;
          case 73:
            { return TRUE;
            }
          // fall through
          case 232: break;
          case 74:
            { return VIEW;
            }
          // fall through
          case 233: break;
          case 75:
            { return WHEN;
            }
          // fall through
          case 234: break;
          case 76:
            { return WITH;
            }
          // fall through
          case 235: break;
          case 77:
            { return JAVADOC;
            }
          // fall through
          case 236: break;
          case 78:
            { return ABORT;
            }
          // fall through
          case 237: break;
          case 79:
            { return AFTER;
            }
          // fall through
          case 238: break;
          case 80:
            { return ALTER;
            }
          // fall through
          case 239: break;
          case 81:
            { return BEGIN;
            }
          // fall through
          case 240: break;
          case 82:
            { return CHECK;
            }
          // fall through
          case 241: break;
          case 83:
            { return CROSS;
            }
          // fall through
          case 242: break;
          case 84:
            { return FALSE;
            }
          // fall through
          case 243: break;
          case 85:
            { return GROUP;
            }
          // fall through
          case 244: break;
          case 86:
            { return INDEX;
            }
          // fall through
          case 245: break;
          case 87:
            { return INNER;
            }
          // fall through
          case 246: break;
          case 88:
            { return LIMIT;
            }
          // fall through
          case 247: break;
          case 89:
            { return MATCH;
            }
          // fall through
          case 248: break;
          case 90:
            { return ORDER;
            }
          // fall through
          case 249: break;
          case 91:
            { return OUTER;
            }
          // fall through
          case 250: break;
          case 92:
            { return QUERY;
            }
          // fall through
          case 251: break;
          case 93:
            { return RAISE;
            }
          // fall through
          case 252: break;
          case 94:
            { return ROWID;
            }
          // fall through
          case 253: break;
          case 95:
            { return TABLE;
            }
          // fall through
          case 254: break;
          case 96:
            { return UNION;
            }
          // fall through
          case 255: break;
          case 97:
            { return USING;
            }
          // fall through
          case 256: break;
          case 98:
            { return WHERE;
            }
          // fall through
          case 257: break;
          case 99:
            { return ACTION;
            }
          // fall through
          case 258: break;
          case 100:
            { return ATTACH;
            }
          // fall through
          case 259: break;
          case 101:
            { return BEFORE;
            }
          // fall through
          case 260: break;
          case 102:
            { return COLUMN;
            }
          // fall through
          case 261: break;
          case 103:
            { return COMMIT;
            }
          // fall through
          case 262: break;
          case 104:
            { return CREATE;
            }
          // fall through
          case 263: break;
          case 105:
            { return DELETE;
            }
          // fall through
          case 264: break;
          case 106:
            { return DETACH;
            }
          // fall through
          case 265: break;
          case 107:
            { return ESCAPE;
            }
          // fall through
          case 266: break;
          case 108:
            { return EXCEPT;
            }
          // fall through
          case 267: break;
          case 109:
            { return EXISTS;
            }
          // fall through
          case 268: break;
          case 110:
            { return HAVING;
            }
          // fall through
          case 269: break;
          case 111:
            { return IGNORE;
            }
          // fall through
          case 270: break;
          case 112:
            { return INSERT;
            }
          // fall through
          case 271: break;
          case 113:
            { return OFFSET;
            }
          // fall through
          case 272: break;
          case 114:
            { return PRAGMA;
            }
          // fall through
          case 273: break;
          case 115:
            { return REGEXP;
            }
          // fall through
          case 274: break;
          case 116:
            { return RENAME;
            }
          // fall through
          case 275: break;
          case 117:
            { return SELECT;
            }
          // fall through
          case 276: break;
          case 118:
            { return UNIQUE;
            }
          // fall through
          case 277: break;
          case 119:
            { return UPDATE;
            }
          // fall through
          case 278: break;
          case 120:
            { return VACUUM;
            }
          // fall through
          case 279: break;
          case 121:
            { return VALUES;
            }
          // fall through
          case 280: break;
          case 122:
            { return ANALYZE;
            }
          // fall through
          case 281: break;
          case 123:
            { return BETWEEN;
            }
          // fall through
          case 282: break;
          case 124:
            { return CASCADE;
            }
          // fall through
          case 283: break;
          case 125:
            { return COLLATE;
            }
          // fall through
          case 284: break;
          case 126:
            { return DEFAULT;
            }
          // fall through
          case 285: break;
          case 127:
            { return EXPLAIN;
            }
          // fall through
          case 286: break;
          case 128:
            { return FOREIGN;
            }
          // fall through
          case 287: break;
          case 129:
            { return INDEXED;
            }
          // fall through
          case 288: break;
          case 130:
            { return INSTEAD;
            }
          // fall through
          case 289: break;
          case 131:
            { return NATURAL;
            }
          // fall through
          case 290: break;
          case 132:
            { return PRIMARY;
            }
          // fall through
          case 291: break;
          case 133:
            { return REINDEX;
            }
          // fall through
          case 292: break;
          case 134:
            { return RELEASE;
            }
          // fall through
          case 293: break;
          case 135:
            { return REPLACE;
            }
          // fall through
          case 294: break;
          case 136:
            { return TRIGGER;
            }
          // fall through
          case 295: break;
          case 137:
            { return VIRTUAL;
            }
          // fall through
          case 296: break;
          case 138:
            { return WITHOUT;
            }
          // fall through
          case 297: break;
          case 139:
            { return CONFLICT;
            }
          // fall through
          case 298: break;
          case 140:
            { return DATABASE;
            }
          // fall through
          case 299: break;
          case 141:
            { return DEFERRED;
            }
          // fall through
          case 300: break;
          case 142:
            { return DISTINCT;
            }
          // fall through
          case 301: break;
          case 143:
            { return RESTRICT;
            }
          // fall through
          case 302: break;
          case 144:
            { return ROLLBACK;
            }
          // fall through
          case 303: break;
          case 145:
            { return EXCLUSIVE;
            }
          // fall through
          case 304: break;
          case 146:
            { return IMMEDIATE;
            }
          // fall through
          case 305: break;
          case 147:
            { return INITIALLY;
            }
          // fall through
          case 306: break;
          case 148:
            { return INTERSECT;
            }
          // fall through
          case 307: break;
          case 149:
            { return RECURSIVE;
            }
          // fall through
          case 308: break;
          case 150:
            { return SAVEPOINT;
            }
          // fall through
          case 309: break;
          case 151:
            { return TEMPORARY;
            }
          // fall through
          case 310: break;
          case 152:
            { return CONSTRAINT;
            }
          // fall through
          case 311: break;
          case 153:
            { return DEFERRABLE;
            }
          // fall through
          case 312: break;
          case 154:
            { return REFERENCES_WORD;
            }
          // fall through
          case 313: break;
          case 155:
            { return TRANSACTION;
            }
          // fall through
          case 314: break;
          case 156:
            { return CURRENT_DATE;
            }
          // fall through
          case 315: break;
          case 157:
            { return CURRENT_TIME;
            }
          // fall through
          case 316: break;
          case 158:
            { return AUTOINCREMENT;
            }
          // fall through
          case 317: break;
          case 159:
            { return CURRENT_TIMESTAMP;
            }
          // fall through
          case 318: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
