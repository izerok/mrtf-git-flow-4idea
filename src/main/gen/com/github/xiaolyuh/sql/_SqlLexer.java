// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _SqlLexer.flex

package com.github.xiaolyuh.sql;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.xiaolyuh.sql.psi.SqlTypes.*;


public class _SqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\12\23\1\0\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\0\1\63\1\0\1\64\1\63\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\42\1\43"+
    "\1\76\1\45\1\77\1\100\1\101\1\51\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\60\1\110\1\62\1\111"+
    "\1\112\1\113\1\114\6\0\1\3\32\0\1\1\u01df\0"+
    "\1\1\177\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\240\0\1\1\377\0\u0100\115";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\4\24\1\25"+
    "\35\24\1\26\1\27\1\30\1\31\1\32\1\0\1\33"+
    "\2\0\1\34\1\0\1\17\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\6\24\1\43\3\24\1\44\30\24\1\45"+
    "\2\24\1\46\1\47\1\46\6\24\1\50\2\24\1\51"+
    "\1\52\1\53\16\24\1\54\13\24\1\55\2\0\2\24"+
    "\1\56\1\24\1\57\2\24\1\60\1\61\30\24\1\62"+
    "\6\24\1\63\15\24\1\64\5\24\1\65\22\24\1\66"+
    "\2\24\1\67\20\24\1\70\1\0\13\24\1\71\1\72"+
    "\16\24\1\73\2\24\1\74\1\75\1\76\5\24\1\77"+
    "\2\24\1\100\1\101\12\24\1\102\1\103\1\104\1\105"+
    "\3\24\1\106\3\24\1\107\21\24\1\110\1\111\2\24"+
    "\1\112\7\24\1\113\1\24\1\114\1\24\1\115\1\116"+
    "\1\117\1\24\1\120\1\121\5\24\1\122\2\24\1\123"+
    "\6\24\1\124\15\24\1\125\1\24\1\126\3\24\1\127"+
    "\1\24\1\130\3\24\1\131\1\132\2\24\1\133\1\134"+
    "\2\24\1\135\1\136\11\24\1\137\2\24\1\140\3\24"+
    "\1\141\3\24\1\142\3\24\1\143\1\24\1\144\1\24"+
    "\1\145\2\24\1\146\3\24\1\147\1\150\2\24\1\151"+
    "\5\24\1\152\1\153\1\24\1\154\1\155\1\24\1\156"+
    "\2\24\1\157\1\160\3\24\1\161\3\24\1\162\1\163"+
    "\3\24\1\164\2\24\1\165\4\24\1\166\3\24\1\167"+
    "\1\24\1\170\1\171\1\172\2\24\1\173\2\24\1\174"+
    "\1\175\1\176\4\24\1\177\4\24\1\200\1\201\1\24"+
    "\1\202\1\24\1\203\1\24\1\204\1\205\2\24\1\206"+
    "\1\207\1\210\5\24\1\211\1\24\1\212\1\213\2\24"+
    "\1\214\2\24\1\215\1\24\1\216\1\217\6\24\1\220"+
    "\1\221\3\24\1\222\6\24\1\223\1\224\1\225\1\226"+
    "\1\227\1\24\1\230\1\231\3\24\1\232\2\24\1\233"+
    "\1\234\5\24\1\235\2\24\1\236\1\237\1\240\2\24"+
    "\1\241\3\24\1\242";

  private static int [] zzUnpackAction() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u0186\0\116"+
    "\0\116\0\u01d4\0\116\0\116\0\116\0\116\0\116\0\u0222"+
    "\0\116\0\u0270\0\u02be\0\116\0\u030c\0\u035a\0\u03a8\0\u03f6"+
    "\0\u0444\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666"+
    "\0\u06b4\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46"+
    "\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6"+
    "\0\u0e04\0\116\0\u0e52\0\116\0\116\0\116\0\u0138\0\116"+
    "\0\u0ea0\0\u01d4\0\u0eee\0\u0f3c\0\u0f8a\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\u1110"+
    "\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u0af8\0\u12e4\0\u1332"+
    "\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2"+
    "\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812"+
    "\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u0af8\0\u1a34"+
    "\0\u1a82\0\u1ad0\0\u0af8\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56"+
    "\0\u1ca4\0\u1cf2\0\u1d40\0\u1d8e\0\u1d40\0\u1ddc\0\u0af8\0\u1e2a"+
    "\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a"+
    "\0\u20e8\0\u2136\0\u2184\0\u21d2\0\u2220\0\u226e\0\u0af8\0\u22bc"+
    "\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de\0\u252c"+
    "\0\u257a\0\u25c8\0\116\0\u2616\0\u2664\0\u26b2\0\u2700\0\u0af8"+
    "\0\u274e\0\u0af8\0\u279c\0\u27ea\0\u0af8\0\u0af8\0\u2838\0\u2886"+
    "\0\u28d4\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6"+
    "\0\u2b44\0\u2b92\0\u2be0\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\u2d66"+
    "\0\u2db4\0\u2e02\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u0af8\0\u2f88"+
    "\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u31f8"+
    "\0\u3246\0\u3294\0\u32e2\0\u3330\0\u337e\0\u33cc\0\u341a\0\u3468"+
    "\0\u34b6\0\u3504\0\u3552\0\u0af8\0\u35a0\0\u35ee\0\u363c\0\u368a"+
    "\0\u36d8\0\u0af8\0\u3726\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac"+
    "\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0\0\u3d3e\0\u0af8"+
    "\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u3ec4\0\u3f12\0\u3f60\0\u3fae"+
    "\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e"+
    "\0\116\0\u426c\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440"+
    "\0\u448e\0\u44dc\0\u452a\0\u4578\0\u45c6\0\u0af8\0\u0af8\0\u4614"+
    "\0\u4662\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836\0\u4884"+
    "\0\u48d2\0\u4920\0\u496e\0\u49bc\0\u4a0a\0\u0af8\0\u4a58\0\u4aa6"+
    "\0\u0af8\0\u0af8\0\u0af8\0\u4af4\0\u4b42\0\u4b90\0\u4bde\0\u4c2c"+
    "\0\u0af8\0\u4c7a\0\u4cc8\0\u0af8\0\u0af8\0\u4d16\0\u4d64\0\u4db2"+
    "\0\u4e00\0\u4e4e\0\u4e9c\0\u4eea\0\u4f38\0\u4f86\0\u4fd4\0\u0af8"+
    "\0\u0af8\0\u0af8\0\u0af8\0\u5022\0\u5070\0\u50be\0\u0af8\0\u510c"+
    "\0\u515a\0\u51a8\0\u0af8\0\u51f6\0\u5244\0\u5292\0\u52e0\0\u532e"+
    "\0\u537c\0\u53ca\0\u5418\0\u5466\0\u54b4\0\u5502\0\u5550\0\u559e"+
    "\0\u55ec\0\u563a\0\u5688\0\u56d6\0\u5724\0\u0af8\0\u5772\0\u57c0"+
    "\0\u0af8\0\u580e\0\u585c\0\u58aa\0\u58f8\0\u5946\0\u5994\0\u59e2"+
    "\0\u0af8\0\u5a30\0\u0af8\0\u5a7e\0\u5acc\0\u2664\0\u0af8\0\u5b1a"+
    "\0\u0af8\0\u0af8\0\u5b68\0\u5bb6\0\u5c04\0\u5c52\0\u5ca0\0\u0af8"+
    "\0\u5cee\0\u5d3c\0\u0af8\0\u5d8a\0\u5dd8\0\u5e26\0\u5e74\0\u5ec2"+
    "\0\u5f10\0\u0af8\0\u5f5e\0\u5fac\0\u5ffa\0\u6048\0\u6096\0\u60e4"+
    "\0\u6132\0\u6180\0\u61ce\0\u621c\0\u626a\0\u62b8\0\u6306\0\u0af8"+
    "\0\u6354\0\u0af8\0\u63a2\0\u63f0\0\u643e\0\u648c\0\u64da\0\u0af8"+
    "\0\u6528\0\u6576\0\u65c4\0\u0af8\0\u0af8\0\u6612\0\u6660\0\u0af8"+
    "\0\u0af8\0\u66ae\0\u66fc\0\u0af8\0\u0af8\0\u674a\0\u6798\0\u67e6"+
    "\0\u6834\0\u6882\0\u68d0\0\u691e\0\u696c\0\u69ba\0\u0af8\0\u6a08"+
    "\0\u6a56\0\u0af8\0\u6aa4\0\u6af2\0\u6b40\0\u0af8\0\u6b8e\0\u6bdc"+
    "\0\u6c2a\0\u0af8\0\u6c78\0\u6cc6\0\u6d14\0\u0af8\0\u6d62\0\u0af8"+
    "\0\u6db0\0\u0af8\0\u6dfe\0\u6e4c\0\u0af8\0\u6e9a\0\u6ee8\0\u6f36"+
    "\0\u0af8\0\u0af8\0\u6f84\0\u6fd2\0\u0af8\0\u7020\0\u706e\0\u70bc"+
    "\0\u710a\0\u7158\0\u0af8\0\u0af8\0\u71a6\0\u0af8\0\u0af8\0\u71f4"+
    "\0\u0af8\0\u7242\0\u7290\0\u0af8\0\u0af8\0\u72de\0\u732c\0\u737a"+
    "\0\u0af8\0\u73c8\0\u7416\0\u7464\0\u0af8\0\u0af8\0\u74b2\0\u7500"+
    "\0\u754e\0\u0af8\0\u759c\0\u75ea\0\u0af8\0\u7638\0\u7686\0\u76d4"+
    "\0\u7722\0\u0af8\0\u7770\0\u77be\0\u780c\0\u0af8\0\u785a\0\u0af8"+
    "\0\u0af8\0\u0af8\0\u78a8\0\u78f6\0\u0af8\0\u7944\0\u7992\0\u0af8"+
    "\0\u0af8\0\u0af8\0\u79e0\0\u7a2e\0\u7a7c\0\u7aca\0\u0af8\0\u7b18"+
    "\0\u7b66\0\u7bb4\0\u7c02\0\u0af8\0\u0af8\0\u7c50\0\u0af8\0\u7c9e"+
    "\0\u0af8\0\u7cec\0\u0af8\0\u0af8\0\u7d3a\0\u7d88\0\u0af8\0\u0af8"+
    "\0\u0af8\0\u7dd6\0\u7e24\0\u7e72\0\u7ec0\0\u7f0e\0\u0af8\0\u7f5c"+
    "\0\u0af8\0\u0af8\0\u7faa\0\u7ff8\0\u0af8\0\u8046\0\u8094\0\u0af8"+
    "\0\u80e2\0\u0af8\0\u0af8\0\u8130\0\u817e\0\u81cc\0\u821a\0\u8268"+
    "\0\u82b6\0\u0af8\0\u0af8\0\u8304\0\u8352\0\u83a0\0\u0af8\0\u83ee"+
    "\0\u843c\0\u848a\0\u84d8\0\u8526\0\u8574\0\u0af8\0\u0af8\0\u0af8"+
    "\0\u0af8\0\u0af8\0\u85c2\0\u0af8\0\u0af8\0\u8610\0\u865e\0\u86ac"+
    "\0\u0af8\0\u86fa\0\u8748\0\u0af8\0\u0af8\0\u8796\0\u87e4\0\u8832"+
    "\0\u8880\0\u88ce\0\u0af8\0\u891c\0\u896a\0\u0af8\0\u89b8\0\u0af8"+
    "\0\u8a06\0\u8a54\0\u0af8\0\u8aa2\0\u8af0\0\u8b3e\0\u0af8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\5\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\35\1\36\1\57\1\65"+
    "\1\43\1\66\1\46\1\47\1\67\1\52\1\70\1\54"+
    "\1\71\1\56\1\57\1\72\1\73\1\74\1\75\1\2"+
    "\117\0\3\3\140\0\1\76\67\0\5\77\1\100\110\77"+
    "\111\0\1\101\4\0\12\102\1\100\103\102\20\0\1\103"+
    "\112\0\1\104\121\0\1\105\1\0\1\23\5\0\60\57"+
    "\32\0\1\106\1\107\1\110\114\0\1\111\115\0\1\112"+
    "\1\113\111\0\1\57\5\0\1\57\1\114\1\115\1\116"+
    "\1\57\1\117\5\57\1\120\1\57\1\121\4\57\1\122"+
    "\1\123\1\124\10\57\1\114\1\57\1\116\5\57\1\120"+
    "\1\121\3\57\1\122\1\123\1\124\3\57\30\0\1\57"+
    "\5\0\4\57\1\125\23\57\1\126\7\57\1\127\16\57"+
    "\1\126\30\0\1\57\5\0\1\130\6\57\1\131\6\57"+
    "\1\132\2\57\1\133\2\57\1\134\7\57\1\130\6\57"+
    "\1\131\2\57\1\135\1\136\1\57\1\133\2\57\1\134"+
    "\3\57\30\0\1\57\5\0\1\137\3\57\1\140\3\57"+
    "\1\141\10\57\1\142\12\57\1\137\3\57\1\143\3\57"+
    "\1\141\4\57\1\142\6\57\30\0\1\57\5\0\1\144"+
    "\12\57\1\145\1\57\1\146\4\57\1\147\4\57\1\150"+
    "\15\57\1\145\1\146\3\57\1\147\5\57\30\0\1\57"+
    "\5\0\1\151\15\57\1\152\2\57\1\153\12\57\1\151"+
    "\12\57\1\152\1\57\1\153\6\57\30\0\1\57\5\0"+
    "\13\57\1\154\5\57\1\155\23\57\1\154\3\57\1\155"+
    "\6\57\30\0\1\57\5\0\1\156\57\57\30\0\1\57"+
    "\5\0\5\57\1\157\1\160\5\57\1\161\1\162\4\57"+
    "\1\163\16\57\1\157\1\160\3\57\1\164\3\57\1\163"+
    "\5\57\30\0\1\57\5\0\16\57\1\165\30\57\1\165"+
    "\10\57\30\0\1\57\5\0\4\57\1\166\33\57\1\166"+
    "\17\57\30\0\1\57\5\0\4\57\1\167\3\57\1\170"+
    "\27\57\1\167\3\57\1\170\13\57\30\0\1\57\5\0"+
    "\1\171\33\57\1\171\23\57\30\0\1\57\5\0\1\172"+
    "\15\57\1\173\5\57\1\174\7\57\1\172\12\57\1\175"+
    "\4\57\1\174\3\57\30\0\1\57\5\0\5\57\1\176"+
    "\7\57\1\177\3\57\1\200\2\57\1\201\14\57\1\176"+
    "\4\57\1\177\2\57\1\200\2\57\1\201\3\57\30\0"+
    "\1\57\5\0\13\57\1\202\5\57\1\203\23\57\1\202"+
    "\3\57\1\203\6\57\30\0\1\57\5\0\24\57\1\204"+
    "\27\57\1\204\3\57\30\0\1\57\5\0\1\205\3\57"+
    "\1\206\11\57\1\207\15\57\1\205\3\57\1\210\6\57"+
    "\1\211\10\57\30\0\1\57\5\0\1\212\3\57\1\213"+
    "\27\57\1\212\3\57\1\213\17\57\30\0\1\57\5\0"+
    "\1\214\3\57\1\215\2\57\1\216\6\57\1\217\2\57"+
    "\1\220\12\57\1\214\3\57\1\215\2\57\1\216\3\57"+
    "\1\217\1\57\1\221\6\57\30\0\1\57\5\0\15\57"+
    "\1\222\1\57\1\223\2\57\1\224\23\57\1\222\1\57"+
    "\1\223\1\57\1\224\5\57\30\0\1\57\5\0\1\225"+
    "\7\57\1\226\23\57\1\225\7\57\1\227\13\57\30\0"+
    "\1\57\5\0\7\57\1\230\1\231\32\57\1\230\1\231"+
    "\13\57\30\0\1\57\5\0\60\57\30\0\1\57\5\0"+
    "\1\57\1\114\1\57\1\116\7\57\1\120\1\57\1\121"+
    "\4\57\1\122\1\123\1\124\10\57\1\114\1\57\1\116"+
    "\5\57\1\120\1\121\3\57\1\122\1\123\1\124\3\57"+
    "\30\0\1\57\5\0\4\57\1\127\23\57\1\126\7\57"+
    "\1\127\16\57\1\126\30\0\1\57\5\0\1\130\6\57"+
    "\1\131\6\57\1\232\2\57\1\133\2\57\1\134\7\57"+
    "\1\130\6\57\1\131\2\57\1\135\1\136\1\57\1\133"+
    "\2\57\1\134\3\57\30\0\1\57\5\0\1\137\3\57"+
    "\1\143\3\57\1\141\10\57\1\142\12\57\1\137\3\57"+
    "\1\143\3\57\1\141\4\57\1\142\6\57\30\0\1\57"+
    "\5\0\13\57\1\145\1\57\1\146\4\57\1\147\4\57"+
    "\1\150\15\57\1\145\1\146\3\57\1\147\5\57\30\0"+
    "\1\57\5\0\5\57\1\157\1\160\5\57\1\161\1\164"+
    "\4\57\1\163\16\57\1\157\1\160\3\57\1\164\3\57"+
    "\1\163\5\57\30\0\1\57\5\0\1\172\15\57\1\175"+
    "\5\57\1\174\7\57\1\172\12\57\1\175\4\57\1\174"+
    "\3\57\30\0\1\57\5\0\1\205\3\57\1\210\11\57"+
    "\1\211\15\57\1\205\3\57\1\210\6\57\1\211\10\57"+
    "\30\0\1\57\5\0\1\214\3\57\1\215\2\57\1\216"+
    "\6\57\1\217\2\57\1\221\12\57\1\214\3\57\1\215"+
    "\2\57\1\216\3\57\1\217\1\57\1\221\6\57\30\0"+
    "\1\57\5\0\1\225\7\57\1\227\23\57\1\225\7\57"+
    "\1\227\13\57\117\0\1\233\4\0\3\234\6\0\3\234"+
    "\2\0\1\234\1\0\1\234\1\0\1\234\2\0\1\234"+
    "\1\0\33\234\1\0\25\234\5\0\2\103\2\0\111\103"+
    "\16\0\1\235\123\0\1\105\115\0\1\57\5\0\16\57"+
    "\1\236\30\57\1\236\10\57\30\0\1\57\5\0\23\57"+
    "\1\237\34\57\30\0\1\57\5\0\3\57\1\240\33\57"+
    "\1\240\20\57\30\0\1\57\5\0\23\57\1\241\34\57"+
    "\30\0\1\57\5\0\13\57\1\242\7\57\1\243\21\57"+
    "\1\242\5\57\1\243\4\57\30\0\1\57\5\0\1\244"+
    "\2\57\1\245\30\57\1\244\2\57\1\245\20\57\30\0"+
    "\1\57\5\0\2\57\1\246\33\57\1\246\21\57\30\0"+
    "\1\57\5\0\23\57\1\247\27\57\1\247\4\57\30\0"+
    "\1\57\5\0\23\57\1\250\27\57\1\250\4\57\30\0"+
    "\1\57\5\0\5\57\1\251\1\252\14\57\1\253\16\57"+
    "\1\252\10\57\1\253\4\57\30\0\1\57\5\0\6\57"+
    "\1\252\14\57\1\253\16\57\1\252\10\57\1\253\4\57"+
    "\30\0\1\57\5\0\22\57\1\254\27\57\1\254\5\57"+
    "\30\0\1\57\5\0\4\57\1\255\33\57\1\255\17\57"+
    "\30\0\1\57\5\0\13\57\1\256\1\257\1\260\27\57"+
    "\1\256\1\261\11\57\30\0\1\57\5\0\4\57\1\262"+
    "\11\57\1\263\21\57\1\262\6\57\1\263\10\57\30\0"+
    "\1\57\5\0\21\57\1\264\27\57\1\264\6\57\30\0"+
    "\1\57\5\0\15\57\1\261\30\57\1\261\11\57\30\0"+
    "\1\57\5\0\13\57\1\256\1\257\30\57\1\256\12\57"+
    "\30\0\1\57\5\0\23\57\1\265\27\57\1\265\4\57"+
    "\30\0\1\57\5\0\5\57\1\266\5\57\1\267\6\57"+
    "\1\270\1\271\15\57\1\272\3\57\1\267\4\57\1\270"+
    "\5\57\30\0\1\57\5\0\22\57\1\273\27\57\1\273"+
    "\5\57\30\0\1\57\5\0\16\57\1\274\30\57\1\274"+
    "\10\57\30\0\1\57\5\0\5\57\1\272\5\57\1\267"+
    "\6\57\1\270\16\57\1\272\3\57\1\267\4\57\1\270"+
    "\5\57\30\0\1\57\5\0\2\57\1\275\55\57\30\0"+
    "\1\57\5\0\22\57\1\276\27\57\1\276\5\57\30\0"+
    "\1\57\5\0\3\57\1\277\33\57\1\277\20\57\30\0"+
    "\1\57\5\0\2\57\1\300\33\57\1\300\21\57\30\0"+
    "\1\57\5\0\2\57\1\301\5\57\1\302\6\57\1\303"+
    "\16\57\1\301\5\57\1\302\3\57\1\303\7\57\30\0"+
    "\1\57\5\0\10\57\1\304\2\57\1\305\30\57\1\304"+
    "\1\305\12\57\30\0\1\57\5\0\21\57\1\306\27\57"+
    "\1\306\6\57\30\0\1\57\5\0\16\57\1\307\30\57"+
    "\1\307\10\57\30\0\1\57\5\0\16\57\1\310\30\57"+
    "\1\310\10\57\30\0\1\57\5\0\16\57\1\311\30\57"+
    "\1\311\10\57\30\0\1\57\5\0\25\57\1\312\32\57"+
    "\30\0\1\57\5\0\15\57\1\313\30\57\1\313\11\57"+
    "\30\0\1\57\5\0\14\57\1\314\43\57\30\0\1\57"+
    "\5\0\3\57\1\315\4\57\1\316\4\57\1\317\4\57"+
    "\1\320\1\321\13\57\1\315\6\57\1\317\3\57\1\322"+
    "\1\321\4\57\30\0\1\57\5\0\3\57\1\315\11\57"+
    "\1\317\4\57\1\322\1\321\13\57\1\315\6\57\1\317"+
    "\3\57\1\322\1\321\4\57\30\0\1\57\5\0\10\57"+
    "\1\323\33\57\1\323\13\57\30\0\1\57\5\0\30\57"+
    "\1\324\26\57\1\324\30\0\1\57\5\0\5\57\1\325"+
    "\33\57\1\325\16\57\30\0\1\57\5\0\12\57\1\326"+
    "\1\57\1\327\43\57\30\0\1\57\5\0\23\57\1\330"+
    "\27\57\1\330\4\57\30\0\1\57\5\0\23\57\1\331"+
    "\27\57\1\331\4\57\30\0\1\57\5\0\23\57\1\332"+
    "\27\57\1\332\4\57\30\0\1\57\5\0\13\57\1\333"+
    "\31\57\1\333\12\57\30\0\1\57\5\0\5\57\1\334"+
    "\33\57\1\334\16\57\30\0\1\57\5\0\3\57\1\335"+
    "\33\57\1\335\20\57\30\0\1\57\5\0\23\57\1\336"+
    "\27\57\1\336\4\57\30\0\1\57\5\0\1\337\33\57"+
    "\1\337\23\57\30\0\1\57\5\0\1\340\7\57\1\341"+
    "\23\57\1\340\7\57\1\341\13\57\30\0\1\57\5\0"+
    "\4\57\1\342\33\57\1\342\17\57\30\0\1\57\5\0"+
    "\10\57\1\343\33\57\1\343\13\57\30\0\1\57\5\0"+
    "\2\57\1\344\2\57\1\345\1\346\1\57\1\347\2\57"+
    "\1\350\1\57\1\351\1\57\1\352\2\57\1\353\13\57"+
    "\1\344\2\57\1\345\1\346\1\57\1\347\1\350\1\351"+
    "\3\57\1\353\5\57\30\0\1\57\5\0\13\57\1\354"+
    "\12\57\1\355\16\57\1\354\12\57\30\0\1\57\5\0"+
    "\2\57\1\344\2\57\1\345\1\346\1\57\1\347\2\57"+
    "\1\350\1\57\1\351\4\57\1\353\13\57\1\344\2\57"+
    "\1\345\1\346\1\57\1\347\1\350\1\351\3\57\1\353"+
    "\5\57\30\0\1\57\5\0\13\57\1\354\31\57\1\354"+
    "\12\57\30\0\1\57\5\0\25\57\1\356\27\57\1\356"+
    "\2\57\30\0\1\57\5\0\13\57\1\357\7\57\1\360"+
    "\21\57\1\357\5\57\1\360\4\57\30\0\1\57\5\0"+
    "\1\57\1\361\33\57\1\361\22\57\30\0\1\57\5\0"+
    "\14\57\1\362\43\57\30\0\1\57\5\0\4\57\1\363"+
    "\33\57\1\363\17\57\30\0\1\57\5\0\1\364\7\57"+
    "\1\365\13\57\1\366\7\57\1\364\17\57\1\366\3\57"+
    "\30\0\1\57\5\0\1\364\23\57\1\366\7\57\1\364"+
    "\17\57\1\366\3\57\30\0\1\57\5\0\10\57\1\367"+
    "\11\57\1\370\21\57\1\367\5\57\1\370\5\57\30\0"+
    "\1\57\5\0\3\57\1\371\33\57\1\371\20\57\30\0"+
    "\1\57\5\0\10\57\1\372\33\57\1\372\13\57\30\0"+
    "\1\57\5\0\2\57\1\373\10\57\1\374\22\57\1\373"+
    "\6\57\1\374\12\57\30\0\1\57\5\0\4\57\1\375"+
    "\14\57\1\376\16\57\1\375\17\57\30\0\1\57\5\0"+
    "\4\57\1\375\33\57\1\375\17\57\30\0\1\57\5\0"+
    "\4\57\1\377\33\57\1\377\17\57\30\0\1\57\5\0"+
    "\23\57\1\u0100\27\57\1\u0100\4\57\30\0\1\57\5\0"+
    "\13\57\1\256\1\257\1\261\27\57\1\256\1\261\11\57"+
    "\6\0\3\234\6\0\3\234\2\0\1\234\1\0\1\234"+
    "\1\0\1\234\2\0\1\234\1\0\33\234\1\0\25\234"+
    "\2\0\1\u0101\2\0\3\235\1\0\11\235\1\u0102\77\235"+
    "\24\0\1\57\5\0\21\57\1\u0103\27\57\1\u0103\6\57"+
    "\30\0\1\57\5\0\10\57\1\u0104\47\57\30\0\1\57"+
    "\5\0\4\57\1\u0105\53\57\30\0\1\57\5\0\4\57"+
    "\1\u0106\33\57\1\u0106\17\57\30\0\1\57\5\0\13\57"+
    "\1\u0107\31\57\1\u0107\12\57\30\0\1\57\5\0\1\u0108"+
    "\33\57\1\u0108\23\57\30\0\1\57\5\0\16\57\1\u0109"+
    "\30\57\1\u0109\10\57\30\0\1\57\5\0\16\57\1\u010a"+
    "\41\57\30\0\1\57\5\0\10\57\1\u010b\33\57\1\u010b"+
    "\13\57\30\0\1\57\5\0\26\57\1\u010c\27\57\1\u010c"+
    "\1\57\30\0\1\57\5\0\2\57\1\u010d\1\57\1\u010e"+
    "\16\57\1\u010f\12\57\1\u010d\1\57\1\u010e\12\57\1\u010f"+
    "\4\57\30\0\1\57\5\0\2\57\1\u0110\33\57\1\u0110"+
    "\21\57\30\0\1\57\5\0\13\57\1\u0111\10\57\1\u0112"+
    "\20\57\1\u0111\6\57\1\u0112\3\57\30\0\1\57\5\0"+
    "\14\57\1\u0113\43\57\30\0\1\57\5\0\5\57\1\u0114"+
    "\14\57\1\u0115\27\57\1\u0115\5\57\30\0\1\57\5\0"+
    "\22\57\1\u0115\27\57\1\u0115\5\57\30\0\1\57\5\0"+
    "\1\u0116\33\57\1\u0116\23\57\30\0\1\57\5\0\22\57"+
    "\1\u0117\27\57\1\u0117\5\57\30\0\1\57\5\0\21\57"+
    "\1\u0118\27\57\1\u0118\6\57\30\0\1\57\5\0\1\u0119"+
    "\33\57\1\u0119\23\57\30\0\1\57\5\0\1\u011a\3\57"+
    "\1\u011b\27\57\1\u011a\3\57\1\u011c\17\57\30\0\1\57"+
    "\5\0\4\57\1\u011d\33\57\1\u011d\17\57\30\0\1\57"+
    "\5\0\2\57\1\u011e\33\57\1\u011e\21\57\30\0\1\57"+
    "\5\0\1\u011f\57\57\30\0\1\57\5\0\1\u011a\3\57"+
    "\1\u011c\27\57\1\u011a\3\57\1\u011c\17\57\30\0\1\57"+
    "\5\0\23\57\1\u0120\27\57\1\u0120\4\57\30\0\1\57"+
    "\5\0\17\57\1\u0121\30\57\1\u0121\7\57\30\0\1\57"+
    "\5\0\7\57\1\u0122\50\57\30\0\1\57\5\0\4\57"+
    "\1\u0123\33\57\1\u0123\17\57\30\0\1\57\5\0\1\u0124"+
    "\33\57\1\u0124\23\57\30\0\1\57\5\0\4\57\1\u0125"+
    "\6\57\1\u0126\24\57\1\u0125\4\57\1\u0126\12\57\30\0"+
    "\1\57\5\0\22\57\1\u0127\27\57\1\u0127\5\57\30\0"+
    "\1\57\5\0\13\57\1\u0128\31\57\1\u0128\12\57\30\0"+
    "\1\57\5\0\13\57\1\u0129\31\57\1\u0129\12\57\30\0"+
    "\1\57\5\0\22\57\1\u012a\27\57\1\u012a\5\57\30\0"+
    "\1\57\5\0\4\57\1\u012b\33\57\1\u012b\17\57\30\0"+
    "\1\57\5\0\14\57\1\u012c\43\57\30\0\1\57\5\0"+
    "\1\57\1\u012d\33\57\1\u012d\22\57\30\0\1\57\5\0"+
    "\24\57\1\u012e\27\57\1\u012e\3\57\30\0\1\57\5\0"+
    "\10\57\1\u012f\47\57\30\0\1\57\5\0\16\57\1\u0130"+
    "\30\57\1\u0130\10\57\30\0\1\57\5\0\4\57\1\u0131"+
    "\33\57\1\u0131\17\57\30\0\1\57\5\0\4\57\1\u0132"+
    "\33\57\1\u0132\17\57\30\0\1\57\5\0\23\57\1\u0133"+
    "\34\57\30\0\1\57\5\0\4\57\1\u0134\33\57\1\u0134"+
    "\17\57\30\0\1\57\5\0\4\57\1\u0135\16\57\1\u0136"+
    "\14\57\1\u0135\17\57\30\0\1\57\5\0\4\57\1\u0137"+
    "\11\57\1\u0138\21\57\1\u0137\6\57\1\u0138\10\57\30\0"+
    "\1\57\5\0\4\57\1\u0135\33\57\1\u0135\17\57\30\0"+
    "\1\57\5\0\15\57\1\u0139\30\57\1\u0139\11\57\30\0"+
    "\1\57\5\0\23\57\1\u013a\27\57\1\u013a\4\57\30\0"+
    "\1\57\5\0\4\57\1\u013b\33\57\1\u013b\17\57\30\0"+
    "\1\57\5\0\10\57\1\u013c\33\57\1\u013c\13\57\30\0"+
    "\1\57\5\0\2\57\1\u013d\33\57\1\u013d\21\57\30\0"+
    "\1\57\5\0\24\57\1\u013e\27\57\1\u013e\3\57\30\0"+
    "\1\57\5\0\13\57\1\u013f\31\57\1\u013f\12\57\30\0"+
    "\1\57\5\0\22\57\1\u0140\27\57\1\u0140\5\57\30\0"+
    "\1\57\5\0\4\57\1\u0141\33\57\1\u0141\17\57\30\0"+
    "\1\57\5\0\4\57\1\u0142\33\57\1\u0142\17\57\30\0"+
    "\1\57\5\0\15\57\1\u0143\30\57\1\u0143\11\57\30\0"+
    "\1\57\5\0\6\57\1\u0144\33\57\1\u0144\15\57\30\0"+
    "\1\57\5\0\14\57\1\u0145\43\57\30\0\1\57\5\0"+
    "\21\57\1\u0146\27\57\1\u0146\6\57\30\0\1\57\5\0"+
    "\22\57\1\u0147\27\57\1\u0147\5\57\30\0\1\57\5\0"+
    "\24\57\1\u0148\27\57\1\u0148\3\57\30\0\1\57\5\0"+
    "\4\57\1\u0149\33\57\1\u0149\17\57\30\0\1\57\5\0"+
    "\4\57\1\u014a\33\57\1\u014a\17\57\30\0\1\57\5\0"+
    "\15\57\1\u014b\30\57\1\u014b\11\57\30\0\1\57\5\0"+
    "\4\57\1\u014c\33\57\1\u014c\17\57\30\0\1\57\5\0"+
    "\1\u014d\33\57\1\u014d\23\57\30\0\1\57\5\0\13\57"+
    "\1\u014e\44\57\30\0\1\57\5\0\23\57\1\u014f\27\57"+
    "\1\u014f\4\57\30\0\1\57\5\0\13\57\1\u0150\31\57"+
    "\1\u0150\12\57\30\0\1\57\5\0\10\57\1\u0151\47\57"+
    "\30\0\1\57\5\0\4\57\1\u0152\33\57\1\u0152\17\57"+
    "\30\0\1\57\5\0\4\57\1\u0153\33\57\1\u0153\17\57"+
    "\30\0\1\57\5\0\13\57\1\u0154\31\57\1\u0154\12\57"+
    "\30\0\1\57\5\0\17\57\1\u0155\30\57\1\u0155\7\57"+
    "\30\0\1\57\5\0\15\57\1\u0156\30\57\1\u0156\11\57"+
    "\30\0\1\57\5\0\15\57\1\u0157\30\57\1\u0157\11\57"+
    "\30\0\1\57\5\0\6\57\1\u0158\51\57\30\0\1\57"+
    "\5\0\4\57\1\u0159\33\57\1\u0159\17\57\30\0\1\57"+
    "\5\0\16\57\1\u015a\1\57\1\u015b\26\57\1\u015a\10\57"+
    "\30\0\1\57\5\0\10\57\1\u015c\33\57\1\u015c\13\57"+
    "\30\0\1\57\5\0\1\u015d\33\57\1\u015d\23\57\30\0"+
    "\1\57\5\0\15\57\1\u015e\30\57\1\u015e\11\57\30\0"+
    "\1\57\5\0\24\57\1\u015f\27\57\1\u015f\3\57\30\0"+
    "\1\57\5\0\24\57\1\u0160\27\57\1\u0160\3\57\30\0"+
    "\1\57\5\0\26\57\1\u0161\27\57\1\u0161\1\57\30\0"+
    "\1\57\5\0\23\57\1\u0162\34\57\30\0\1\57\5\0"+
    "\15\57\1\u0163\3\57\1\u0164\24\57\1\u0163\2\57\1\u0164"+
    "\6\57\30\0\1\57\5\0\7\57\1\u0165\33\57\1\u0165"+
    "\14\57\5\0\3\235\1\0\11\235\1\u0102\4\235\1\u0166"+
    "\72\235\24\0\1\57\5\0\23\57\1\u0167\27\57\1\u0167"+
    "\4\57\30\0\1\57\5\0\16\57\1\u0168\41\57\30\0"+
    "\1\57\5\0\21\57\1\u0169\36\57\30\0\1\57\5\0"+
    "\21\57\1\u016a\27\57\1\u016a\6\57\30\0\1\57\5\0"+
    "\30\57\1\u016b\26\57\1\u016b\30\0\1\57\5\0\2\57"+
    "\1\u016c\33\57\1\u016c\21\57\30\0\1\57\5\0\10\57"+
    "\1\u016d\22\57\1\u016e\10\57\1\u016d\13\57\30\0\1\57"+
    "\5\0\21\57\1\u016f\36\57\30\0\1\57\5\0\15\57"+
    "\1\u0170\30\57\1\u0170\11\57\30\0\1\57\5\0\4\57"+
    "\1\u0171\33\57\1\u0171\17\57\30\0\1\57\5\0\1\u0172"+
    "\33\57\1\u0172\23\57\30\0\1\57\5\0\12\57\1\u0173"+
    "\45\57\30\0\1\57\5\0\1\u0174\33\57\1\u0174\23\57"+
    "\30\0\1\57\5\0\14\57\1\u0175\43\57\30\0\1\57"+
    "\5\0\10\57\1\u0176\33\57\1\u0176\13\57\30\0\1\57"+
    "\5\0\13\57\1\u0177\44\57\30\0\1\57\5\0\23\57"+
    "\1\u0178\27\57\1\u0178\4\57\30\0\1\57\5\0\23\57"+
    "\1\u0179\27\57\1\u0179\4\57\30\0\1\57\5\0\22\57"+
    "\1\u017a\27\57\1\u017a\5\57\30\0\1\57\5\0\4\57"+
    "\1\u017b\33\57\1\u017b\17\57\30\0\1\57\5\0\1\57"+
    "\1\u017c\33\57\1\u017c\22\57\30\0\1\57\5\0\24\57"+
    "\1\u017d\27\57\1\u017d\3\57\30\0\1\57\5\0\21\57"+
    "\1\u017e\27\57\1\u017f\6\57\30\0\1\57\5\0\21\57"+
    "\1\u017f\27\57\1\u017f\6\57\30\0\1\57\5\0\23\57"+
    "\1\u0180\27\57\1\u0180\4\57\30\0\1\57\5\0\2\57"+
    "\1\u0181\55\57\30\0\1\57\5\0\10\57\1\u0182\33\57"+
    "\1\u0182\13\57\30\0\1\57\5\0\17\57\1\u0183\30\57"+
    "\1\u0183\7\57\30\0\1\57\5\0\17\57\1\u0184\30\57"+
    "\1\u0184\7\57\30\0\1\57\5\0\24\57\1\u0185\27\57"+
    "\1\u0185\3\57\30\0\1\57\5\0\23\57\1\u0186\27\57"+
    "\1\u0186\4\57\30\0\1\57\5\0\1\u0187\33\57\1\u0187"+
    "\23\57\30\0\1\57\5\0\4\57\1\u0188\33\57\1\u0188"+
    "\17\57\30\0\1\57\5\0\10\57\1\u0189\33\57\1\u0189"+
    "\13\57\30\0\1\57\5\0\17\57\1\u018a\30\57\1\u018a"+
    "\7\57\30\0\1\57\5\0\15\57\1\u018b\42\57\30\0"+
    "\1\57\5\0\21\57\1\u018c\27\57\1\u018c\6\57\30\0"+
    "\1\57\5\0\3\57\1\u018d\33\57\1\u018d\20\57\30\0"+
    "\1\57\5\0\27\57\1\u018e\30\57\30\0\1\57\5\0"+
    "\10\57\1\u018f\47\57\30\0\1\57\5\0\21\57\1\u0190"+
    "\27\57\1\u0190\6\57\30\0\1\57\5\0\21\57\1\u0191"+
    "\27\57\1\u0191\6\57\30\0\1\57\5\0\4\57\1\u0192"+
    "\53\57\30\0\1\57\5\0\21\57\1\u0193\27\57\1\u0193"+
    "\6\57\30\0\1\57\5\0\23\57\1\u0194\27\57\1\u0194"+
    "\4\57\30\0\1\57\5\0\7\57\1\u0195\33\57\1\u0195"+
    "\14\57\30\0\1\57\5\0\21\57\1\u0196\27\57\1\u0196"+
    "\6\57\30\0\1\57\5\0\4\57\1\u0197\33\57\1\u0197"+
    "\17\57\30\0\1\57\5\0\21\57\1\u0198\27\57\1\u0198"+
    "\6\57\30\0\1\57\5\0\21\57\1\u0199\27\57\1\u0199"+
    "\6\57\30\0\1\57\5\0\14\57\1\u019a\43\57\30\0"+
    "\1\57\5\0\1\u019b\33\57\1\u019b\23\57\30\0\1\57"+
    "\5\0\30\57\1\u019c\26\57\1\u019c\30\0\1\57\5\0"+
    "\4\57\1\u019d\33\57\1\u019d\17\57\30\0\1\57\5\0"+
    "\21\57\1\u019e\27\57\1\u019e\6\57\30\0\1\57\5\0"+
    "\21\57\1\u019f\27\57\1\u019f\6\57\30\0\1\57\5\0"+
    "\27\57\1\u01a0\30\57\30\0\1\57\5\0\3\57\1\u01a1"+
    "\33\57\1\u01a1\20\57\30\0\1\57\5\0\1\u01a2\33\57"+
    "\1\u01a2\23\57\30\0\1\57\5\0\14\57\1\u01a3\43\57"+
    "\30\0\1\57\5\0\1\u01a4\57\57\30\0\1\57\5\0"+
    "\21\57\1\u01a5\27\57\1\u01a5\6\57\30\0\1\57\5\0"+
    "\1\57\1\u01a6\33\57\1\u01a6\22\57\30\0\1\57\5\0"+
    "\3\57\1\u01a7\54\57\30\0\1\57\5\0\17\57\1\u01a8"+
    "\30\57\1\u01a8\7\57\30\0\1\57\5\0\2\57\1\u01a9"+
    "\33\57\1\u01a9\21\57\30\0\1\57\5\0\4\57\1\u01aa"+
    "\33\57\1\u01aa\17\57\30\0\1\57\5\0\16\57\1\u01ab"+
    "\30\57\1\u01ab\10\57\30\0\1\57\5\0\22\57\1\u01ac"+
    "\27\57\1\u01ac\5\57\30\0\1\57\5\0\6\57\1\u01ad"+
    "\51\57\30\0\1\57\5\0\15\57\1\u01ae\30\57\1\u01ae"+
    "\11\57\30\0\1\57\5\0\24\57\1\u01af\27\57\1\u01af"+
    "\3\57\30\0\1\57\5\0\6\57\1\u01b0\33\57\1\u01b0"+
    "\15\57\30\0\1\57\5\0\23\57\1\u01b1\27\57\1\u01b1"+
    "\4\57\30\0\1\57\5\0\6\57\1\u01b2\33\57\1\u01b2"+
    "\15\57\30\0\1\57\5\0\24\57\1\u01b3\27\57\1\u01b3"+
    "\3\57\30\0\1\57\5\0\4\57\1\u01b4\33\57\1\u01b4"+
    "\17\57\30\0\1\57\5\0\24\57\1\u01b5\33\57\30\0"+
    "\1\57\5\0\4\57\1\u01b6\33\57\1\u01b6\17\57\30\0"+
    "\1\57\5\0\16\57\1\u01b7\30\57\1\u01b7\10\57\30\0"+
    "\1\57\5\0\15\57\1\u01b8\42\57\30\0\1\57\5\0"+
    "\31\57\1\u01b9\26\57\30\0\1\57\5\0\7\57\1\u01ba"+
    "\33\57\1\u01ba\14\57\30\0\1\57\5\0\15\57\1\u01bb"+
    "\30\57\1\u01bb\11\57\30\0\1\57\5\0\10\57\1\u01bc"+
    "\33\57\1\u01bc\13\57\30\0\1\57\5\0\4\57\1\u01bd"+
    "\53\57\30\0\1\57\5\0\4\57\1\u01be\33\57\1\u01be"+
    "\17\57\30\0\1\57\5\0\3\57\1\u01bf\33\57\1\u01bf"+
    "\20\57\30\0\1\57\5\0\23\57\1\u01c0\27\57\1\u01c0"+
    "\4\57\30\0\1\57\5\0\15\57\1\u01c1\30\57\1\u01c1"+
    "\11\57\30\0\1\57\5\0\23\57\1\u01c2\27\57\1\u01c2"+
    "\4\57\30\0\1\57\5\0\10\57\1\u01c3\47\57\30\0"+
    "\1\57\5\0\21\57\1\u01c4\27\57\1\u01c4\6\57\30\0"+
    "\1\57\5\0\4\57\1\u01c5\33\57\1\u01c5\17\57\30\0"+
    "\1\57\5\0\15\57\1\u01c6\30\57\1\u01c6\11\57\30\0"+
    "\1\57\5\0\1\u01c7\33\57\1\u01c7\23\57\30\0\1\57"+
    "\5\0\13\57\1\u01c8\31\57\1\u01c8\12\57\30\0\1\57"+
    "\5\0\21\57\1\u01c9\27\57\1\u01ca\6\57\30\0\1\57"+
    "\5\0\21\57\1\u01ca\27\57\1\u01ca\6\57\30\0\1\57"+
    "\5\0\4\57\1\u01cb\33\57\1\u01cb\17\57\30\0\1\57"+
    "\5\0\7\57\1\u01cc\50\57\30\0\1\57\5\0\15\57"+
    "\1\u01cd\30\57\1\u01cd\11\57\30\0\1\57\5\0\4\57"+
    "\1\u01ce\33\57\1\u01ce\17\57\30\0\1\57\5\0\23\57"+
    "\1\u01cf\27\57\1\u01cf\4\57\30\0\1\57\5\0\22\57"+
    "\1\u01d0\27\57\1\u01d0\5\57\30\0\1\57\5\0\22\57"+
    "\1\u01d1\27\57\1\u01d1\5\57\30\0\1\57\5\0\10\57"+
    "\1\u01d2\33\57\1\u01d2\13\57\30\0\1\57\5\0\6\57"+
    "\1\u01d3\33\57\1\u01d3\15\57\30\0\1\57\5\0\6\57"+
    "\1\u01d4\51\57\30\0\1\57\5\0\4\57\1\u01d5\33\57"+
    "\1\u01d5\17\57\30\0\1\57\5\0\10\57\1\u01d6\33\57"+
    "\1\u01d6\13\57\30\0\1\57\5\0\4\57\1\u01d7\33\57"+
    "\1\u01d7\17\57\30\0\1\57\5\0\1\u01d8\57\57\30\0"+
    "\1\57\5\0\23\57\1\u01d9\27\57\1\u01d9\4\57\30\0"+
    "\1\57\5\0\1\u01da\57\57\30\0\1\57\5\0\22\57"+
    "\1\u01db\27\57\1\u01db\5\57\30\0\1\57\5\0\1\u01dc"+
    "\33\57\1\u01dc\23\57\30\0\1\57\5\0\23\57\1\u01dd"+
    "\27\57\1\u01dd\4\57\30\0\1\57\5\0\1\u01de\33\57"+
    "\1\u01de\23\57\30\0\1\57\5\0\21\57\1\u01df\27\57"+
    "\1\u01df\6\57\30\0\1\57\5\0\22\57\1\u01e0\27\57"+
    "\1\u01e0\5\57\30\0\1\57\5\0\4\57\1\u01e1\33\57"+
    "\1\u01e1\17\57\30\0\1\57\5\0\17\57\1\u01e2\30\57"+
    "\1\u01e2\7\57\30\0\1\57\5\0\4\57\1\u01e3\33\57"+
    "\1\u01e3\17\57\30\0\1\57\5\0\22\57\1\u01e4\27\57"+
    "\1\u01e4\5\57\30\0\1\57\5\0\4\57\1\u01e5\33\57"+
    "\1\u01e5\17\57\30\0\1\57\5\0\2\57\1\u01e6\55\57"+
    "\30\0\1\57\5\0\10\57\1\u01e7\33\57\1\u01e7\13\57"+
    "\30\0\1\57\5\0\1\u01e8\33\57\1\u01e8\23\57\30\0"+
    "\1\57\5\0\16\57\1\u01e9\30\57\1\u01e9\10\57\30\0"+
    "\1\57\5\0\23\57\1\u01ea\27\57\1\u01ea\4\57\30\0"+
    "\1\57\5\0\21\57\1\u01eb\27\57\1\u01eb\6\57\30\0"+
    "\1\57\5\0\1\u01ec\33\57\1\u01ec\23\57\30\0\1\57"+
    "\5\0\4\57\1\u01ed\53\57\30\0\1\57\5\0\4\57"+
    "\1\u01ee\33\57\1\u01ee\17\57\30\0\1\57\5\0\15\57"+
    "\1\u01ef\30\57\1\u01ef\11\57\30\0\1\57\5\0\4\57"+
    "\1\u01f0\33\57\1\u01f0\17\57\30\0\1\57\5\0\14\57"+
    "\1\u01f1\43\57\30\0\1\57\5\0\22\57\1\u01f2\27\57"+
    "\1\u01f2\5\57\30\0\1\57\5\0\1\u01f3\57\57\30\0"+
    "\1\57\5\0\24\57\1\u01f4\27\57\1\u01f4\3\57\30\0"+
    "\1\57\5\0\4\57\1\u01f5\33\57\1\u01f5\17\57\30\0"+
    "\1\57\5\0\2\57\1\u01f6\33\57\1\u01f6\21\57\30\0"+
    "\1\57\5\0\15\57\1\u01f7\30\57\1\u01f7\11\57\30\0"+
    "\1\57\5\0\15\57\1\u01f8\30\57\1\u01f8\11\57\30\0"+
    "\1\57\5\0\4\57\1\u01f9\33\57\1\u01f9\17\57\30\0"+
    "\1\57\5\0\4\57\1\u01fa\33\57\1\u01fa\17\57\30\0"+
    "\1\57\5\0\2\57\1\u01fb\55\57\30\0\1\57\5\0"+
    "\1\u01fc\33\57\1\u01fc\23\57\30\0\1\57\5\0\23\57"+
    "\1\u01fd\27\57\1\u01fd\4\57\30\0\1\57\5\0\22\57"+
    "\1\u01fe\27\57\1\u01fe\5\57\30\0\1\57\5\0\23\57"+
    "\1\u01ff\27\57\1\u01ff\4\57\30\0\1\57\5\0\1\u0200"+
    "\3\57\1\u0201\33\57\1\u0201\17\57\30\0\1\57\5\0"+
    "\4\57\1\u0201\33\57\1\u0201\17\57\30\0\1\57\5\0"+
    "\2\57\1\u0202\33\57\1\u0202\21\57\30\0\1\57\5\0"+
    "\10\57\1\u0203\33\57\1\u0203\13\57\30\0\1\57\5\0"+
    "\15\57\1\u0204\30\57\1\u0204\11\57\30\0\1\57\5\0"+
    "\15\57\1\u0205\30\57\1\u0205\11\57\30\0\1\57\5\0"+
    "\1\u0206\33\57\1\u0206\23\57\30\0\1\57\5\0\3\57"+
    "\1\u0207\33\57\1\u0207\20\57\30\0\1\57\5\0\13\57"+
    "\1\u0208\44\57\30\0\1\57\5\0\3\57\1\u0209\54\57"+
    "\30\0\1\57\5\0\4\57\1\u020a\33\57\1\u020a\17\57"+
    "\30\0\1\57\5\0\13\57\1\u020b\31\57\1\u020b\12\57"+
    "\30\0\1\57\5\0\30\57\1\u020c\26\57\1\u020c\30\0"+
    "\1\57\5\0\10\57\1\u020d\33\57\1\u020d\13\57\30\0"+
    "\1\57\5\0\15\57\1\u020e\30\57\1\u020e\11\57\30\0"+
    "\1\57\5\0\27\57\1\u020f\30\57\30\0\1\57\5\0"+
    "\4\57\1\u0210\33\57\1\u0210\17\57\30\0\1\57\5\0"+
    "\4\57\1\u0211\53\57\30\0\1\57\5\0\2\57\1\u0212"+
    "\33\57\1\u0212\21\57\30\0\1\57\5\0\2\57\1\u0213"+
    "\33\57\1\u0213\21\57\30\0\1\57\5\0\10\57\1\u0214"+
    "\33\57\1\u0214\13\57\30\0\1\57\5\0\1\u0215\33\57"+
    "\1\u0215\23\57\30\0\1\57\5\0\2\57\1\u0216\33\57"+
    "\1\u0216\21\57\30\0\1\57\5\0\21\57\1\u0217\36\57"+
    "\30\0\1\57\5\0\4\57\1\u0218\33\57\1\u0218\17\57"+
    "\30\0\1\57\5\0\13\57\1\u0219\44\57\30\0\1\57"+
    "\5\0\23\57\1\u021a\27\57\1\u021a\4\57\30\0\1\57"+
    "\5\0\21\57\1\u021b\27\57\1\u021b\6\57\30\0\1\57"+
    "\5\0\2\57\1\u021c\33\57\1\u021c\21\57\30\0\1\57"+
    "\5\0\23\57\1\u021d\34\57\30\0\1\57\5\0\10\57"+
    "\1\u021e\33\57\1\u021e\13\57\30\0\1\57\5\0\33\57"+
    "\1\u021f\24\57\30\0\1\57\5\0\4\57\1\u0220\33\57"+
    "\1\u0220\17\57\30\0\1\57\5\0\1\57\1\u0221\56\57"+
    "\30\0\1\57\5\0\3\57\1\u0222\33\57\1\u0222\20\57"+
    "\30\0\1\57\5\0\23\57\1\u0223\27\57\1\u0223\4\57"+
    "\30\0\1\57\5\0\25\57\1\u0224\27\57\1\u0224\2\57"+
    "\30\0\1\57\5\0\23\57\1\u0225\27\57\1\u0225\4\57"+
    "\30\0\1\57\5\0\13\57\1\u0226\44\57\30\0\1\57"+
    "\5\0\2\57\1\u0227\33\57\1\u0227\21\57\30\0\1\57"+
    "\5\0\25\57\1\u0228\27\57\1\u0228\2\57\30\0\1\57"+
    "\5\0\2\57\1\u0229\33\57\1\u0229\21\57\30\0\1\57"+
    "\5\0\23\57\1\u022a\27\57\1\u022a\4\57\30\0\1\57"+
    "\5\0\12\57\1\u022b\45\57\30\0\1\57\5\0\15\57"+
    "\1\u022c\30\57\1\u022c\11\57\30\0\1\57\5\0\21\57"+
    "\1\u022d\27\57\1\u022d\6\57\30\0\1\57\5\0\23\57"+
    "\1\u022e\27\57\1\u022e\4\57\30\0\1\57\5\0\3\57"+
    "\1\u022f\33\57\1\u022f\20\57\30\0\1\57\5\0\4\57"+
    "\1\u0230\33\57\1\u0230\17\57\30\0\1\57\5\0\21\57"+
    "\1\u0231\27\57\1\u0231\6\57\30\0\1\57\5\0\15\57"+
    "\1\u0232\30\57\1\u0232\11\57\30\0\1\57\5\0\3\57"+
    "\1\u0233\17\57\1\u0234\13\57\1\u0233\13\57\1\u0234\4\57"+
    "\30\0\1\57\5\0\13\57\1\u0235\44\57\30\0\1\57"+
    "\5\0\4\57\1\u0236\33\57\1\u0236\17\57\30\0\1\57"+
    "\5\0\4\57\1\u0237\33\57\1\u0237\17\57\30\0\1\57"+
    "\5\0\30\57\1\u0238\27\57\30\0\1\57\5\0\23\57"+
    "\1\u0239\27\57\1\u0239\4\57\30\0\1\57\5\0\4\57"+
    "\1\u023a\33\57\1\u023a\17\57\30\0\1\57\5\0\4\57"+
    "\1\u023b\33\57\1\u023b\17\57\30\0\1\57\5\0\23\57"+
    "\1\u023c\27\57\1\u023c\4\57\30\0\1\57\5\0\30\57"+
    "\1\u023d\26\57\1\u023d\30\0\1\57\5\0\10\57\1\u023e"+
    "\33\57\1\u023e\13\57\30\0\1\57\5\0\14\57\1\u023f"+
    "\43\57\30\0\1\57\5\0\4\57\1\u0240\33\57\1\u0240"+
    "\17\57\30\0\1\57\5\0\23\57\1\u0241\27\57\1\u0241"+
    "\4\57\30\0\1\57\5\0\1\u0242\33\57\1\u0242\23\57"+
    "\30\0\1\57\5\0\10\57\1\u0243\33\57\1\u0243\13\57"+
    "\30\0\1\57\5\0\4\57\1\u0244\53\57\30\0\1\57"+
    "\5\0\22\57\1\u0245\27\57\1\u0245\5\57\30\0\1\57"+
    "\5\0\16\57\1\u0246\30\57\1\u0246\10\57\30\0\1\57"+
    "\5\0\4\57\1\u0247\33\57\1\u0247\17\57\30\0\1\57"+
    "\5\0\14\57\1\u0248\43\57\30\0\1\57\5\0\23\57"+
    "\1\u0249\27\57\1\u0249\4\57\30\0\1\57\5\0\14\57"+
    "\1\u024a\43\57\30\0\1\57\5\0\15\57\1\u024b\30\57"+
    "\1\u024b\11\57\30\0\1\57\5\0\15\57\1\u024c\30\57"+
    "\1\u024c\11\57\30\0\1\57\5\0\4\57\1\u024d\33\57"+
    "\1\u024d\17\57\30\0\1\57\5\0\4\57\1\u024e\33\57"+
    "\1\u024e\17\57\30\0\1\57\5\0\4\57\1\u024f\33\57"+
    "\1\u024f\17\57\30\0\1\57\5\0\23\57\1\u0250\27\57"+
    "\1\u0250\4\57\30\0\1\57\5\0\15\57\1\u0251\30\57"+
    "\1\u0251\11\57\30\0\1\57\5\0\22\57\1\u0252\27\57"+
    "\1\u0252\5\57\30\0\1\57\5\0\23\57\1\u0253\27\57"+
    "\1\u0253\4\57\30\0\1\57\5\0\23\57\1\u0254\27\57"+
    "\1\u0254\4\57\30\0\1\57\5\0\1\u0255\33\57\1\u0255"+
    "\23\57\30\0\1\57\5\0\14\57\1\u0256\43\57\30\0"+
    "\1\57\5\0\17\57\1\u0257\30\57\1\u0257\7\57\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[35724];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\2\11\1\1\5\11\1\1\1\11"+
    "\2\1\1\11\45\1\1\11\1\1\3\11\1\0\1\11"+
    "\2\0\1\1\1\0\1\1\6\11\117\1\1\11\2\0"+
    "\143\1\1\11\1\0\u0155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[599];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _SqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 163: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 164: break;
          case 3:
            { return SHARP;
            }
          // fall through
          case 165: break;
          case 4:
            { return DOLLAR;
            }
          // fall through
          case 166: break;
          case 5:
            { return MOD;
            }
          // fall through
          case 167: break;
          case 6:
            { return BITWISE_AND;
            }
          // fall through
          case 168: break;
          case 7:
            { return LP;
            }
          // fall through
          case 169: break;
          case 8:
            { return RP;
            }
          // fall through
          case 170: break;
          case 9:
            { return MULTIPLY;
            }
          // fall through
          case 171: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 172: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 173: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 174: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 175: break;
          case 14:
            { return DIVIDE;
            }
          // fall through
          case 176: break;
          case 15:
            { return DIGIT;
            }
          // fall through
          case 177: break;
          case 16:
            { return SEMI;
            }
          // fall through
          case 178: break;
          case 17:
            { return LT;
            }
          // fall through
          case 179: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 180: break;
          case 19:
            { return GT;
            }
          // fall through
          case 181: break;
          case 20:
            { return ID;
            }
          // fall through
          case 182: break;
          case 21:
            { return E;
            }
          // fall through
          case 183: break;
          case 22:
            { return LB;
            }
          // fall through
          case 184: break;
          case 23:
            { return BITWISE_OR;
            }
          // fall through
          case 185: break;
          case 24:
            { return RB;
            }
          // fall through
          case 186: break;
          case 25:
            { return BITWISE_NOT;
            }
          // fall through
          case 187: break;
          case 26:
            { return NEQ;
            }
          // fall through
          case 188: break;
          case 27:
            { return STRING;
            }
          // fall through
          case 189: break;
          case 28:
            { return COMMENT;
            }
          // fall through
          case 190: break;
          case 29:
            { return SHIFT_LEFT;
            }
          // fall through
          case 191: break;
          case 30:
            { return LTE;
            }
          // fall through
          case 192: break;
          case 31:
            { return NEQ2;
            }
          // fall through
          case 193: break;
          case 32:
            { return EQ2;
            }
          // fall through
          case 194: break;
          case 33:
            { return GTE;
            }
          // fall through
          case 195: break;
          case 34:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 196: break;
          case 35:
            { return AS;
            }
          // fall through
          case 197: break;
          case 36:
            { return BY;
            }
          // fall through
          case 198: break;
          case 37:
            { return IF;
            }
          // fall through
          case 199: break;
          case 38:
            { return IN;
            }
          // fall through
          case 200: break;
          case 39:
            { return IS;
            }
          // fall through
          case 201: break;
          case 40:
            { return NO;
            }
          // fall through
          case 202: break;
          case 41:
            { return OF;
            }
          // fall through
          case 203: break;
          case 42:
            { return ON;
            }
          // fall through
          case 204: break;
          case 43:
            { return OR;
            }
          // fall through
          case 205: break;
          case 44:
            { return TO;
            }
          // fall through
          case 206: break;
          case 45:
            { return CONCAT;
            }
          // fall through
          case 207: break;
          case 46:
            { return ADD;
            }
          // fall through
          case 208: break;
          case 47:
            { return ALL;
            }
          // fall through
          case 209: break;
          case 48:
            { return AND;
            }
          // fall through
          case 210: break;
          case 49:
            { return ASC;
            }
          // fall through
          case 211: break;
          case 50:
            { return END;
            }
          // fall through
          case 212: break;
          case 51:
            { return FOR;
            }
          // fall through
          case 213: break;
          case 52:
            { return KEY;
            }
          // fall through
          case 214: break;
          case 53:
            { return NOT;
            }
          // fall through
          case 215: break;
          case 54:
            { return ROW;
            }
          // fall through
          case 216: break;
          case 55:
            { return SET;
            }
          // fall through
          case 217: break;
          case 56:
            { return MYBATIS_OGNL;
            }
          // fall through
          case 218: break;
          case 57:
            { return CASE;
            }
          // fall through
          case 219: break;
          case 58:
            { return CAST;
            }
          // fall through
          case 220: break;
          case 59:
            { return DESC;
            }
          // fall through
          case 221: break;
          case 60:
            { return DROP;
            }
          // fall through
          case 222: break;
          case 61:
            { return EACH;
            }
          // fall through
          case 223: break;
          case 62:
            { return ELSE;
            }
          // fall through
          case 224: break;
          case 63:
            { return FAIL;
            }
          // fall through
          case 225: break;
          case 64:
            { return FROM;
            }
          // fall through
          case 226: break;
          case 65:
            { return GLOB;
            }
          // fall through
          case 227: break;
          case 66:
            { return INTO;
            }
          // fall through
          case 228: break;
          case 67:
            { return JOIN;
            }
          // fall through
          case 229: break;
          case 68:
            { return LEFT;
            }
          // fall through
          case 230: break;
          case 69:
            { return LIKE;
            }
          // fall through
          case 231: break;
          case 70:
            { return NULL;
            }
          // fall through
          case 232: break;
          case 71:
            { return PLAN;
            }
          // fall through
          case 233: break;
          case 72:
            { return TEMP;
            }
          // fall through
          case 234: break;
          case 73:
            { return THEN;
            }
          // fall through
          case 235: break;
          case 74:
            { return TRUE;
            }
          // fall through
          case 236: break;
          case 75:
            { return VIEW;
            }
          // fall through
          case 237: break;
          case 76:
            { return WHEN;
            }
          // fall through
          case 238: break;
          case 77:
            { return WITH;
            }
          // fall through
          case 239: break;
          case 78:
            { return JAVADOC;
            }
          // fall through
          case 240: break;
          case 79:
            { return ABORT;
            }
          // fall through
          case 241: break;
          case 80:
            { return AFTER;
            }
          // fall through
          case 242: break;
          case 81:
            { return ALTER;
            }
          // fall through
          case 243: break;
          case 82:
            { return BEGIN;
            }
          // fall through
          case 244: break;
          case 83:
            { return CHECK;
            }
          // fall through
          case 245: break;
          case 84:
            { return CROSS;
            }
          // fall through
          case 246: break;
          case 85:
            { return FALSE;
            }
          // fall through
          case 247: break;
          case 86:
            { return GROUP;
            }
          // fall through
          case 248: break;
          case 87:
            { return INDEX;
            }
          // fall through
          case 249: break;
          case 88:
            { return INNER;
            }
          // fall through
          case 250: break;
          case 89:
            { return LIMIT;
            }
          // fall through
          case 251: break;
          case 90:
            { return MATCH;
            }
          // fall through
          case 252: break;
          case 91:
            { return ORDER;
            }
          // fall through
          case 253: break;
          case 92:
            { return OUTER;
            }
          // fall through
          case 254: break;
          case 93:
            { return QUERY;
            }
          // fall through
          case 255: break;
          case 94:
            { return RAISE;
            }
          // fall through
          case 256: break;
          case 95:
            { return ROWID;
            }
          // fall through
          case 257: break;
          case 96:
            { return TABLE;
            }
          // fall through
          case 258: break;
          case 97:
            { return UNION;
            }
          // fall through
          case 259: break;
          case 98:
            { return USING;
            }
          // fall through
          case 260: break;
          case 99:
            { return WHERE;
            }
          // fall through
          case 261: break;
          case 100:
            { return ACTION;
            }
          // fall through
          case 262: break;
          case 101:
            { return ATTACH;
            }
          // fall through
          case 263: break;
          case 102:
            { return BEFORE;
            }
          // fall through
          case 264: break;
          case 103:
            { return COLUMN;
            }
          // fall through
          case 265: break;
          case 104:
            { return COMMIT;
            }
          // fall through
          case 266: break;
          case 105:
            { return CREATE;
            }
          // fall through
          case 267: break;
          case 106:
            { return DELETE;
            }
          // fall through
          case 268: break;
          case 107:
            { return DETACH;
            }
          // fall through
          case 269: break;
          case 108:
            { return ESCAPE;
            }
          // fall through
          case 270: break;
          case 109:
            { return EXCEPT;
            }
          // fall through
          case 271: break;
          case 110:
            { return EXISTS;
            }
          // fall through
          case 272: break;
          case 111:
            { return HAVING;
            }
          // fall through
          case 273: break;
          case 112:
            { return IGNORE;
            }
          // fall through
          case 274: break;
          case 113:
            { return INSERT;
            }
          // fall through
          case 275: break;
          case 114:
            { return OFFSET;
            }
          // fall through
          case 276: break;
          case 115:
            { return PRAGMA;
            }
          // fall through
          case 277: break;
          case 116:
            { return REGEXP;
            }
          // fall through
          case 278: break;
          case 117:
            { return RENAME;
            }
          // fall through
          case 279: break;
          case 118:
            { return SELECT;
            }
          // fall through
          case 280: break;
          case 119:
            { return UNIQUE;
            }
          // fall through
          case 281: break;
          case 120:
            { return UPDATE;
            }
          // fall through
          case 282: break;
          case 121:
            { return VACUUM;
            }
          // fall through
          case 283: break;
          case 122:
            { return VALUES;
            }
          // fall through
          case 284: break;
          case 123:
            { return ANALYZE;
            }
          // fall through
          case 285: break;
          case 124:
            { return BETWEEN;
            }
          // fall through
          case 286: break;
          case 125:
            { return CASCADE;
            }
          // fall through
          case 287: break;
          case 126:
            { return COLLATE;
            }
          // fall through
          case 288: break;
          case 127:
            { return DEFAULT;
            }
          // fall through
          case 289: break;
          case 128:
            { return EXPLAIN;
            }
          // fall through
          case 290: break;
          case 129:
            { return FOREIGN;
            }
          // fall through
          case 291: break;
          case 130:
            { return INDEXED;
            }
          // fall through
          case 292: break;
          case 131:
            { return INSTEAD;
            }
          // fall through
          case 293: break;
          case 132:
            { return NATURAL;
            }
          // fall through
          case 294: break;
          case 133:
            { return PRIMARY;
            }
          // fall through
          case 295: break;
          case 134:
            { return REINDEX;
            }
          // fall through
          case 296: break;
          case 135:
            { return RELEASE;
            }
          // fall through
          case 297: break;
          case 136:
            { return REPLACE;
            }
          // fall through
          case 298: break;
          case 137:
            { return TRIGGER;
            }
          // fall through
          case 299: break;
          case 138:
            { return VIRTUAL;
            }
          // fall through
          case 300: break;
          case 139:
            { return WITHOUT;
            }
          // fall through
          case 301: break;
          case 140:
            { return CONFLICT;
            }
          // fall through
          case 302: break;
          case 141:
            { return DATABASE;
            }
          // fall through
          case 303: break;
          case 142:
            { return DEFERRED;
            }
          // fall through
          case 304: break;
          case 143:
            { return DISTINCT;
            }
          // fall through
          case 305: break;
          case 144:
            { return RESTRICT;
            }
          // fall through
          case 306: break;
          case 145:
            { return ROLLBACK;
            }
          // fall through
          case 307: break;
          case 146:
            { return UNSIGNED;
            }
          // fall through
          case 308: break;
          case 147:
            { return EXCLUSIVE;
            }
          // fall through
          case 309: break;
          case 148:
            { return IMMEDIATE;
            }
          // fall through
          case 310: break;
          case 149:
            { return INITIALLY;
            }
          // fall through
          case 311: break;
          case 150:
            { return INTERSECT;
            }
          // fall through
          case 312: break;
          case 151:
            { return RECURSIVE;
            }
          // fall through
          case 313: break;
          case 152:
            { return SAVEPOINT;
            }
          // fall through
          case 314: break;
          case 153:
            { return TEMPORARY;
            }
          // fall through
          case 315: break;
          case 154:
            { return CONSTRAINT;
            }
          // fall through
          case 316: break;
          case 155:
            { return DEFERRABLE;
            }
          // fall through
          case 317: break;
          case 156:
            { return REFERENCES_WORD;
            }
          // fall through
          case 318: break;
          case 157:
            { return TRANSACTION;
            }
          // fall through
          case 319: break;
          case 158:
            { return CURRENT_DATE;
            }
          // fall through
          case 320: break;
          case 159:
            { return CURRENT_TIME;
            }
          // fall through
          case 321: break;
          case 160:
            { return AUTOINCREMENT;
            }
          // fall through
          case 322: break;
          case 161:
            { return AUTO_INCREMENT;
            }
          // fall through
          case 323: break;
          case 162:
            { return CURRENT_TIMESTAMP;
            }
          // fall through
          case 324: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
