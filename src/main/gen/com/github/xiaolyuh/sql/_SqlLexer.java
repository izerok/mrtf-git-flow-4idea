// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _SqlLexer.flex

package com.github.xiaolyuh.sql;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.xiaolyuh.sql.psi.SqlTypes.*;


public class _SqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\2\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\0\1\22\1\23"+
    "\1\24\1\25\2\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\0\1\60"+
    "\1\0\1\61\1\60\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\37\1\40\1\73\1\42"+
    "\1\74\1\75\1\76\1\46\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\55\1\105\1\57\1\0\1\106\1\0"+
    "\1\107\6\0\1\3\32\0\1\1\u01df\0\1\1\177\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0\u0100\110";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\4\22\1\23\36\22\1\24"+
    "\1\25\1\26\1\0\1\27\1\0\1\30\1\0\1\15"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\6\22\1\37"+
    "\3\22\1\40\30\22\1\41\2\22\1\42\1\43\1\42"+
    "\6\22\1\44\2\22\1\45\1\46\1\47\16\22\1\50"+
    "\13\22\1\51\1\0\2\22\1\52\1\22\1\53\2\22"+
    "\1\54\1\55\30\22\1\56\6\22\1\57\15\22\1\60"+
    "\5\22\1\61\22\22\1\62\2\22\1\63\17\22\1\0"+
    "\13\22\1\64\1\65\16\22\1\66\2\22\1\67\1\70"+
    "\1\71\5\22\1\72\2\22\1\73\1\74\12\22\1\75"+
    "\1\76\1\77\1\100\3\22\1\101\3\22\1\102\21\22"+
    "\1\103\1\104\2\22\1\105\6\22\1\106\1\22\1\107"+
    "\1\22\1\110\1\111\1\112\1\22\1\113\1\114\4\22"+
    "\1\115\2\22\1\116\6\22\1\117\15\22\1\120\1\22"+
    "\1\121\3\22\1\122\1\22\1\123\3\22\1\124\1\125"+
    "\2\22\1\126\1\127\2\22\1\130\1\131\11\22\1\132"+
    "\2\22\1\133\3\22\1\134\2\22\1\135\3\22\1\136"+
    "\1\22\1\137\1\22\1\140\1\22\1\141\3\22\1\142"+
    "\1\143\2\22\1\144\5\22\1\145\1\146\1\22\1\147"+
    "\1\150\1\22\1\151\2\22\1\152\1\153\3\22\1\154"+
    "\3\22\1\155\1\156\3\22\1\157\2\22\1\160\4\22"+
    "\1\161\3\22\1\162\1\163\1\164\1\165\2\22\1\166"+
    "\1\22\1\167\1\170\1\171\4\22\1\172\4\22\1\173"+
    "\1\174\1\22\1\175\1\22\1\176\1\22\1\177\1\200"+
    "\2\22\1\201\1\202\1\203\5\22\1\204\1\205\1\206"+
    "\1\22\1\207\2\22\1\210\1\22\1\211\1\212\6\22"+
    "\1\213\1\214\10\22\1\215\1\216\1\217\1\220\1\221"+
    "\1\22\1\222\1\223\2\22\1\224\2\22\1\225\1\226"+
    "\4\22\1\227\1\22\1\230\1\231\1\232\4\22\1\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\111\0\111\0\u016d"+
    "\0\111\0\111\0\111\0\111\0\111\0\u01b6\0\111\0\u01ff"+
    "\0\u0248\0\111\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0447\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646"+
    "\0\u068f\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e"+
    "\0\u0d67\0\111\0\111\0\u0124\0\111\0\u016d\0\u0db0\0\u0df9"+
    "\0\u0e42\0\111\0\111\0\111\0\111\0\111\0\111\0\u0e8b"+
    "\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3"+
    "\0\u111c\0\u09fb\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2"+
    "\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u1488\0\u14d1\0\u151a"+
    "\0\u1563\0\u15ac\0\u15f5\0\u163e\0\u1687\0\u16d0\0\u1719\0\u1762"+
    "\0\u17ab\0\u17f4\0\u09fb\0\u183d\0\u1886\0\u18cf\0\u09fb\0\u1918"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60"+
    "\0\u1b17\0\u1ba9\0\u09fb\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e"+
    "\0\u1fa7\0\u1ff0\0\u09fb\0\u2039\0\u2082\0\u20cb\0\u2114\0\u215d"+
    "\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u2313\0\111\0\u235c"+
    "\0\u23a5\0\u23ee\0\u09fb\0\u2437\0\u09fb\0\u2480\0\u24c9\0\u09fb"+
    "\0\u09fb\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8"+
    "\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u09fb\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u2d57"+
    "\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56\0\u2f9f"+
    "\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u09fb\0\u319e"+
    "\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u09fb\0\u330b\0\u3354\0\u339d"+
    "\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5"+
    "\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d"+
    "\0\u3876\0\u38bf\0\u09fb\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c"+
    "\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u3ebc"+
    "\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u09fb\0\u09fb"+
    "\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271\0\u42ba"+
    "\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470\0\u09fb\0\u44b9"+
    "\0\u4502\0\u09fb\0\u09fb\0\u09fb\0\u454b\0\u4594\0\u45dd\0\u4626"+
    "\0\u466f\0\u09fb\0\u46b8\0\u4701\0\u09fb\0\u09fb\0\u474a\0\u4793"+
    "\0\u47dc\0\u4825\0\u486e\0\u48b7\0\u4900\0\u4949\0\u4992\0\u49db"+
    "\0\u09fb\0\u09fb\0\u09fb\0\u09fb\0\u4a24\0\u4a6d\0\u4ab6\0\u09fb"+
    "\0\u4aff\0\u4b48\0\u4b91\0\u09fb\0\u4bda\0\u4c23\0\u4c6c\0\u4cb5"+
    "\0\u4cfe\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd"+
    "\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3\0\u09fb\0\u50fc"+
    "\0\u5145\0\u09fb\0\u518e\0\u51d7\0\u5220\0\u5269\0\u52b2\0\u52fb"+
    "\0\u09fb\0\u5344\0\u09fb\0\u538d\0\u53d6\0\u235c\0\u09fb\0\u541f"+
    "\0\u09fb\0\u09fb\0\u5468\0\u54b1\0\u54fa\0\u5543\0\u09fb\0\u558c"+
    "\0\u55d5\0\u09fb\0\u561e\0\u5667\0\u56b0\0\u56f9\0\u5742\0\u578b"+
    "\0\u09fb\0\u57d4\0\u581d\0\u5866\0\u58af\0\u58f8\0\u5941\0\u598a"+
    "\0\u59d3\0\u5a1c\0\u5a65\0\u5aae\0\u5af7\0\u5b40\0\u09fb\0\u5b89"+
    "\0\u09fb\0\u5bd2\0\u5c1b\0\u5c64\0\u5cad\0\u5cf6\0\u09fb\0\u5d3f"+
    "\0\u5d88\0\u5dd1\0\u09fb\0\u09fb\0\u5e1a\0\u5e63\0\u09fb\0\u09fb"+
    "\0\u5eac\0\u5ef5\0\u09fb\0\u09fb\0\u5f3e\0\u5f87\0\u5fd0\0\u6019"+
    "\0\u6062\0\u60ab\0\u60f4\0\u613d\0\u6186\0\u09fb\0\u61cf\0\u6218"+
    "\0\u09fb\0\u6261\0\u62aa\0\u62f3\0\u09fb\0\u633c\0\u6385\0\u09fb"+
    "\0\u63ce\0\u6417\0\u6460\0\u09fb\0\u64a9\0\u09fb\0\u64f2\0\u09fb"+
    "\0\u653b\0\u09fb\0\u6584\0\u65cd\0\u6616\0\u09fb\0\u09fb\0\u665f"+
    "\0\u66a8\0\u09fb\0\u66f1\0\u673a\0\u6783\0\u67cc\0\u6815\0\u09fb"+
    "\0\u09fb\0\u685e\0\u09fb\0\u09fb\0\u68a7\0\u09fb\0\u68f0\0\u6939"+
    "\0\u09fb\0\u09fb\0\u6982\0\u69cb\0\u6a14\0\u09fb\0\u6a5d\0\u6aa6"+
    "\0\u6aef\0\u09fb\0\u09fb\0\u6b38\0\u6b81\0\u6bca\0\u09fb\0\u6c13"+
    "\0\u6c5c\0\u09fb\0\u6ca5\0\u6cee\0\u6d37\0\u6d80\0\u09fb\0\u6dc9"+
    "\0\u6e12\0\u6e5b\0\u09fb\0\u09fb\0\u09fb\0\u09fb\0\u6ea4\0\u6eed"+
    "\0\u09fb\0\u6f36\0\u09fb\0\u09fb\0\u09fb\0\u6f7f\0\u6fc8\0\u7011"+
    "\0\u705a\0\u09fb\0\u70a3\0\u70ec\0\u7135\0\u717e\0\u09fb\0\u09fb"+
    "\0\u71c7\0\u09fb\0\u7210\0\u09fb\0\u7259\0\u09fb\0\u09fb\0\u72a2"+
    "\0\u72eb\0\u09fb\0\u09fb\0\u09fb\0\u7334\0\u737d\0\u73c6\0\u740f"+
    "\0\u7458\0\u09fb\0\u09fb\0\u09fb\0\u74a1\0\u09fb\0\u74ea\0\u7533"+
    "\0\u09fb\0\u757c\0\u09fb\0\u09fb\0\u75c5\0\u760e\0\u7657\0\u76a0"+
    "\0\u76e9\0\u7732\0\u09fb\0\u09fb\0\u777b\0\u77c4\0\u780d\0\u7856"+
    "\0\u789f\0\u78e8\0\u7931\0\u797a\0\u09fb\0\u09fb\0\u09fb\0\u09fb"+
    "\0\u09fb\0\u79c3\0\u09fb\0\u09fb\0\u7a0c\0\u7a55\0\u09fb\0\u7a9e"+
    "\0\u7ae7\0\u09fb\0\u09fb\0\u7b30\0\u7b79\0\u7bc2\0\u7c0b\0\u09fb"+
    "\0\u7c54\0\u09fb\0\u7c9d\0\u09fb\0\u7ce6\0\u7d2f\0\u7d78\0\u7dc1"+
    "\0\u09fb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\5\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\33\1\63\1\55\1\64\1\41\1\65\1\44"+
    "\1\45\1\66\1\50\1\67\1\52\1\70\1\54\1\55"+
    "\1\71\1\72\1\2\112\0\3\3\131\0\1\73\64\0"+
    "\5\74\1\75\103\74\10\76\1\75\100\76\16\0\1\77"+
    "\105\0\1\100\114\0\1\101\1\0\1\21\4\0\60\55"+
    "\26\0\1\102\1\103\1\104\107\0\1\105\110\0\1\106"+
    "\1\107\104\0\1\55\4\0\1\55\1\110\1\111\1\112"+
    "\1\55\1\113\5\55\1\114\1\55\1\115\4\55\1\116"+
    "\1\117\1\120\10\55\1\110\1\55\1\112\5\55\1\114"+
    "\1\115\3\55\1\116\1\117\1\120\3\55\24\0\1\55"+
    "\4\0\4\55\1\121\23\55\1\122\7\55\1\123\16\55"+
    "\1\122\24\0\1\55\4\0\1\124\6\55\1\125\6\55"+
    "\1\126\2\55\1\127\2\55\1\130\7\55\1\124\6\55"+
    "\1\125\2\55\1\131\1\132\1\55\1\127\2\55\1\130"+
    "\3\55\24\0\1\55\4\0\1\133\3\55\1\134\3\55"+
    "\1\135\10\55\1\136\12\55\1\133\3\55\1\137\3\55"+
    "\1\135\4\55\1\136\6\55\24\0\1\55\4\0\1\140"+
    "\12\55\1\141\1\55\1\142\4\55\1\143\4\55\1\144"+
    "\15\55\1\141\1\142\3\55\1\143\5\55\24\0\1\55"+
    "\4\0\1\145\15\55\1\146\2\55\1\147\12\55\1\145"+
    "\12\55\1\146\1\55\1\147\6\55\24\0\1\55\4\0"+
    "\13\55\1\150\5\55\1\151\23\55\1\150\12\55\24\0"+
    "\1\55\4\0\1\152\57\55\24\0\1\55\4\0\5\55"+
    "\1\153\1\154\5\55\1\155\1\156\4\55\1\157\16\55"+
    "\1\153\1\154\3\55\1\160\3\55\1\157\5\55\24\0"+
    "\1\55\4\0\16\55\1\161\30\55\1\161\10\55\24\0"+
    "\1\55\4\0\4\55\1\162\33\55\1\162\17\55\24\0"+
    "\1\55\4\0\4\55\1\163\3\55\1\164\27\55\1\163"+
    "\3\55\1\164\13\55\24\0\1\55\4\0\1\165\33\55"+
    "\1\165\23\55\24\0\1\55\4\0\1\166\15\55\1\167"+
    "\5\55\1\170\7\55\1\166\12\55\1\171\4\55\1\170"+
    "\3\55\24\0\1\55\4\0\5\55\1\172\7\55\1\173"+
    "\3\55\1\174\2\55\1\175\14\55\1\172\4\55\1\173"+
    "\2\55\1\174\2\55\1\175\3\55\24\0\1\55\4\0"+
    "\13\55\1\176\5\55\1\177\23\55\1\176\3\55\1\177"+
    "\6\55\24\0\1\55\4\0\24\55\1\200\27\55\1\200"+
    "\3\55\24\0\1\55\4\0\1\201\3\55\1\202\11\55"+
    "\1\203\15\55\1\201\3\55\1\204\6\55\1\205\10\55"+
    "\24\0\1\55\4\0\1\206\3\55\1\207\27\55\1\206"+
    "\3\55\1\207\17\55\24\0\1\55\4\0\1\210\3\55"+
    "\1\211\2\55\1\212\6\55\1\213\2\55\1\214\12\55"+
    "\1\210\3\55\1\211\2\55\1\212\3\55\1\213\1\55"+
    "\1\215\6\55\24\0\1\55\4\0\15\55\1\216\1\55"+
    "\1\217\2\55\1\220\23\55\1\216\1\55\1\217\1\55"+
    "\1\220\5\55\24\0\1\55\4\0\1\221\7\55\1\222"+
    "\23\55\1\221\7\55\1\223\13\55\24\0\1\55\4\0"+
    "\7\55\1\224\1\225\32\55\1\224\1\225\13\55\24\0"+
    "\1\55\4\0\60\55\24\0\1\55\4\0\1\55\1\110"+
    "\1\55\1\112\7\55\1\114\1\55\1\115\4\55\1\116"+
    "\1\117\1\120\10\55\1\110\1\55\1\112\5\55\1\114"+
    "\1\115\3\55\1\116\1\117\1\120\3\55\24\0\1\55"+
    "\4\0\4\55\1\123\23\55\1\122\7\55\1\123\16\55"+
    "\1\122\24\0\1\55\4\0\1\124\6\55\1\125\6\55"+
    "\1\226\2\55\1\127\2\55\1\130\7\55\1\124\6\55"+
    "\1\125\2\55\1\131\1\132\1\55\1\127\2\55\1\130"+
    "\3\55\24\0\1\55\4\0\1\133\3\55\1\137\3\55"+
    "\1\135\10\55\1\136\12\55\1\133\3\55\1\137\3\55"+
    "\1\135\4\55\1\136\6\55\24\0\1\55\4\0\13\55"+
    "\1\141\1\55\1\142\4\55\1\143\4\55\1\144\15\55"+
    "\1\141\1\142\3\55\1\143\5\55\24\0\1\55\4\0"+
    "\13\55\1\150\31\55\1\150\12\55\24\0\1\55\4\0"+
    "\5\55\1\153\1\154\5\55\1\155\1\160\4\55\1\157"+
    "\16\55\1\153\1\154\3\55\1\160\3\55\1\157\5\55"+
    "\24\0\1\55\4\0\1\166\15\55\1\171\5\55\1\170"+
    "\7\55\1\166\12\55\1\171\4\55\1\170\3\55\24\0"+
    "\1\55\4\0\1\201\3\55\1\204\11\55\1\205\15\55"+
    "\1\201\3\55\1\204\6\55\1\205\10\55\24\0\1\55"+
    "\4\0\1\210\3\55\1\211\2\55\1\212\6\55\1\213"+
    "\2\55\1\215\12\55\1\210\3\55\1\211\2\55\1\212"+
    "\3\55\1\213\1\55\1\215\6\55\24\0\1\55\4\0"+
    "\1\221\7\55\1\223\23\55\1\221\7\55\1\223\13\55"+
    "\111\0\1\227\2\0\2\77\2\0\104\77\14\0\1\230"+
    "\116\0\1\101\110\0\1\55\4\0\16\55\1\231\30\55"+
    "\1\231\10\55\24\0\1\55\4\0\23\55\1\232\34\55"+
    "\24\0\1\55\4\0\3\55\1\233\33\55\1\233\20\55"+
    "\24\0\1\55\4\0\23\55\1\234\34\55\24\0\1\55"+
    "\4\0\13\55\1\235\7\55\1\236\21\55\1\235\5\55"+
    "\1\236\4\55\24\0\1\55\4\0\1\237\2\55\1\240"+
    "\30\55\1\237\2\55\1\240\20\55\24\0\1\55\4\0"+
    "\2\55\1\241\33\55\1\241\21\55\24\0\1\55\4\0"+
    "\23\55\1\242\27\55\1\242\4\55\24\0\1\55\4\0"+
    "\23\55\1\243\27\55\1\243\4\55\24\0\1\55\4\0"+
    "\5\55\1\244\1\245\14\55\1\246\16\55\1\245\10\55"+
    "\1\246\4\55\24\0\1\55\4\0\6\55\1\245\14\55"+
    "\1\246\16\55\1\245\10\55\1\246\4\55\24\0\1\55"+
    "\4\0\22\55\1\247\27\55\1\247\5\55\24\0\1\55"+
    "\4\0\4\55\1\250\33\55\1\250\17\55\24\0\1\55"+
    "\4\0\13\55\1\251\1\252\1\253\27\55\1\251\1\254"+
    "\11\55\24\0\1\55\4\0\4\55\1\255\11\55\1\256"+
    "\21\55\1\255\6\55\1\256\10\55\24\0\1\55\4\0"+
    "\21\55\1\257\27\55\1\257\6\55\24\0\1\55\4\0"+
    "\15\55\1\254\30\55\1\254\11\55\24\0\1\55\4\0"+
    "\13\55\1\251\1\252\30\55\1\251\12\55\24\0\1\55"+
    "\4\0\23\55\1\260\27\55\1\260\4\55\24\0\1\55"+
    "\4\0\5\55\1\261\5\55\1\262\6\55\1\263\1\264"+
    "\15\55\1\265\3\55\1\262\4\55\1\263\5\55\24\0"+
    "\1\55\4\0\22\55\1\266\27\55\1\266\5\55\24\0"+
    "\1\55\4\0\16\55\1\267\30\55\1\267\10\55\24\0"+
    "\1\55\4\0\5\55\1\265\5\55\1\262\6\55\1\263"+
    "\16\55\1\265\3\55\1\262\4\55\1\263\5\55\24\0"+
    "\1\55\4\0\2\55\1\270\55\55\24\0\1\55\4\0"+
    "\22\55\1\271\27\55\1\271\5\55\24\0\1\55\4\0"+
    "\3\55\1\272\33\55\1\272\20\55\24\0\1\55\4\0"+
    "\2\55\1\273\33\55\1\273\21\55\24\0\1\55\4\0"+
    "\2\55\1\274\5\55\1\275\6\55\1\276\16\55\1\274"+
    "\5\55\1\275\3\55\1\276\7\55\24\0\1\55\4\0"+
    "\10\55\1\277\2\55\1\300\30\55\1\277\1\300\12\55"+
    "\24\0\1\55\4\0\21\55\1\301\27\55\1\301\6\55"+
    "\24\0\1\55\4\0\16\55\1\302\30\55\1\302\10\55"+
    "\24\0\1\55\4\0\16\55\1\303\30\55\1\303\10\55"+
    "\24\0\1\55\4\0\16\55\1\304\41\55\24\0\1\55"+
    "\4\0\25\55\1\305\32\55\24\0\1\55\4\0\15\55"+
    "\1\306\30\55\1\306\11\55\24\0\1\55\4\0\14\55"+
    "\1\307\43\55\24\0\1\55\4\0\3\55\1\310\4\55"+
    "\1\311\4\55\1\312\4\55\1\313\1\314\13\55\1\310"+
    "\6\55\1\312\3\55\1\315\1\314\4\55\24\0\1\55"+
    "\4\0\3\55\1\310\11\55\1\312\4\55\1\315\1\314"+
    "\13\55\1\310\6\55\1\312\3\55\1\315\1\314\4\55"+
    "\24\0\1\55\4\0\10\55\1\316\33\55\1\316\13\55"+
    "\24\0\1\55\4\0\30\55\1\317\26\55\1\317\24\0"+
    "\1\55\4\0\5\55\1\320\33\55\1\320\16\55\24\0"+
    "\1\55\4\0\12\55\1\321\1\55\1\322\43\55\24\0"+
    "\1\55\4\0\23\55\1\323\27\55\1\323\4\55\24\0"+
    "\1\55\4\0\23\55\1\324\27\55\1\324\4\55\24\0"+
    "\1\55\4\0\23\55\1\325\27\55\1\325\4\55\24\0"+
    "\1\55\4\0\13\55\1\326\31\55\1\326\12\55\24\0"+
    "\1\55\4\0\5\55\1\327\33\55\1\327\16\55\24\0"+
    "\1\55\4\0\3\55\1\330\33\55\1\330\20\55\24\0"+
    "\1\55\4\0\23\55\1\331\27\55\1\331\4\55\24\0"+
    "\1\55\4\0\1\332\33\55\1\332\23\55\24\0\1\55"+
    "\4\0\1\333\7\55\1\334\23\55\1\333\7\55\1\334"+
    "\13\55\24\0\1\55\4\0\4\55\1\335\33\55\1\335"+
    "\17\55\24\0\1\55\4\0\10\55\1\336\33\55\1\336"+
    "\13\55\24\0\1\55\4\0\2\55\1\337\2\55\1\340"+
    "\1\341\1\55\1\342\2\55\1\343\1\55\1\344\1\55"+
    "\1\345\2\55\1\346\16\55\1\340\1\341\1\55\1\342"+
    "\1\343\1\344\3\55\1\346\5\55\24\0\1\55\4\0"+
    "\13\55\1\347\12\55\1\350\16\55\1\347\12\55\24\0"+
    "\1\55\4\0\5\55\1\340\1\341\1\55\1\342\2\55"+
    "\1\343\1\55\1\344\4\55\1\346\16\55\1\340\1\341"+
    "\1\55\1\342\1\343\1\344\3\55\1\346\5\55\24\0"+
    "\1\55\4\0\13\55\1\347\31\55\1\347\12\55\24\0"+
    "\1\55\4\0\25\55\1\351\27\55\1\351\2\55\24\0"+
    "\1\55\4\0\13\55\1\352\7\55\1\353\21\55\1\352"+
    "\5\55\1\353\4\55\24\0\1\55\4\0\1\55\1\354"+
    "\33\55\1\354\22\55\24\0\1\55\4\0\14\55\1\355"+
    "\43\55\24\0\1\55\4\0\4\55\1\356\33\55\1\356"+
    "\17\55\24\0\1\55\4\0\1\357\7\55\1\360\13\55"+
    "\1\361\7\55\1\357\17\55\1\361\3\55\24\0\1\55"+
    "\4\0\1\357\23\55\1\361\7\55\1\357\17\55\1\361"+
    "\3\55\24\0\1\55\4\0\10\55\1\362\33\55\1\362"+
    "\13\55\24\0\1\55\4\0\3\55\1\363\33\55\1\363"+
    "\20\55\24\0\1\55\4\0\10\55\1\364\33\55\1\364"+
    "\13\55\24\0\1\55\4\0\2\55\1\365\10\55\1\366"+
    "\22\55\1\365\6\55\1\366\12\55\24\0\1\55\4\0"+
    "\4\55\1\367\14\55\1\370\16\55\1\367\17\55\24\0"+
    "\1\55\4\0\4\55\1\367\33\55\1\367\17\55\24\0"+
    "\1\55\4\0\4\55\1\371\33\55\1\371\17\55\24\0"+
    "\1\55\4\0\23\55\1\372\27\55\1\372\4\55\24\0"+
    "\1\55\4\0\13\55\1\251\1\252\1\254\27\55\1\251"+
    "\1\254\11\55\3\0\3\230\1\0\7\230\1\373\74\230"+
    "\22\0\1\55\4\0\21\55\1\374\27\55\1\374\6\55"+
    "\24\0\1\55\4\0\10\55\1\375\47\55\24\0\1\55"+
    "\4\0\4\55\1\376\53\55\24\0\1\55\4\0\4\55"+
    "\1\377\33\55\1\377\17\55\24\0\1\55\4\0\13\55"+
    "\1\u0100\31\55\1\u0100\12\55\24\0\1\55\4\0\1\u0101"+
    "\33\55\1\u0101\23\55\24\0\1\55\4\0\16\55\1\u0102"+
    "\30\55\1\u0102\10\55\24\0\1\55\4\0\16\55\1\u0103"+
    "\41\55\24\0\1\55\4\0\10\55\1\u0104\33\55\1\u0104"+
    "\13\55\24\0\1\55\4\0\26\55\1\u0105\27\55\1\u0105"+
    "\1\55\24\0\1\55\4\0\2\55\1\u0106\1\55\1\u0107"+
    "\16\55\1\u0108\12\55\1\u0106\1\55\1\u0107\12\55\1\u0108"+
    "\4\55\24\0\1\55\4\0\2\55\1\u0109\33\55\1\u0109"+
    "\21\55\24\0\1\55\4\0\13\55\1\u010a\10\55\1\u010b"+
    "\20\55\1\u010a\6\55\1\u010b\3\55\24\0\1\55\4\0"+
    "\14\55\1\u010c\43\55\24\0\1\55\4\0\5\55\1\u010d"+
    "\14\55\1\u010e\27\55\1\u010e\5\55\24\0\1\55\4\0"+
    "\22\55\1\u010e\27\55\1\u010e\5\55\24\0\1\55\4\0"+
    "\1\u010f\33\55\1\u010f\23\55\24\0\1\55\4\0\22\55"+
    "\1\u0110\27\55\1\u0110\5\55\24\0\1\55\4\0\21\55"+
    "\1\u0111\27\55\1\u0111\6\55\24\0\1\55\4\0\1\u0112"+
    "\33\55\1\u0112\23\55\24\0\1\55\4\0\1\u0113\3\55"+
    "\1\u0114\27\55\1\u0113\3\55\1\u0115\17\55\24\0\1\55"+
    "\4\0\4\55\1\u0116\33\55\1\u0116\17\55\24\0\1\55"+
    "\4\0\2\55\1\u0117\33\55\1\u0117\21\55\24\0\1\55"+
    "\4\0\1\u0118\57\55\24\0\1\55\4\0\1\u0113\3\55"+
    "\1\u0115\27\55\1\u0113\3\55\1\u0115\17\55\24\0\1\55"+
    "\4\0\23\55\1\u0119\27\55\1\u0119\4\55\24\0\1\55"+
    "\4\0\17\55\1\u011a\30\55\1\u011a\7\55\24\0\1\55"+
    "\4\0\7\55\1\u011b\50\55\24\0\1\55\4\0\4\55"+
    "\1\u011c\33\55\1\u011c\17\55\24\0\1\55\4\0\1\u011d"+
    "\33\55\1\u011d\23\55\24\0\1\55\4\0\4\55\1\u011e"+
    "\6\55\1\u011f\24\55\1\u011e\4\55\1\u011f\12\55\24\0"+
    "\1\55\4\0\22\55\1\u0120\27\55\1\u0120\5\55\24\0"+
    "\1\55\4\0\13\55\1\u0121\31\55\1\u0121\12\55\24\0"+
    "\1\55\4\0\13\55\1\u0122\31\55\1\u0122\12\55\24\0"+
    "\1\55\4\0\22\55\1\u0123\27\55\1\u0123\5\55\24\0"+
    "\1\55\4\0\4\55\1\u0124\33\55\1\u0124\17\55\24\0"+
    "\1\55\4\0\14\55\1\u0125\43\55\24\0\1\55\4\0"+
    "\1\55\1\u0126\33\55\1\u0126\22\55\24\0\1\55\4\0"+
    "\24\55\1\u0127\33\55\24\0\1\55\4\0\10\55\1\u0128"+
    "\47\55\24\0\1\55\4\0\16\55\1\u0129\30\55\1\u0129"+
    "\10\55\24\0\1\55\4\0\4\55\1\u012a\33\55\1\u012a"+
    "\17\55\24\0\1\55\4\0\4\55\1\u012b\33\55\1\u012b"+
    "\17\55\24\0\1\55\4\0\23\55\1\u012c\34\55\24\0"+
    "\1\55\4\0\4\55\1\u012d\33\55\1\u012d\17\55\24\0"+
    "\1\55\4\0\4\55\1\u012e\16\55\1\u012f\14\55\1\u012e"+
    "\17\55\24\0\1\55\4\0\4\55\1\u0130\11\55\1\u0131"+
    "\21\55\1\u0130\6\55\1\u0131\10\55\24\0\1\55\4\0"+
    "\4\55\1\u012e\33\55\1\u012e\17\55\24\0\1\55\4\0"+
    "\15\55\1\u0132\30\55\1\u0132\11\55\24\0\1\55\4\0"+
    "\23\55\1\u0133\27\55\1\u0133\4\55\24\0\1\55\4\0"+
    "\4\55\1\u0134\33\55\1\u0134\17\55\24\0\1\55\4\0"+
    "\10\55\1\u0135\33\55\1\u0135\13\55\24\0\1\55\4\0"+
    "\2\55\1\u0136\33\55\1\u0136\21\55\24\0\1\55\4\0"+
    "\24\55\1\u0137\27\55\1\u0137\3\55\24\0\1\55\4\0"+
    "\13\55\1\u0138\31\55\1\u0138\12\55\24\0\1\55\4\0"+
    "\22\55\1\u0139\27\55\1\u0139\5\55\24\0\1\55\4\0"+
    "\4\55\1\u013a\33\55\1\u013a\17\55\24\0\1\55\4\0"+
    "\4\55\1\u013b\33\55\1\u013b\17\55\24\0\1\55\4\0"+
    "\15\55\1\u013c\30\55\1\u013c\11\55\24\0\1\55\4\0"+
    "\6\55\1\u013d\33\55\1\u013d\15\55\24\0\1\55\4\0"+
    "\14\55\1\u013e\43\55\24\0\1\55\4\0\21\55\1\u013f"+
    "\27\55\1\u013f\6\55\24\0\1\55\4\0\22\55\1\u0140"+
    "\27\55\1\u0140\5\55\24\0\1\55\4\0\24\55\1\u0141"+
    "\33\55\24\0\1\55\4\0\4\55\1\u0142\33\55\1\u0142"+
    "\17\55\24\0\1\55\4\0\4\55\1\u0143\33\55\1\u0143"+
    "\17\55\24\0\1\55\4\0\15\55\1\u0144\30\55\1\u0144"+
    "\11\55\24\0\1\55\4\0\4\55\1\u0145\33\55\1\u0145"+
    "\17\55\24\0\1\55\4\0\1\u0146\33\55\1\u0146\23\55"+
    "\24\0\1\55\4\0\13\55\1\u0147\44\55\24\0\1\55"+
    "\4\0\23\55\1\u0148\27\55\1\u0148\4\55\24\0\1\55"+
    "\4\0\13\55\1\u0149\31\55\1\u0149\12\55\24\0\1\55"+
    "\4\0\10\55\1\u014a\47\55\24\0\1\55\4\0\4\55"+
    "\1\u014b\33\55\1\u014b\17\55\24\0\1\55\4\0\4\55"+
    "\1\u014c\33\55\1\u014c\17\55\24\0\1\55\4\0\13\55"+
    "\1\u014d\31\55\1\u014d\12\55\24\0\1\55\4\0\17\55"+
    "\1\u014e\30\55\1\u014e\7\55\24\0\1\55\4\0\15\55"+
    "\1\u014f\30\55\1\u014f\11\55\24\0\1\55\4\0\15\55"+
    "\1\u0150\30\55\1\u0150\11\55\24\0\1\55\4\0\6\55"+
    "\1\u0151\51\55\24\0\1\55\4\0\4\55\1\u0152\33\55"+
    "\1\u0152\17\55\24\0\1\55\4\0\16\55\1\u0153\1\55"+
    "\1\u0154\26\55\1\u0153\10\55\24\0\1\55\4\0\1\u0155"+
    "\33\55\1\u0155\23\55\24\0\1\55\4\0\15\55\1\u0156"+
    "\30\55\1\u0156\11\55\24\0\1\55\4\0\24\55\1\u0157"+
    "\27\55\1\u0157\3\55\24\0\1\55\4\0\24\55\1\u0158"+
    "\27\55\1\u0158\3\55\24\0\1\55\4\0\26\55\1\u0159"+
    "\27\55\1\u0159\1\55\24\0\1\55\4\0\23\55\1\u015a"+
    "\34\55\24\0\1\55\4\0\15\55\1\u015b\3\55\1\u015c"+
    "\24\55\1\u015b\2\55\1\u015c\6\55\24\0\1\55\4\0"+
    "\7\55\1\u015d\33\55\1\u015d\14\55\3\0\3\230\1\0"+
    "\7\230\1\373\4\230\1\u015e\67\230\22\0\1\55\4\0"+
    "\23\55\1\u015f\27\55\1\u015f\4\55\24\0\1\55\4\0"+
    "\16\55\1\u0160\41\55\24\0\1\55\4\0\21\55\1\u0161"+
    "\36\55\24\0\1\55\4\0\21\55\1\u0162\27\55\1\u0162"+
    "\6\55\24\0\1\55\4\0\30\55\1\u0163\26\55\1\u0163"+
    "\24\0\1\55\4\0\2\55\1\u0164\33\55\1\u0164\21\55"+
    "\24\0\1\55\4\0\10\55\1\u0165\33\55\1\u0165\13\55"+
    "\24\0\1\55\4\0\21\55\1\u0166\36\55\24\0\1\55"+
    "\4\0\15\55\1\u0167\30\55\1\u0167\11\55\24\0\1\55"+
    "\4\0\4\55\1\u0168\33\55\1\u0168\17\55\24\0\1\55"+
    "\4\0\1\u0169\33\55\1\u0169\23\55\24\0\1\55\4\0"+
    "\12\55\1\u016a\45\55\24\0\1\55\4\0\1\u016b\33\55"+
    "\1\u016b\23\55\24\0\1\55\4\0\14\55\1\u016c\43\55"+
    "\24\0\1\55\4\0\10\55\1\u016d\33\55\1\u016d\13\55"+
    "\24\0\1\55\4\0\13\55\1\u016e\44\55\24\0\1\55"+
    "\4\0\23\55\1\u016f\27\55\1\u016f\4\55\24\0\1\55"+
    "\4\0\23\55\1\u0170\27\55\1\u0170\4\55\24\0\1\55"+
    "\4\0\22\55\1\u0171\27\55\1\u0171\5\55\24\0\1\55"+
    "\4\0\4\55\1\u0172\33\55\1\u0172\17\55\24\0\1\55"+
    "\4\0\1\55\1\u0173\33\55\1\u0173\22\55\24\0\1\55"+
    "\4\0\24\55\1\u0174\27\55\1\u0174\3\55\24\0\1\55"+
    "\4\0\21\55\1\u0175\27\55\1\u0176\6\55\24\0\1\55"+
    "\4\0\21\55\1\u0176\27\55\1\u0176\6\55\24\0\1\55"+
    "\4\0\23\55\1\u0177\27\55\1\u0177\4\55\24\0\1\55"+
    "\4\0\2\55\1\u0178\55\55\24\0\1\55\4\0\10\55"+
    "\1\u0179\33\55\1\u0179\13\55\24\0\1\55\4\0\17\55"+
    "\1\u017a\30\55\1\u017a\7\55\24\0\1\55\4\0\17\55"+
    "\1\u017b\30\55\1\u017b\7\55\24\0\1\55\4\0\24\55"+
    "\1\u017c\27\55\1\u017c\3\55\24\0\1\55\4\0\23\55"+
    "\1\u017d\27\55\1\u017d\4\55\24\0\1\55\4\0\1\u017e"+
    "\33\55\1\u017e\23\55\24\0\1\55\4\0\4\55\1\u017f"+
    "\33\55\1\u017f\17\55\24\0\1\55\4\0\10\55\1\u0180"+
    "\33\55\1\u0180\13\55\24\0\1\55\4\0\17\55\1\u0181"+
    "\40\55\24\0\1\55\4\0\15\55\1\u0182\42\55\24\0"+
    "\1\55\4\0\21\55\1\u0183\27\55\1\u0183\6\55\24\0"+
    "\1\55\4\0\3\55\1\u0184\33\55\1\u0184\20\55\24\0"+
    "\1\55\4\0\27\55\1\u0185\30\55\24\0\1\55\4\0"+
    "\10\55\1\u0186\47\55\24\0\1\55\4\0\21\55\1\u0187"+
    "\27\55\1\u0187\6\55\24\0\1\55\4\0\21\55\1\u0188"+
    "\27\55\1\u0188\6\55\24\0\1\55\4\0\4\55\1\u0189"+
    "\53\55\24\0\1\55\4\0\21\55\1\u018a\27\55\1\u018a"+
    "\6\55\24\0\1\55\4\0\23\55\1\u018b\27\55\1\u018b"+
    "\4\55\24\0\1\55\4\0\7\55\1\u018c\33\55\1\u018c"+
    "\14\55\24\0\1\55\4\0\21\55\1\u018d\27\55\1\u018d"+
    "\6\55\24\0\1\55\4\0\4\55\1\u018e\33\55\1\u018e"+
    "\17\55\24\0\1\55\4\0\21\55\1\u018f\27\55\1\u018f"+
    "\6\55\24\0\1\55\4\0\21\55\1\u0190\27\55\1\u0190"+
    "\6\55\24\0\1\55\4\0\14\55\1\u0191\43\55\24\0"+
    "\1\55\4\0\1\u0192\33\55\1\u0192\23\55\24\0\1\55"+
    "\4\0\30\55\1\u0193\26\55\1\u0193\24\0\1\55\4\0"+
    "\4\55\1\u0194\33\55\1\u0194\17\55\24\0\1\55\4\0"+
    "\21\55\1\u0195\36\55\24\0\1\55\4\0\21\55\1\u0196"+
    "\27\55\1\u0196\6\55\24\0\1\55\4\0\27\55\1\u0197"+
    "\30\55\24\0\1\55\4\0\3\55\1\u0198\33\55\1\u0198"+
    "\20\55\24\0\1\55\4\0\1\u0199\33\55\1\u0199\23\55"+
    "\24\0\1\55\4\0\14\55\1\u019a\43\55\24\0\1\55"+
    "\4\0\1\u019b\57\55\24\0\1\55\4\0\21\55\1\u019c"+
    "\27\55\1\u019c\6\55\24\0\1\55\4\0\1\55\1\u019d"+
    "\33\55\1\u019d\22\55\24\0\1\55\4\0\3\55\1\u019e"+
    "\54\55\24\0\1\55\4\0\17\55\1\u019f\30\55\1\u019f"+
    "\7\55\24\0\1\55\4\0\2\55\1\u01a0\33\55\1\u01a0"+
    "\21\55\24\0\1\55\4\0\4\55\1\u01a1\33\55\1\u01a1"+
    "\17\55\24\0\1\55\4\0\16\55\1\u01a2\30\55\1\u01a2"+
    "\10\55\24\0\1\55\4\0\22\55\1\u01a3\27\55\1\u01a3"+
    "\5\55\24\0\1\55\4\0\6\55\1\u01a4\51\55\24\0"+
    "\1\55\4\0\15\55\1\u01a5\30\55\1\u01a5\11\55\24\0"+
    "\1\55\4\0\24\55\1\u01a6\27\55\1\u01a6\3\55\24\0"+
    "\1\55\4\0\23\55\1\u01a7\27\55\1\u01a7\4\55\24\0"+
    "\1\55\4\0\6\55\1\u01a8\33\55\1\u01a8\15\55\24\0"+
    "\1\55\4\0\24\55\1\u01a9\27\55\1\u01a9\3\55\24\0"+
    "\1\55\4\0\4\55\1\u01aa\33\55\1\u01aa\17\55\24\0"+
    "\1\55\4\0\24\55\1\u01ab\33\55\24\0\1\55\4\0"+
    "\4\55\1\u01ac\33\55\1\u01ac\17\55\24\0\1\55\4\0"+
    "\16\55\1\u01ad\30\55\1\u01ad\10\55\24\0\1\55\4\0"+
    "\15\55\1\u01ae\42\55\24\0\1\55\4\0\31\55\1\u01af"+
    "\26\55\24\0\1\55\4\0\7\55\1\u01b0\33\55\1\u01b0"+
    "\14\55\24\0\1\55\4\0\15\55\1\u01b1\30\55\1\u01b1"+
    "\11\55\24\0\1\55\4\0\4\55\1\u01b2\53\55\24\0"+
    "\1\55\4\0\4\55\1\u01b3\33\55\1\u01b3\17\55\24\0"+
    "\1\55\4\0\3\55\1\u01b4\33\55\1\u01b4\20\55\24\0"+
    "\1\55\4\0\23\55\1\u01b5\27\55\1\u01b5\4\55\24\0"+
    "\1\55\4\0\15\55\1\u01b6\30\55\1\u01b6\11\55\24\0"+
    "\1\55\4\0\23\55\1\u01b7\27\55\1\u01b7\4\55\24\0"+
    "\1\55\4\0\10\55\1\u01b8\47\55\24\0\1\55\4\0"+
    "\21\55\1\u01b9\27\55\1\u01b9\6\55\24\0\1\55\4\0"+
    "\4\55\1\u01ba\33\55\1\u01ba\17\55\24\0\1\55\4\0"+
    "\15\55\1\u01bb\30\55\1\u01bb\11\55\24\0\1\55\4\0"+
    "\1\u01bc\33\55\1\u01bc\23\55\24\0\1\55\4\0\13\55"+
    "\1\u01bd\31\55\1\u01bd\12\55\24\0\1\55\4\0\21\55"+
    "\1\u01be\27\55\1\u01bf\6\55\24\0\1\55\4\0\21\55"+
    "\1\u01bf\27\55\1\u01bf\6\55\24\0\1\55\4\0\4\55"+
    "\1\u01c0\33\55\1\u01c0\17\55\24\0\1\55\4\0\7\55"+
    "\1\u01c1\50\55\24\0\1\55\4\0\15\55\1\u01c2\30\55"+
    "\1\u01c2\11\55\24\0\1\55\4\0\4\55\1\u01c3\33\55"+
    "\1\u01c3\17\55\24\0\1\55\4\0\23\55\1\u01c4\27\55"+
    "\1\u01c4\4\55\24\0\1\55\4\0\22\55\1\u01c5\27\55"+
    "\1\u01c5\5\55\24\0\1\55\4\0\22\55\1\u01c6\27\55"+
    "\1\u01c6\5\55\24\0\1\55\4\0\10\55\1\u01c7\33\55"+
    "\1\u01c7\13\55\24\0\1\55\4\0\6\55\1\u01c8\33\55"+
    "\1\u01c8\15\55\24\0\1\55\4\0\6\55\1\u01c9\51\55"+
    "\24\0\1\55\4\0\4\55\1\u01ca\33\55\1\u01ca\17\55"+
    "\24\0\1\55\4\0\10\55\1\u01cb\33\55\1\u01cb\13\55"+
    "\24\0\1\55\4\0\4\55\1\u01cc\33\55\1\u01cc\17\55"+
    "\24\0\1\55\4\0\1\u01cd\57\55\24\0\1\55\4\0"+
    "\23\55\1\u01ce\27\55\1\u01ce\4\55\24\0\1\55\4\0"+
    "\1\u01cf\57\55\24\0\1\55\4\0\22\55\1\u01d0\27\55"+
    "\1\u01d0\5\55\24\0\1\55\4\0\1\u01d1\33\55\1\u01d1"+
    "\23\55\24\0\1\55\4\0\23\55\1\u01d2\27\55\1\u01d2"+
    "\4\55\24\0\1\55\4\0\1\u01d3\33\55\1\u01d3\23\55"+
    "\24\0\1\55\4\0\21\55\1\u01d4\27\55\1\u01d4\6\55"+
    "\24\0\1\55\4\0\22\55\1\u01d5\35\55\24\0\1\55"+
    "\4\0\4\55\1\u01d6\33\55\1\u01d6\17\55\24\0\1\55"+
    "\4\0\17\55\1\u01d7\30\55\1\u01d7\7\55\24\0\1\55"+
    "\4\0\4\55\1\u01d8\33\55\1\u01d8\17\55\24\0\1\55"+
    "\4\0\22\55\1\u01d9\27\55\1\u01d9\5\55\24\0\1\55"+
    "\4\0\4\55\1\u01da\33\55\1\u01da\17\55\24\0\1\55"+
    "\4\0\2\55\1\u01db\55\55\24\0\1\55\4\0\10\55"+
    "\1\u01dc\33\55\1\u01dc\13\55\24\0\1\55\4\0\1\u01dd"+
    "\33\55\1\u01dd\23\55\24\0\1\55\4\0\16\55\1\u01de"+
    "\30\55\1\u01de\10\55\24\0\1\55\4\0\23\55\1\u01df"+
    "\27\55\1\u01df\4\55\24\0\1\55\4\0\21\55\1\u01e0"+
    "\27\55\1\u01e0\6\55\24\0\1\55\4\0\1\u01e1\33\55"+
    "\1\u01e1\23\55\24\0\1\55\4\0\4\55\1\u01e2\53\55"+
    "\24\0\1\55\4\0\4\55\1\u01e3\33\55\1\u01e3\17\55"+
    "\24\0\1\55\4\0\4\55\1\u01e4\33\55\1\u01e4\17\55"+
    "\24\0\1\55\4\0\14\55\1\u01e5\43\55\24\0\1\55"+
    "\4\0\22\55\1\u01e6\27\55\1\u01e6\5\55\24\0\1\55"+
    "\4\0\1\u01e7\57\55\24\0\1\55\4\0\24\55\1\u01e8"+
    "\27\55\1\u01e8\3\55\24\0\1\55\4\0\4\55\1\u01e9"+
    "\33\55\1\u01e9\17\55\24\0\1\55\4\0\2\55\1\u01ea"+
    "\33\55\1\u01ea\21\55\24\0\1\55\4\0\15\55\1\u01eb"+
    "\30\55\1\u01eb\11\55\24\0\1\55\4\0\4\55\1\u01ec"+
    "\33\55\1\u01ec\17\55\24\0\1\55\4\0\4\55\1\u01ed"+
    "\33\55\1\u01ed\17\55\24\0\1\55\4\0\2\55\1\u01ee"+
    "\55\55\24\0\1\55\4\0\1\u01ef\33\55\1\u01ef\23\55"+
    "\24\0\1\55\4\0\23\55\1\u01f0\27\55\1\u01f0\4\55"+
    "\24\0\1\55\4\0\22\55\1\u01f1\27\55\1\u01f1\5\55"+
    "\24\0\1\55\4\0\23\55\1\u01f2\27\55\1\u01f2\4\55"+
    "\24\0\1\55\4\0\1\u01f3\3\55\1\u01f4\33\55\1\u01f4"+
    "\17\55\24\0\1\55\4\0\4\55\1\u01f4\33\55\1\u01f4"+
    "\17\55\24\0\1\55\4\0\2\55\1\u01f5\33\55\1\u01f5"+
    "\21\55\24\0\1\55\4\0\10\55\1\u01f6\33\55\1\u01f6"+
    "\13\55\24\0\1\55\4\0\15\55\1\u01f7\30\55\1\u01f7"+
    "\11\55\24\0\1\55\4\0\15\55\1\u01f8\30\55\1\u01f8"+
    "\11\55\24\0\1\55\4\0\1\u01f9\33\55\1\u01f9\23\55"+
    "\24\0\1\55\4\0\3\55\1\u01fa\33\55\1\u01fa\20\55"+
    "\24\0\1\55\4\0\13\55\1\u01fb\44\55\24\0\1\55"+
    "\4\0\3\55\1\u01fc\54\55\24\0\1\55\4\0\4\55"+
    "\1\u01fd\33\55\1\u01fd\17\55\24\0\1\55\4\0\13\55"+
    "\1\u01fe\31\55\1\u01fe\12\55\24\0\1\55\4\0\30\55"+
    "\1\u01ff\26\55\1\u01ff\24\0\1\55\4\0\10\55\1\u0200"+
    "\47\55\24\0\1\55\4\0\15\55\1\u0201\30\55\1\u0201"+
    "\11\55\24\0\1\55\4\0\27\55\1\u0202\30\55\24\0"+
    "\1\55\4\0\4\55\1\u0203\33\55\1\u0203\17\55\24\0"+
    "\1\55\4\0\4\55\1\u0204\53\55\24\0\1\55\4\0"+
    "\2\55\1\u0205\33\55\1\u0205\21\55\24\0\1\55\4\0"+
    "\2\55\1\u0206\33\55\1\u0206\21\55\24\0\1\55\4\0"+
    "\10\55\1\u0207\33\55\1\u0207\13\55\24\0\1\55\4\0"+
    "\1\u0208\33\55\1\u0208\23\55\24\0\1\55\4\0\2\55"+
    "\1\u0209\33\55\1\u0209\21\55\24\0\1\55\4\0\21\55"+
    "\1\u020a\36\55\24\0\1\55\4\0\13\55\1\u020b\44\55"+
    "\24\0\1\55\4\0\23\55\1\u020c\27\55\1\u020c\4\55"+
    "\24\0\1\55\4\0\21\55\1\u020d\27\55\1\u020d\6\55"+
    "\24\0\1\55\4\0\23\55\1\u020e\34\55\24\0\1\55"+
    "\4\0\10\55\1\u020f\33\55\1\u020f\13\55\24\0\1\55"+
    "\4\0\33\55\1\u0210\24\55\24\0\1\55\4\0\4\55"+
    "\1\u0211\33\55\1\u0211\17\55\24\0\1\55\4\0\1\55"+
    "\1\u0212\56\55\24\0\1\55\4\0\3\55\1\u0213\33\55"+
    "\1\u0213\20\55\24\0\1\55\4\0\23\55\1\u0214\27\55"+
    "\1\u0214\4\55\24\0\1\55\4\0\25\55\1\u0215\27\55"+
    "\1\u0215\2\55\24\0\1\55\4\0\23\55\1\u0216\27\55"+
    "\1\u0216\4\55\24\0\1\55\4\0\13\55\1\u0217\44\55"+
    "\24\0\1\55\4\0\2\55\1\u0218\33\55\1\u0218\21\55"+
    "\24\0\1\55\4\0\25\55\1\u0219\32\55\24\0\1\55"+
    "\4\0\2\55\1\u021a\33\55\1\u021a\21\55\24\0\1\55"+
    "\4\0\23\55\1\u021b\27\55\1\u021b\4\55\24\0\1\55"+
    "\4\0\12\55\1\u021c\45\55\24\0\1\55\4\0\15\55"+
    "\1\u021d\30\55\1\u021d\11\55\24\0\1\55\4\0\21\55"+
    "\1\u021e\27\55\1\u021e\6\55\24\0\1\55\4\0\23\55"+
    "\1\u021f\27\55\1\u021f\4\55\24\0\1\55\4\0\4\55"+
    "\1\u0220\33\55\1\u0220\17\55\24\0\1\55\4\0\15\55"+
    "\1\u0221\30\55\1\u0221\11\55\24\0\1\55\4\0\3\55"+
    "\1\u0222\17\55\1\u0223\13\55\1\u0222\13\55\1\u0223\4\55"+
    "\24\0\1\55\4\0\13\55\1\u0224\44\55\24\0\1\55"+
    "\4\0\4\55\1\u0225\33\55\1\u0225\17\55\24\0\1\55"+
    "\4\0\4\55\1\u0226\33\55\1\u0226\17\55\24\0\1\55"+
    "\4\0\30\55\1\u0227\27\55\24\0\1\55\4\0\23\55"+
    "\1\u0228\27\55\1\u0228\4\55\24\0\1\55\4\0\4\55"+
    "\1\u0229\53\55\24\0\1\55\4\0\4\55\1\u022a\33\55"+
    "\1\u022a\17\55\24\0\1\55\4\0\23\55\1\u022b\27\55"+
    "\1\u022b\4\55\24\0\1\55\4\0\30\55\1\u022c\26\55"+
    "\1\u022c\24\0\1\55\4\0\10\55\1\u022d\33\55\1\u022d"+
    "\13\55\24\0\1\55\4\0\14\55\1\u022e\43\55\24\0"+
    "\1\55\4\0\23\55\1\u022f\27\55\1\u022f\4\55\24\0"+
    "\1\55\4\0\1\u0230\33\55\1\u0230\23\55\24\0\1\55"+
    "\4\0\10\55\1\u0231\33\55\1\u0231\13\55\24\0\1\55"+
    "\4\0\4\55\1\u0232\53\55\24\0\1\55\4\0\22\55"+
    "\1\u0233\27\55\1\u0233\5\55\24\0\1\55\4\0\16\55"+
    "\1\u0234\30\55\1\u0234\10\55\24\0\1\55\4\0\4\55"+
    "\1\u0235\33\55\1\u0235\17\55\24\0\1\55\4\0\23\55"+
    "\1\u0236\27\55\1\u0236\4\55\24\0\1\55\4\0\14\55"+
    "\1\u0237\43\55\24\0\1\55\4\0\15\55\1\u0238\30\55"+
    "\1\u0238\11\55\24\0\1\55\4\0\15\55\1\u0239\30\55"+
    "\1\u0239\11\55\24\0\1\55\4\0\4\55\1\u023a\33\55"+
    "\1\u023a\17\55\24\0\1\55\4\0\4\55\1\u023b\33\55"+
    "\1\u023b\17\55\24\0\1\55\4\0\23\55\1\u023c\27\55"+
    "\1\u023c\4\55\24\0\1\55\4\0\22\55\1\u023d\27\55"+
    "\1\u023d\5\55\24\0\1\55\4\0\23\55\1\u023e\27\55"+
    "\1\u023e\4\55\24\0\1\55\4\0\1\u023f\33\55\1\u023f"+
    "\23\55\24\0\1\55\4\0\14\55\1\u0240\43\55\24\0"+
    "\1\55\4\0\17\55\1\u0241\30\55\1\u0241\7\55\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[32266];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\5\11\1\1\1\11"+
    "\2\1\1\11\47\1\2\11\1\0\1\11\1\0\1\1"+
    "\1\0\1\1\6\11\117\1\1\11\1\0\142\1\1\0"+
    "\u0146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _SqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 156: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 157: break;
          case 3:
            { return MOD;
            }
          // fall through
          case 158: break;
          case 4:
            { return BITWISE_AND;
            }
          // fall through
          case 159: break;
          case 5:
            { return LP;
            }
          // fall through
          case 160: break;
          case 6:
            { return RP;
            }
          // fall through
          case 161: break;
          case 7:
            { return MULTIPLY;
            }
          // fall through
          case 162: break;
          case 8:
            { return PLUS;
            }
          // fall through
          case 163: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 164: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 165: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 166: break;
          case 12:
            { return DIVIDE;
            }
          // fall through
          case 167: break;
          case 13:
            { return DIGIT;
            }
          // fall through
          case 168: break;
          case 14:
            { return SEMI;
            }
          // fall through
          case 169: break;
          case 15:
            { return LT;
            }
          // fall through
          case 170: break;
          case 16:
            { return EQ;
            }
          // fall through
          case 171: break;
          case 17:
            { return GT;
            }
          // fall through
          case 172: break;
          case 18:
            { return ID;
            }
          // fall through
          case 173: break;
          case 19:
            { return E;
            }
          // fall through
          case 174: break;
          case 20:
            { return BITWISE_OR;
            }
          // fall through
          case 175: break;
          case 21:
            { return BITWISE_NOT;
            }
          // fall through
          case 176: break;
          case 22:
            { return NEQ;
            }
          // fall through
          case 177: break;
          case 23:
            { return STRING;
            }
          // fall through
          case 178: break;
          case 24:
            { return COMMENT;
            }
          // fall through
          case 179: break;
          case 25:
            { return SHIFT_LEFT;
            }
          // fall through
          case 180: break;
          case 26:
            { return LTE;
            }
          // fall through
          case 181: break;
          case 27:
            { return NEQ2;
            }
          // fall through
          case 182: break;
          case 28:
            { return EQ2;
            }
          // fall through
          case 183: break;
          case 29:
            { return GTE;
            }
          // fall through
          case 184: break;
          case 30:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 185: break;
          case 31:
            { return AS;
            }
          // fall through
          case 186: break;
          case 32:
            { return BY;
            }
          // fall through
          case 187: break;
          case 33:
            { return IF;
            }
          // fall through
          case 188: break;
          case 34:
            { return IN;
            }
          // fall through
          case 189: break;
          case 35:
            { return IS;
            }
          // fall through
          case 190: break;
          case 36:
            { return NO;
            }
          // fall through
          case 191: break;
          case 37:
            { return OF;
            }
          // fall through
          case 192: break;
          case 38:
            { return ON;
            }
          // fall through
          case 193: break;
          case 39:
            { return OR;
            }
          // fall through
          case 194: break;
          case 40:
            { return TO;
            }
          // fall through
          case 195: break;
          case 41:
            { return CONCAT;
            }
          // fall through
          case 196: break;
          case 42:
            { return ADD;
            }
          // fall through
          case 197: break;
          case 43:
            { return ALL;
            }
          // fall through
          case 198: break;
          case 44:
            { return AND;
            }
          // fall through
          case 199: break;
          case 45:
            { return ASC;
            }
          // fall through
          case 200: break;
          case 46:
            { return END;
            }
          // fall through
          case 201: break;
          case 47:
            { return FOR;
            }
          // fall through
          case 202: break;
          case 48:
            { return KEY;
            }
          // fall through
          case 203: break;
          case 49:
            { return NOT;
            }
          // fall through
          case 204: break;
          case 50:
            { return ROW;
            }
          // fall through
          case 205: break;
          case 51:
            { return SET;
            }
          // fall through
          case 206: break;
          case 52:
            { return CASE;
            }
          // fall through
          case 207: break;
          case 53:
            { return CAST;
            }
          // fall through
          case 208: break;
          case 54:
            { return DESC;
            }
          // fall through
          case 209: break;
          case 55:
            { return DROP;
            }
          // fall through
          case 210: break;
          case 56:
            { return EACH;
            }
          // fall through
          case 211: break;
          case 57:
            { return ELSE;
            }
          // fall through
          case 212: break;
          case 58:
            { return FAIL;
            }
          // fall through
          case 213: break;
          case 59:
            { return FROM;
            }
          // fall through
          case 214: break;
          case 60:
            { return GLOB;
            }
          // fall through
          case 215: break;
          case 61:
            { return INTO;
            }
          // fall through
          case 216: break;
          case 62:
            { return JOIN;
            }
          // fall through
          case 217: break;
          case 63:
            { return LEFT;
            }
          // fall through
          case 218: break;
          case 64:
            { return LIKE;
            }
          // fall through
          case 219: break;
          case 65:
            { return NULL;
            }
          // fall through
          case 220: break;
          case 66:
            { return PLAN;
            }
          // fall through
          case 221: break;
          case 67:
            { return TEMP;
            }
          // fall through
          case 222: break;
          case 68:
            { return THEN;
            }
          // fall through
          case 223: break;
          case 69:
            { return TRUE;
            }
          // fall through
          case 224: break;
          case 70:
            { return VIEW;
            }
          // fall through
          case 225: break;
          case 71:
            { return WHEN;
            }
          // fall through
          case 226: break;
          case 72:
            { return WITH;
            }
          // fall through
          case 227: break;
          case 73:
            { return JAVADOC;
            }
          // fall through
          case 228: break;
          case 74:
            { return ABORT;
            }
          // fall through
          case 229: break;
          case 75:
            { return AFTER;
            }
          // fall through
          case 230: break;
          case 76:
            { return ALTER;
            }
          // fall through
          case 231: break;
          case 77:
            { return BEGIN;
            }
          // fall through
          case 232: break;
          case 78:
            { return CHECK;
            }
          // fall through
          case 233: break;
          case 79:
            { return CROSS;
            }
          // fall through
          case 234: break;
          case 80:
            { return FALSE;
            }
          // fall through
          case 235: break;
          case 81:
            { return GROUP;
            }
          // fall through
          case 236: break;
          case 82:
            { return INDEX;
            }
          // fall through
          case 237: break;
          case 83:
            { return INNER;
            }
          // fall through
          case 238: break;
          case 84:
            { return LIMIT;
            }
          // fall through
          case 239: break;
          case 85:
            { return MATCH;
            }
          // fall through
          case 240: break;
          case 86:
            { return ORDER;
            }
          // fall through
          case 241: break;
          case 87:
            { return OUTER;
            }
          // fall through
          case 242: break;
          case 88:
            { return QUERY;
            }
          // fall through
          case 243: break;
          case 89:
            { return RAISE;
            }
          // fall through
          case 244: break;
          case 90:
            { return ROWID;
            }
          // fall through
          case 245: break;
          case 91:
            { return TABLE;
            }
          // fall through
          case 246: break;
          case 92:
            { return UNION;
            }
          // fall through
          case 247: break;
          case 93:
            { return USING;
            }
          // fall through
          case 248: break;
          case 94:
            { return WHERE;
            }
          // fall through
          case 249: break;
          case 95:
            { return ACTION;
            }
          // fall through
          case 250: break;
          case 96:
            { return ATTACH;
            }
          // fall through
          case 251: break;
          case 97:
            { return BEFORE;
            }
          // fall through
          case 252: break;
          case 98:
            { return COLUMN;
            }
          // fall through
          case 253: break;
          case 99:
            { return COMMIT;
            }
          // fall through
          case 254: break;
          case 100:
            { return CREATE;
            }
          // fall through
          case 255: break;
          case 101:
            { return DELETE;
            }
          // fall through
          case 256: break;
          case 102:
            { return DETACH;
            }
          // fall through
          case 257: break;
          case 103:
            { return ESCAPE;
            }
          // fall through
          case 258: break;
          case 104:
            { return EXCEPT;
            }
          // fall through
          case 259: break;
          case 105:
            { return EXISTS;
            }
          // fall through
          case 260: break;
          case 106:
            { return HAVING;
            }
          // fall through
          case 261: break;
          case 107:
            { return IGNORE;
            }
          // fall through
          case 262: break;
          case 108:
            { return INSERT;
            }
          // fall through
          case 263: break;
          case 109:
            { return OFFSET;
            }
          // fall through
          case 264: break;
          case 110:
            { return PRAGMA;
            }
          // fall through
          case 265: break;
          case 111:
            { return REGEXP;
            }
          // fall through
          case 266: break;
          case 112:
            { return RENAME;
            }
          // fall through
          case 267: break;
          case 113:
            { return SELECT;
            }
          // fall through
          case 268: break;
          case 114:
            { return UNIQUE;
            }
          // fall through
          case 269: break;
          case 115:
            { return UPDATE;
            }
          // fall through
          case 270: break;
          case 116:
            { return VACUUM;
            }
          // fall through
          case 271: break;
          case 117:
            { return VALUES;
            }
          // fall through
          case 272: break;
          case 118:
            { return ANALYZE;
            }
          // fall through
          case 273: break;
          case 119:
            { return BETWEEN;
            }
          // fall through
          case 274: break;
          case 120:
            { return CASCADE;
            }
          // fall through
          case 275: break;
          case 121:
            { return COLLATE;
            }
          // fall through
          case 276: break;
          case 122:
            { return DEFAULT;
            }
          // fall through
          case 277: break;
          case 123:
            { return EXPLAIN;
            }
          // fall through
          case 278: break;
          case 124:
            { return FOREIGN;
            }
          // fall through
          case 279: break;
          case 125:
            { return INDEXED;
            }
          // fall through
          case 280: break;
          case 126:
            { return INSTEAD;
            }
          // fall through
          case 281: break;
          case 127:
            { return NATURAL;
            }
          // fall through
          case 282: break;
          case 128:
            { return PRIMARY;
            }
          // fall through
          case 283: break;
          case 129:
            { return REINDEX;
            }
          // fall through
          case 284: break;
          case 130:
            { return RELEASE;
            }
          // fall through
          case 285: break;
          case 131:
            { return REPLACE;
            }
          // fall through
          case 286: break;
          case 132:
            { return TRIGGER;
            }
          // fall through
          case 287: break;
          case 133:
            { return VIRTUAL;
            }
          // fall through
          case 288: break;
          case 134:
            { return WITHOUT;
            }
          // fall through
          case 289: break;
          case 135:
            { return CONFLICT;
            }
          // fall through
          case 290: break;
          case 136:
            { return DATABASE;
            }
          // fall through
          case 291: break;
          case 137:
            { return DEFERRED;
            }
          // fall through
          case 292: break;
          case 138:
            { return DISTINCT;
            }
          // fall through
          case 293: break;
          case 139:
            { return RESTRICT;
            }
          // fall through
          case 294: break;
          case 140:
            { return ROLLBACK;
            }
          // fall through
          case 295: break;
          case 141:
            { return EXCLUSIVE;
            }
          // fall through
          case 296: break;
          case 142:
            { return IMMEDIATE;
            }
          // fall through
          case 297: break;
          case 143:
            { return INITIALLY;
            }
          // fall through
          case 298: break;
          case 144:
            { return INTERSECT;
            }
          // fall through
          case 299: break;
          case 145:
            { return RECURSIVE;
            }
          // fall through
          case 300: break;
          case 146:
            { return SAVEPOINT;
            }
          // fall through
          case 301: break;
          case 147:
            { return TEMPORARY;
            }
          // fall through
          case 302: break;
          case 148:
            { return CONSTRAINT;
            }
          // fall through
          case 303: break;
          case 149:
            { return DEFERRABLE;
            }
          // fall through
          case 304: break;
          case 150:
            { return REFERENCES_WORD;
            }
          // fall through
          case 305: break;
          case 151:
            { return TRANSACTION;
            }
          // fall through
          case 306: break;
          case 152:
            { return CURRENT_DATE;
            }
          // fall through
          case 307: break;
          case 153:
            { return CURRENT_TIME;
            }
          // fall through
          case 308: break;
          case 154:
            { return AUTOINCREMENT;
            }
          // fall through
          case 309: break;
          case 155:
            { return CURRENT_TIMESTAMP;
            }
          // fall through
          case 310: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
