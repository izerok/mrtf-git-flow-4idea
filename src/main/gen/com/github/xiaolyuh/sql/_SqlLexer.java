// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _SqlLexer.flex

package com.github.xiaolyuh.sql;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.xiaolyuh.sql.psi.SqlTypes.*;


public class _SqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\2\0\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\12\21\1\0\1\22\1\23"+
    "\1\24\1\25\2\0\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\0\1\60"+
    "\1\0\1\61\1\60\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\37\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\46\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\57\1\0\1\111\1\0"+
    "\1\112\6\0\1\3\32\0\1\1\u01df\0\1\1\177\0"+
    "\13\1\35\0\2\3\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\377\0\u0100\113";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\4\22\1\23\40\22\1\24"+
    "\1\25\1\26\1\0\1\27\1\0\1\30\1\0\1\15"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\6\22\1\37"+
    "\3\22\1\40\33\22\1\41\2\22\1\42\1\43\10\22"+
    "\1\44\2\22\1\45\1\46\1\47\17\22\1\50\14\22"+
    "\1\51\1\0\2\22\1\52\1\22\1\53\2\22\1\54"+
    "\1\55\31\22\1\56\7\22\1\57\16\22\1\60\5\22"+
    "\1\61\22\22\1\62\2\22\1\63\17\22\1\0\13\22"+
    "\1\64\1\65\16\22\1\66\2\22\1\67\1\70\1\71"+
    "\5\22\1\72\2\22\1\73\1\74\12\22\1\75\1\76"+
    "\1\77\1\100\3\22\1\101\3\22\1\102\21\22\1\103"+
    "\1\104\2\22\1\105\6\22\1\106\1\22\1\107\1\22"+
    "\1\110\1\111\1\112\1\22\1\113\1\114\4\22\1\115"+
    "\2\22\1\116\6\22\1\117\15\22\1\120\1\22\1\121"+
    "\3\22\1\122\1\22\1\123\3\22\1\124\1\125\2\22"+
    "\1\126\1\127\2\22\1\130\1\131\11\22\1\132\2\22"+
    "\1\133\3\22\1\134\2\22\1\135\3\22\1\136\1\22"+
    "\1\137\1\22\1\140\1\22\1\141\3\22\1\142\1\143"+
    "\2\22\1\144\5\22\1\145\1\146\1\22\1\147\1\150"+
    "\1\22\1\151\2\22\1\152\1\153\3\22\1\154\3\22"+
    "\1\155\1\156\3\22\1\157\2\22\1\160\4\22\1\161"+
    "\3\22\1\162\1\163\1\164\1\165\2\22\1\166\1\22"+
    "\1\167\1\170\1\171\4\22\1\172\4\22\1\173\1\174"+
    "\1\22\1\175\1\22\1\176\1\22\1\177\1\200\2\22"+
    "\1\201\1\202\1\203\5\22\1\204\1\205\1\206\1\22"+
    "\1\207\2\22\1\210\1\22\1\211\1\212\6\22\1\213"+
    "\1\214\10\22\1\215\1\216\1\217\1\220\1\221\1\22"+
    "\1\222\1\223\2\22\1\224\2\22\1\225\1\226\4\22"+
    "\1\227\1\22\1\230\1\231\1\232\4\22\1\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\114\0\114\0\u017c"+
    "\0\114\0\114\0\114\0\114\0\114\0\u01c8\0\114\0\u0214"+
    "\0\u0260\0\114\0\u02ac\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688"+
    "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8"+
    "\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc\0\u0b48"+
    "\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8"+
    "\0\u0df4\0\u0e40\0\u0e8c\0\114\0\114\0\u0130\0\114\0\u017c"+
    "\0\u0ed8\0\u0f24\0\u0f70\0\114\0\114\0\114\0\114\0\114"+
    "\0\114\0\u0fbc\0\u1008\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184"+
    "\0\u11d0\0\u121c\0\u1268\0\u0a64\0\u12b4\0\u1300\0\u134c\0\u1398"+
    "\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560\0\u15ac\0\u15f8"+
    "\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774\0\u17c0\0\u180c\0\u1858"+
    "\0\u18a4\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u0a64"+
    "\0\u1ab8\0\u1b04\0\u1b50\0\u0a64\0\u1b9c\0\u1be8\0\u1c34\0\u1c80"+
    "\0\u1ccc\0\u1d18\0\u1d64\0\u1db0\0\u1dfc\0\u1e48\0\u1dfc\0\u1e94"+
    "\0\u0a64\0\u1ee0\0\u1f2c\0\u1ee0\0\u1f78\0\u1fc4\0\u2010\0\u205c"+
    "\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc"+
    "\0\u2308\0\u0a64\0\u2354\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0"+
    "\0\u251c\0\u2568\0\u25b4\0\u2600\0\u264c\0\u2698\0\114\0\u26e4"+
    "\0\u2730\0\u277c\0\u0a64\0\u27c8\0\u0a64\0\u2814\0\u2860\0\u0a64"+
    "\0\u0a64\0\u28ac\0\u28f8\0\u2944\0\u2990\0\u29dc\0\u2a28\0\u2a74"+
    "\0\u2ac0\0\u2b0c\0\u2b58\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4"+
    "\0\u2d20\0\u2d6c\0\u2db8\0\u2e04\0\u2e50\0\u2e9c\0\u2ee8\0\u2f34"+
    "\0\u2f80\0\u2fcc\0\u0a64\0\u3018\0\u3064\0\u30b0\0\u30fc\0\u3148"+
    "\0\u3194\0\u31e0\0\u322c\0\u3278\0\u32c4\0\u3310\0\u335c\0\u33a8"+
    "\0\u33f4\0\u3440\0\u348c\0\u34d8\0\u3524\0\u3570\0\u35bc\0\u3608"+
    "\0\u3654\0\u0a64\0\u36a0\0\u36ec\0\u3738\0\u3784\0\u37d0\0\u0a64"+
    "\0\u381c\0\u3868\0\u38b4\0\u3900\0\u394c\0\u3998\0\u39e4\0\u3a30"+
    "\0\u3a7c\0\u3ac8\0\u3b14\0\u3b60\0\u3bac\0\u3bf8\0\u3c44\0\u3c90"+
    "\0\u3cdc\0\u3d28\0\u3d74\0\u3dc0\0\u3e0c\0\u0a64\0\u3e58\0\u3ea4"+
    "\0\u3ef0\0\u3f3c\0\u3f88\0\u3fd4\0\u4020\0\u406c\0\u40b8\0\u4104"+
    "\0\u4150\0\u419c\0\u41e8\0\u4234\0\u4280\0\u42cc\0\u4318\0\u4364"+
    "\0\u43b0\0\u43fc\0\u4448\0\u4494\0\u44e0\0\u452c\0\u4578\0\u45c4"+
    "\0\u4610\0\u0a64\0\u0a64\0\u465c\0\u46a8\0\u46f4\0\u4740\0\u478c"+
    "\0\u47d8\0\u4824\0\u4870\0\u48bc\0\u4908\0\u4954\0\u49a0\0\u49ec"+
    "\0\u4a38\0\u0a64\0\u4a84\0\u4ad0\0\u0a64\0\u0a64\0\u0a64\0\u4b1c"+
    "\0\u4b68\0\u4bb4\0\u4c00\0\u4c4c\0\u0a64\0\u4c98\0\u4ce4\0\u0a64"+
    "\0\u0a64\0\u4d30\0\u4d7c\0\u4dc8\0\u4e14\0\u4e60\0\u4eac\0\u4ef8"+
    "\0\u4f44\0\u4f90\0\u4fdc\0\u0a64\0\u0a64\0\u0a64\0\u0a64\0\u5028"+
    "\0\u5074\0\u50c0\0\u0a64\0\u510c\0\u5158\0\u51a4\0\u0a64\0\u51f0"+
    "\0\u523c\0\u5288\0\u52d4\0\u5320\0\u536c\0\u53b8\0\u5404\0\u5450"+
    "\0\u549c\0\u54e8\0\u5534\0\u5580\0\u55cc\0\u5618\0\u5664\0\u56b0"+
    "\0\u56fc\0\u0a64\0\u5748\0\u5794\0\u0a64\0\u57e0\0\u582c\0\u5878"+
    "\0\u58c4\0\u5910\0\u595c\0\u0a64\0\u59a8\0\u0a64\0\u59f4\0\u5a40"+
    "\0\u26e4\0\u0a64\0\u5a8c\0\u0a64\0\u0a64\0\u5ad8\0\u5b24\0\u5b70"+
    "\0\u5bbc\0\u0a64\0\u5c08\0\u5c54\0\u0a64\0\u5ca0\0\u5cec\0\u5d38"+
    "\0\u5d84\0\u5dd0\0\u5e1c\0\u0a64\0\u5e68\0\u5eb4\0\u5f00\0\u5f4c"+
    "\0\u5f98\0\u5fe4\0\u6030\0\u607c\0\u60c8\0\u6114\0\u6160\0\u61ac"+
    "\0\u61f8\0\u0a64\0\u6244\0\u0a64\0\u6290\0\u62dc\0\u6328\0\u6374"+
    "\0\u63c0\0\u0a64\0\u640c\0\u6458\0\u64a4\0\u0a64\0\u0a64\0\u64f0"+
    "\0\u653c\0\u0a64\0\u0a64\0\u6588\0\u65d4\0\u0a64\0\u0a64\0\u6620"+
    "\0\u666c\0\u66b8\0\u6704\0\u6750\0\u679c\0\u67e8\0\u6834\0\u6880"+
    "\0\u0a64\0\u68cc\0\u6918\0\u0a64\0\u6964\0\u69b0\0\u69fc\0\u0a64"+
    "\0\u6a48\0\u6a94\0\u0a64\0\u6ae0\0\u6b2c\0\u6b78\0\u0a64\0\u6bc4"+
    "\0\u0a64\0\u6c10\0\u0a64\0\u6c5c\0\u0a64\0\u6ca8\0\u6cf4\0\u6d40"+
    "\0\u0a64\0\u0a64\0\u6d8c\0\u6dd8\0\u0a64\0\u6e24\0\u6e70\0\u6ebc"+
    "\0\u6f08\0\u6f54\0\u0a64\0\u0a64\0\u6fa0\0\u0a64\0\u0a64\0\u6fec"+
    "\0\u0a64\0\u7038\0\u7084\0\u0a64\0\u0a64\0\u70d0\0\u711c\0\u7168"+
    "\0\u0a64\0\u71b4\0\u7200\0\u724c\0\u0a64\0\u0a64\0\u7298\0\u72e4"+
    "\0\u7330\0\u0a64\0\u737c\0\u73c8\0\u0a64\0\u7414\0\u7460\0\u74ac"+
    "\0\u74f8\0\u0a64\0\u7544\0\u7590\0\u75dc\0\u0a64\0\u0a64\0\u0a64"+
    "\0\u0a64\0\u7628\0\u7674\0\u0a64\0\u76c0\0\u0a64\0\u0a64\0\u0a64"+
    "\0\u770c\0\u7758\0\u77a4\0\u77f0\0\u0a64\0\u783c\0\u7888\0\u78d4"+
    "\0\u7920\0\u0a64\0\u0a64\0\u796c\0\u0a64\0\u79b8\0\u0a64\0\u7a04"+
    "\0\u0a64\0\u0a64\0\u7a50\0\u7a9c\0\u0a64\0\u0a64\0\u0a64\0\u7ae8"+
    "\0\u7b34\0\u7b80\0\u7bcc\0\u7c18\0\u0a64\0\u0a64\0\u0a64\0\u7c64"+
    "\0\u0a64\0\u7cb0\0\u7cfc\0\u0a64\0\u7d48\0\u0a64\0\u0a64\0\u7d94"+
    "\0\u7de0\0\u7e2c\0\u7e78\0\u7ec4\0\u7f10\0\u0a64\0\u0a64\0\u7f5c"+
    "\0\u7fa8\0\u7ff4\0\u8040\0\u808c\0\u80d8\0\u8124\0\u8170\0\u0a64"+
    "\0\u0a64\0\u0a64\0\u0a64\0\u0a64\0\u81bc\0\u0a64\0\u0a64\0\u8208"+
    "\0\u8254\0\u0a64\0\u82a0\0\u82ec\0\u0a64\0\u0a64\0\u8338\0\u8384"+
    "\0\u83d0\0\u841c\0\u0a64\0\u8468\0\u0a64\0\u84b4\0\u0a64\0\u8500"+
    "\0\u854c\0\u8598\0\u85e4\0\u0a64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\5\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\2\55\1\64\1\40\1\65\1\55\1\66"+
    "\1\67\1\45\1\70\1\50\1\71\1\52\1\72\1\54"+
    "\2\55\1\73\1\74\1\2\115\0\3\3\134\0\1\75"+
    "\67\0\5\76\1\77\106\76\10\100\1\77\103\100\16\0"+
    "\1\101\110\0\1\102\117\0\1\103\1\0\1\21\4\0"+
    "\63\55\26\0\1\104\1\105\1\106\112\0\1\107\113\0"+
    "\1\110\1\111\107\0\1\55\4\0\1\55\1\112\1\113"+
    "\1\114\1\55\1\115\5\55\1\116\1\55\1\117\4\55"+
    "\1\120\1\121\1\122\21\55\1\116\1\55\1\117\3\55"+
    "\1\120\1\121\1\122\4\55\24\0\1\55\4\0\4\55"+
    "\1\123\23\55\1\124\7\55\1\125\21\55\1\124\24\0"+
    "\1\55\4\0\1\126\6\55\1\127\6\55\1\130\2\55"+
    "\1\131\2\55\1\132\7\55\1\133\6\55\1\127\4\55"+
    "\1\134\1\135\1\55\1\131\2\55\1\132\4\55\24\0"+
    "\1\55\4\0\1\136\3\55\1\137\3\55\1\140\10\55"+
    "\1\141\12\55\1\136\3\55\1\142\3\55\1\140\6\55"+
    "\1\141\7\55\24\0\1\55\4\0\1\143\12\55\1\144"+
    "\1\55\1\145\4\55\1\146\4\55\1\147\20\55\1\145"+
    "\10\55\1\150\1\55\24\0\1\55\4\0\1\151\15\55"+
    "\1\152\2\55\1\153\12\55\1\154\14\55\1\152\1\55"+
    "\1\153\7\55\24\0\1\55\4\0\13\55\1\155\5\55"+
    "\1\156\41\55\24\0\1\55\4\0\1\157\62\55\24\0"+
    "\1\55\4\0\5\55\1\160\1\161\5\55\1\162\1\163"+
    "\4\55\1\164\16\55\1\160\5\55\1\162\1\165\3\55"+
    "\1\164\6\55\24\0\1\55\4\0\16\55\1\166\32\55"+
    "\1\166\11\55\24\0\1\55\4\0\4\55\1\167\33\55"+
    "\1\167\22\55\24\0\1\55\4\0\4\55\1\170\3\55"+
    "\1\171\27\55\1\170\3\55\1\172\16\55\24\0\1\55"+
    "\4\0\1\173\62\55\24\0\1\55\4\0\1\174\15\55"+
    "\1\175\5\55\1\176\24\55\1\177\4\55\1\176\4\55"+
    "\24\0\1\55\4\0\5\55\1\200\7\55\1\201\3\55"+
    "\1\202\2\55\1\203\14\55\1\200\6\55\1\201\2\55"+
    "\1\204\2\55\1\203\4\55\24\0\1\55\4\0\13\55"+
    "\1\205\5\55\1\206\24\55\1\205\4\55\1\206\7\55"+
    "\24\0\1\55\4\0\24\55\1\207\31\55\1\207\4\55"+
    "\24\0\1\55\4\0\1\210\3\55\1\211\11\55\1\212"+
    "\21\55\1\213\10\55\1\214\11\55\24\0\1\55\4\0"+
    "\1\215\3\55\1\216\27\55\1\215\3\55\1\216\22\55"+
    "\24\0\1\55\4\0\1\217\3\55\1\220\2\55\1\221"+
    "\6\55\1\222\2\55\1\223\12\55\1\217\3\55\1\220"+
    "\10\55\1\222\1\55\1\224\7\55\24\0\1\55\4\0"+
    "\15\55\1\225\1\55\1\226\2\55\1\227\25\55\1\225"+
    "\1\55\1\226\1\55\1\227\6\55\24\0\1\55\4\0"+
    "\1\230\7\55\1\231\23\55\1\232\7\55\1\233\16\55"+
    "\24\0\1\55\4\0\7\55\1\234\1\235\32\55\1\234"+
    "\1\235\16\55\24\0\1\55\4\0\63\55\24\0\1\55"+
    "\4\0\13\55\1\116\1\55\1\117\4\55\1\120\1\121"+
    "\1\122\21\55\1\116\1\55\1\117\3\55\1\120\1\121"+
    "\1\122\4\55\24\0\1\55\4\0\4\55\1\125\23\55"+
    "\1\124\7\55\1\125\21\55\1\124\24\0\1\55\4\0"+
    "\1\133\6\55\1\127\6\55\1\236\2\55\1\131\2\55"+
    "\1\132\7\55\1\133\6\55\1\127\4\55\1\134\1\135"+
    "\1\55\1\131\2\55\1\132\4\55\24\0\1\55\4\0"+
    "\1\136\3\55\1\142\3\55\1\140\10\55\1\141\12\55"+
    "\1\136\3\55\1\142\3\55\1\140\6\55\1\141\7\55"+
    "\24\0\1\55\4\0\15\55\1\145\11\55\1\150\20\55"+
    "\1\145\10\55\1\150\1\55\24\0\1\55\4\0\1\154"+
    "\15\55\1\152\2\55\1\153\12\55\1\154\14\55\1\152"+
    "\1\55\1\153\7\55\24\0\1\55\4\0\5\55\1\160"+
    "\6\55\1\162\1\165\4\55\1\164\16\55\1\160\5\55"+
    "\1\162\1\165\3\55\1\164\6\55\24\0\1\55\4\0"+
    "\4\55\1\170\3\55\1\172\27\55\1\170\3\55\1\172"+
    "\16\55\24\0\1\55\4\0\16\55\1\177\5\55\1\176"+
    "\24\55\1\177\4\55\1\176\4\55\24\0\1\55\4\0"+
    "\5\55\1\200\7\55\1\201\3\55\1\204\2\55\1\203"+
    "\14\55\1\200\6\55\1\201\2\55\1\204\2\55\1\203"+
    "\4\55\24\0\1\55\4\0\4\55\1\213\11\55\1\214"+
    "\21\55\1\213\10\55\1\214\11\55\24\0\1\55\4\0"+
    "\1\217\3\55\1\220\11\55\1\222\2\55\1\224\12\55"+
    "\1\217\3\55\1\220\10\55\1\222\1\55\1\224\7\55"+
    "\24\0\1\55\4\0\1\232\7\55\1\233\23\55\1\232"+
    "\7\55\1\233\16\55\114\0\1\237\2\0\2\101\2\0"+
    "\107\101\14\0\1\240\121\0\1\103\113\0\1\55\4\0"+
    "\16\55\1\241\44\55\24\0\1\55\4\0\23\55\1\242"+
    "\37\55\24\0\1\55\4\0\3\55\1\243\57\55\24\0"+
    "\1\55\4\0\23\55\1\244\37\55\24\0\1\55\4\0"+
    "\13\55\1\245\7\55\1\246\22\55\1\245\6\55\1\246"+
    "\5\55\24\0\1\55\4\0\1\247\2\55\1\250\30\55"+
    "\1\247\2\55\1\250\23\55\24\0\1\55\4\0\2\55"+
    "\1\251\33\55\1\251\24\55\24\0\1\55\4\0\23\55"+
    "\1\252\31\55\1\252\5\55\24\0\1\55\4\0\23\55"+
    "\1\253\31\55\1\253\5\55\24\0\1\55\4\0\5\55"+
    "\1\254\1\255\14\55\1\256\16\55\1\255\20\55\24\0"+
    "\1\55\4\0\6\55\1\255\33\55\1\255\20\55\24\0"+
    "\1\55\4\0\22\55\1\257\31\55\1\260\6\55\24\0"+
    "\1\55\4\0\4\55\1\261\33\55\1\261\22\55\24\0"+
    "\1\55\4\0\13\55\1\262\1\263\1\264\30\55\1\262"+
    "\1\263\1\265\12\55\24\0\1\55\4\0\4\55\1\266"+
    "\11\55\1\267\21\55\1\266\10\55\1\267\11\55\24\0"+
    "\1\55\4\0\21\55\1\270\31\55\1\270\7\55\24\0"+
    "\1\55\4\0\22\55\1\260\31\55\1\260\6\55\24\0"+
    "\1\55\4\0\15\55\1\265\32\55\1\265\12\55\24\0"+
    "\1\55\4\0\13\55\1\262\1\263\31\55\1\262\1\263"+
    "\13\55\24\0\1\55\4\0\23\55\1\271\31\55\1\271"+
    "\5\55\24\0\1\55\4\0\5\55\1\272\5\55\1\273"+
    "\6\55\1\274\1\275\15\55\1\276\4\55\1\273\5\55"+
    "\1\274\6\55\24\0\1\55\4\0\22\55\1\277\31\55"+
    "\1\277\6\55\24\0\1\55\4\0\16\55\1\300\32\55"+
    "\1\300\11\55\24\0\1\55\4\0\5\55\1\276\5\55"+
    "\1\273\6\55\1\274\16\55\1\276\4\55\1\273\5\55"+
    "\1\274\6\55\24\0\1\55\4\0\2\55\1\301\60\55"+
    "\24\0\1\55\4\0\22\55\1\302\40\55\24\0\1\55"+
    "\4\0\3\55\1\303\33\55\1\303\23\55\24\0\1\55"+
    "\4\0\2\55\1\304\60\55\24\0\1\55\4\0\2\55"+
    "\1\305\5\55\1\306\6\55\1\307\16\55\1\310\5\55"+
    "\1\306\5\55\1\307\10\55\24\0\1\55\4\0\2\55"+
    "\1\310\5\55\1\306\6\55\1\307\16\55\1\310\5\55"+
    "\1\306\5\55\1\307\10\55\24\0\1\55\4\0\10\55"+
    "\1\311\2\55\1\312\32\55\1\312\14\55\24\0\1\55"+
    "\4\0\21\55\1\313\31\55\1\313\7\55\24\0\1\55"+
    "\4\0\16\55\1\314\32\55\1\314\11\55\24\0\1\55"+
    "\4\0\13\55\1\312\32\55\1\312\14\55\24\0\1\55"+
    "\4\0\16\55\1\315\44\55\24\0\1\55\4\0\16\55"+
    "\1\316\44\55\24\0\1\55\4\0\25\55\1\317\35\55"+
    "\24\0\1\55\4\0\15\55\1\320\45\55\24\0\1\55"+
    "\4\0\14\55\1\321\32\55\1\321\13\55\24\0\1\55"+
    "\4\0\3\55\1\322\4\55\1\323\4\55\1\324\4\55"+
    "\1\325\1\326\13\55\1\322\10\55\1\324\3\55\1\327"+
    "\1\330\5\55\24\0\1\55\4\0\3\55\1\322\11\55"+
    "\1\324\4\55\1\327\1\330\13\55\1\322\10\55\1\324"+
    "\3\55\1\327\1\330\5\55\24\0\1\55\4\0\10\55"+
    "\1\331\33\55\1\331\16\55\24\0\1\55\4\0\30\55"+
    "\1\332\31\55\1\332\24\0\1\55\4\0\5\55\1\333"+
    "\33\55\1\333\21\55\24\0\1\55\4\0\12\55\1\334"+
    "\1\55\1\335\32\55\1\335\13\55\24\0\1\55\4\0"+
    "\14\55\1\335\32\55\1\335\13\55\24\0\1\55\4\0"+
    "\23\55\1\336\37\55\24\0\1\55\4\0\23\55\1\337"+
    "\37\55\24\0\1\55\4\0\23\55\1\340\31\55\1\340"+
    "\5\55\24\0\1\55\4\0\13\55\1\341\32\55\1\341"+
    "\14\55\24\0\1\55\4\0\5\55\1\342\33\55\1\342"+
    "\21\55\24\0\1\55\4\0\3\55\1\343\33\55\1\343"+
    "\23\55\24\0\1\55\4\0\23\55\1\344\31\55\1\344"+
    "\5\55\24\0\1\55\4\0\1\345\33\55\1\345\26\55"+
    "\24\0\1\55\4\0\1\346\7\55\1\347\23\55\1\346"+
    "\7\55\1\347\16\55\24\0\1\55\4\0\4\55\1\350"+
    "\33\55\1\350\22\55\24\0\1\55\4\0\10\55\1\351"+
    "\52\55\24\0\1\55\4\0\2\55\1\352\2\55\1\353"+
    "\1\354\1\55\1\355\2\55\1\356\1\55\1\357\1\55"+
    "\1\360\2\55\1\361\16\55\1\353\2\55\1\355\1\55"+
    "\1\356\1\55\1\357\3\55\1\361\6\55\24\0\1\55"+
    "\4\0\13\55\1\362\12\55\1\363\17\55\1\362\14\55"+
    "\24\0\1\55\4\0\5\55\1\353\2\55\1\355\2\55"+
    "\1\356\1\55\1\357\4\55\1\361\16\55\1\353\2\55"+
    "\1\355\1\55\1\356\1\55\1\357\3\55\1\361\6\55"+
    "\24\0\1\55\4\0\13\55\1\362\32\55\1\362\14\55"+
    "\24\0\1\55\4\0\25\55\1\364\31\55\1\364\3\55"+
    "\24\0\1\55\4\0\13\55\1\365\7\55\1\366\22\55"+
    "\1\365\6\55\1\366\5\55\24\0\1\55\4\0\1\55"+
    "\1\367\33\55\1\367\25\55\24\0\1\55\4\0\14\55"+
    "\1\370\32\55\1\370\13\55\24\0\1\55\4\0\4\55"+
    "\1\371\56\55\24\0\1\55\4\0\1\372\7\55\1\373"+
    "\13\55\1\374\7\55\1\372\21\55\1\374\4\55\24\0"+
    "\1\55\4\0\1\372\23\55\1\374\7\55\1\372\21\55"+
    "\1\374\4\55\24\0\1\55\4\0\10\55\1\375\33\55"+
    "\1\375\16\55\24\0\1\55\4\0\3\55\1\376\33\55"+
    "\1\376\23\55\24\0\1\55\4\0\10\55\1\377\33\55"+
    "\1\377\16\55\24\0\1\55\4\0\2\55\1\u0100\10\55"+
    "\1\u0101\32\55\1\u0101\14\55\24\0\1\55\4\0\4\55"+
    "\1\u0102\14\55\1\u0103\16\55\1\u0102\22\55\24\0\1\55"+
    "\4\0\13\55\1\u0101\32\55\1\u0101\14\55\24\0\1\55"+
    "\4\0\4\55\1\u0102\33\55\1\u0102\22\55\24\0\1\55"+
    "\4\0\4\55\1\u0104\33\55\1\u0104\22\55\24\0\1\55"+
    "\4\0\23\55\1\u0105\31\55\1\u0105\5\55\24\0\1\55"+
    "\4\0\13\55\1\262\1\263\1\265\30\55\1\262\1\263"+
    "\1\265\12\55\3\0\3\240\1\0\7\240\1\u0106\77\240"+
    "\22\0\1\55\4\0\21\55\1\u0107\41\55\24\0\1\55"+
    "\4\0\10\55\1\u0108\52\55\24\0\1\55\4\0\4\55"+
    "\1\u0109\56\55\24\0\1\55\4\0\4\55\1\u010a\33\55"+
    "\1\u010a\22\55\24\0\1\55\4\0\13\55\1\u010b\32\55"+
    "\1\u010b\14\55\24\0\1\55\4\0\1\u010c\33\55\1\u010c"+
    "\26\55\24\0\1\55\4\0\16\55\1\u010d\32\55\1\u010d"+
    "\11\55\24\0\1\55\4\0\16\55\1\u010e\44\55\24\0"+
    "\1\55\4\0\10\55\1\u010f\33\55\1\u010f\16\55\24\0"+
    "\1\55\4\0\26\55\1\u0110\34\55\24\0\1\55\4\0"+
    "\2\55\1\u0111\1\55\1\u0112\16\55\1\u0113\12\55\1\u0111"+
    "\24\55\24\0\1\55\4\0\2\55\1\u0111\33\55\1\u0111"+
    "\24\55\24\0\1\55\4\0\2\55\1\u0114\33\55\1\u0114"+
    "\24\55\24\0\1\55\4\0\13\55\1\u0115\10\55\1\u0116"+
    "\21\55\1\u0115\7\55\1\u0116\4\55\24\0\1\55\4\0"+
    "\14\55\1\u0117\32\55\1\u0117\13\55\24\0\1\55\4\0"+
    "\5\55\1\u0118\14\55\1\u0119\31\55\1\u0119\6\55\24\0"+
    "\1\55\4\0\22\55\1\u0119\31\55\1\u0119\6\55\24\0"+
    "\1\55\4\0\1\u011a\33\55\1\u011a\26\55\24\0\1\55"+
    "\4\0\22\55\1\u011b\31\55\1\u011b\6\55\24\0\1\55"+
    "\4\0\21\55\1\u011c\31\55\1\u011c\7\55\24\0\1\55"+
    "\4\0\1\u011d\33\55\1\u011d\26\55\24\0\1\55\4\0"+
    "\1\u011e\3\55\1\u011f\27\55\1\u011e\3\55\1\u0120\22\55"+
    "\24\0\1\55\4\0\4\55\1\u0121\33\55\1\u0121\22\55"+
    "\24\0\1\55\4\0\2\55\1\u0122\33\55\1\u0122\24\55"+
    "\24\0\1\55\4\0\1\u0123\62\55\24\0\1\55\4\0"+
    "\1\u011e\3\55\1\u0120\27\55\1\u011e\3\55\1\u0120\22\55"+
    "\24\0\1\55\4\0\23\55\1\u0124\31\55\1\u0124\5\55"+
    "\24\0\1\55\4\0\17\55\1\u0125\32\55\1\u0125\10\55"+
    "\24\0\1\55\4\0\7\55\1\u0126\53\55\24\0\1\55"+
    "\4\0\4\55\1\u0127\56\55\24\0\1\55\4\0\1\u0128"+
    "\62\55\24\0\1\55\4\0\4\55\1\u0129\6\55\1\u012a"+
    "\32\55\1\u012a\14\55\24\0\1\55\4\0\22\55\1\u012b"+
    "\31\55\1\u012b\6\55\24\0\1\55\4\0\13\55\1\u012c"+
    "\32\55\1\u012c\14\55\24\0\1\55\4\0\13\55\1\u012a"+
    "\32\55\1\u012a\14\55\24\0\1\55\4\0\13\55\1\u012d"+
    "\47\55\24\0\1\55\4\0\22\55\1\u012e\31\55\1\u012e"+
    "\6\55\24\0\1\55\4\0\4\55\1\u012f\33\55\1\u012f"+
    "\22\55\24\0\1\55\4\0\14\55\1\u0130\32\55\1\u0130"+
    "\13\55\24\0\1\55\4\0\1\55\1\u0131\61\55\24\0"+
    "\1\55\4\0\24\55\1\u0132\36\55\24\0\1\55\4\0"+
    "\10\55\1\u0133\52\55\24\0\1\55\4\0\16\55\1\u0134"+
    "\44\55\24\0\1\55\4\0\4\55\1\u0135\33\55\1\u0135"+
    "\22\55\24\0\1\55\4\0\4\55\1\u0136\33\55\1\u0136"+
    "\22\55\24\0\1\55\4\0\23\55\1\u0137\37\55\24\0"+
    "\1\55\4\0\4\55\1\u0138\33\55\1\u0138\22\55\24\0"+
    "\1\55\4\0\4\55\1\u0139\16\55\1\u013a\14\55\1\u0139"+
    "\22\55\24\0\1\55\4\0\4\55\1\u013b\11\55\1\u013c"+
    "\32\55\1\u013c\11\55\24\0\1\55\4\0\4\55\1\u0139"+
    "\33\55\1\u0139\22\55\24\0\1\55\4\0\16\55\1\u013c"+
    "\32\55\1\u013c\11\55\24\0\1\55\4\0\15\55\1\u013d"+
    "\32\55\1\u013d\12\55\24\0\1\55\4\0\23\55\1\u013e"+
    "\31\55\1\u013e\5\55\24\0\1\55\4\0\4\55\1\u013f"+
    "\56\55\24\0\1\55\4\0\10\55\1\u0140\33\55\1\u0140"+
    "\16\55\24\0\1\55\4\0\2\55\1\u0141\60\55\24\0"+
    "\1\55\4\0\24\55\1\u0142\36\55\24\0\1\55\4\0"+
    "\13\55\1\u0143\32\55\1\u0143\14\55\24\0\1\55\4\0"+
    "\22\55\1\u0144\31\55\1\u0144\6\55\24\0\1\55\4\0"+
    "\4\55\1\u0145\33\55\1\u0145\22\55\24\0\1\55\4\0"+
    "\4\55\1\u0146\33\55\1\u0146\22\55\24\0\1\55\4\0"+
    "\15\55\1\u0147\32\55\1\u0147\12\55\24\0\1\55\4\0"+
    "\6\55\1\u0148\33\55\1\u0148\20\55\24\0\1\55\4\0"+
    "\14\55\1\u0149\32\55\1\u0149\13\55\24\0\1\55\4\0"+
    "\21\55\1\u014a\31\55\1\u014a\7\55\24\0\1\55\4\0"+
    "\22\55\1\u014b\40\55\24\0\1\55\4\0\24\55\1\u014c"+
    "\36\55\24\0\1\55\4\0\4\55\1\u014d\33\55\1\u014d"+
    "\22\55\24\0\1\55\4\0\4\55\1\u014e\56\55\24\0"+
    "\1\55\4\0\15\55\1\u014f\32\55\1\u014f\12\55\24\0"+
    "\1\55\4\0\4\55\1\u0150\33\55\1\u0150\22\55\24\0"+
    "\1\55\4\0\1\u0151\33\55\1\u0151\26\55\24\0\1\55"+
    "\4\0\13\55\1\u0152\47\55\24\0\1\55\4\0\23\55"+
    "\1\u0153\31\55\1\u0153\5\55\24\0\1\55\4\0\13\55"+
    "\1\u0154\32\55\1\u0154\14\55\24\0\1\55\4\0\10\55"+
    "\1\u0155\52\55\24\0\1\55\4\0\4\55\1\u0156\33\55"+
    "\1\u0156\22\55\24\0\1\55\4\0\4\55\1\u0157\33\55"+
    "\1\u0157\22\55\24\0\1\55\4\0\13\55\1\u0158\32\55"+
    "\1\u0158\14\55\24\0\1\55\4\0\17\55\1\u0159\32\55"+
    "\1\u0159\10\55\24\0\1\55\4\0\15\55\1\u015a\45\55"+
    "\24\0\1\55\4\0\15\55\1\u015b\32\55\1\u015b\12\55"+
    "\24\0\1\55\4\0\6\55\1\u015c\54\55\24\0\1\55"+
    "\4\0\4\55\1\u015d\33\55\1\u015d\22\55\24\0\1\55"+
    "\4\0\16\55\1\u015e\1\55\1\u015f\30\55\1\u015e\11\55"+
    "\24\0\1\55\4\0\1\u0160\33\55\1\u0160\26\55\24\0"+
    "\1\55\4\0\15\55\1\u0161\32\55\1\u0161\12\55\24\0"+
    "\1\55\4\0\24\55\1\u0162\36\55\24\0\1\55\4\0"+
    "\24\55\1\u0163\31\55\1\u0163\4\55\24\0\1\55\4\0"+
    "\26\55\1\u0164\31\55\1\u0164\2\55\24\0\1\55\4\0"+
    "\23\55\1\u0165\37\55\24\0\1\55\4\0\15\55\1\u0166"+
    "\3\55\1\u0167\26\55\1\u0166\2\55\1\u0167\7\55\24\0"+
    "\1\55\4\0\7\55\1\u0168\33\55\1\u0168\17\55\3\0"+
    "\3\240\1\0\7\240\1\u0106\4\240\1\u0169\72\240\22\0"+
    "\1\55\4\0\23\55\1\u016a\37\55\24\0\1\55\4\0"+
    "\16\55\1\u016b\44\55\24\0\1\55\4\0\21\55\1\u016c"+
    "\41\55\24\0\1\55\4\0\21\55\1\u016d\31\55\1\u016d"+
    "\7\55\24\0\1\55\4\0\30\55\1\u016e\31\55\1\u016e"+
    "\24\0\1\55\4\0\2\55\1\u016f\33\55\1\u016f\24\55"+
    "\24\0\1\55\4\0\10\55\1\u0170\33\55\1\u0170\16\55"+
    "\24\0\1\55\4\0\21\55\1\u0171\41\55\24\0\1\55"+
    "\4\0\15\55\1\u0172\32\55\1\u0172\12\55\24\0\1\55"+
    "\4\0\4\55\1\u0173\56\55\24\0\1\55\4\0\1\u0174"+
    "\33\55\1\u0174\26\55\24\0\1\55\4\0\12\55\1\u0175"+
    "\32\55\1\u0175\15\55\24\0\1\55\4\0\1\u0176\33\55"+
    "\1\u0176\26\55\24\0\1\55\4\0\14\55\1\u0177\32\55"+
    "\1\u0177\13\55\24\0\1\55\4\0\10\55\1\u0178\33\55"+
    "\1\u0178\16\55\24\0\1\55\4\0\13\55\1\u0179\47\55"+
    "\24\0\1\55\4\0\23\55\1\u017a\31\55\1\u017a\5\55"+
    "\24\0\1\55\4\0\23\55\1\u017b\31\55\1\u017b\5\55"+
    "\24\0\1\55\4\0\22\55\1\u017c\31\55\1\u017c\6\55"+
    "\24\0\1\55\4\0\4\55\1\u017d\33\55\1\u017d\22\55"+
    "\24\0\1\55\4\0\1\55\1\u017e\33\55\1\u017e\25\55"+
    "\24\0\1\55\4\0\24\55\1\u017f\31\55\1\u017f\4\55"+
    "\24\0\1\55\4\0\21\55\1\u0180\31\55\1\u0181\7\55"+
    "\24\0\1\55\4\0\21\55\1\u0181\31\55\1\u0181\7\55"+
    "\24\0\1\55\4\0\23\55\1\u0182\31\55\1\u0182\5\55"+
    "\24\0\1\55\4\0\2\55\1\u0183\60\55\24\0\1\55"+
    "\4\0\10\55\1\u0184\33\55\1\u0184\16\55\24\0\1\55"+
    "\4\0\17\55\1\u0185\43\55\24\0\1\55\4\0\17\55"+
    "\1\u0186\43\55\24\0\1\55\4\0\24\55\1\u0187\31\55"+
    "\1\u0187\4\55\24\0\1\55\4\0\23\55\1\u0188\31\55"+
    "\1\u0188\5\55\24\0\1\55\4\0\1\u0189\33\55\1\u0189"+
    "\26\55\24\0\1\55\4\0\4\55\1\u018a\33\55\1\u018a"+
    "\22\55\24\0\1\55\4\0\10\55\1\u018b\33\55\1\u018b"+
    "\16\55\24\0\1\55\4\0\17\55\1\u018c\43\55\24\0"+
    "\1\55\4\0\15\55\1\u018d\45\55\24\0\1\55\4\0"+
    "\21\55\1\u018e\41\55\24\0\1\55\4\0\3\55\1\u018f"+
    "\33\55\1\u018f\23\55\24\0\1\55\4\0\27\55\1\u0190"+
    "\31\55\1\u0190\1\55\24\0\1\55\4\0\10\55\1\u0191"+
    "\52\55\24\0\1\55\4\0\21\55\1\u0192\31\55\1\u0192"+
    "\7\55\24\0\1\55\4\0\21\55\1\u0193\31\55\1\u0193"+
    "\7\55\24\0\1\55\4\0\4\55\1\u0194\56\55\24\0"+
    "\1\55\4\0\21\55\1\u0195\41\55\24\0\1\55\4\0"+
    "\23\55\1\u0196\31\55\1\u0196\5\55\24\0\1\55\4\0"+
    "\7\55\1\u0197\53\55\24\0\1\55\4\0\21\55\1\u0198"+
    "\41\55\24\0\1\55\4\0\4\55\1\u0199\33\55\1\u0199"+
    "\22\55\24\0\1\55\4\0\21\55\1\u019a\31\55\1\u019a"+
    "\7\55\24\0\1\55\4\0\21\55\1\u019b\31\55\1\u019b"+
    "\7\55\24\0\1\55\4\0\14\55\1\u019c\32\55\1\u019c"+
    "\13\55\24\0\1\55\4\0\1\u019d\33\55\1\u019d\26\55"+
    "\24\0\1\55\4\0\30\55\1\u019e\31\55\1\u019e\24\0"+
    "\1\55\4\0\4\55\1\u019f\56\55\24\0\1\55\4\0"+
    "\21\55\1\u01a0\41\55\24\0\1\55\4\0\21\55\1\u01a1"+
    "\31\55\1\u01a1\7\55\24\0\1\55\4\0\27\55\1\u01a2"+
    "\33\55\24\0\1\55\4\0\3\55\1\u01a3\33\55\1\u01a3"+
    "\23\55\24\0\1\55\4\0\1\u01a4\33\55\1\u01a4\26\55"+
    "\24\0\1\55\4\0\14\55\1\u01a5\32\55\1\u01a5\13\55"+
    "\24\0\1\55\4\0\1\u01a6\62\55\24\0\1\55\4\0"+
    "\21\55\1\u01a7\31\55\1\u01a7\7\55\24\0\1\55\4\0"+
    "\1\55\1\u01a8\33\55\1\u01a8\25\55\24\0\1\55\4\0"+
    "\3\55\1\u01a9\57\55\24\0\1\55\4\0\17\55\1\u01aa"+
    "\32\55\1\u01aa\10\55\24\0\1\55\4\0\2\55\1\u01ab"+
    "\33\55\1\u01ab\24\55\24\0\1\55\4\0\4\55\1\u01ac"+
    "\33\55\1\u01ac\22\55\24\0\1\55\4\0\16\55\1\u01ad"+
    "\32\55\1\u01ad\11\55\24\0\1\55\4\0\22\55\1\u01ae"+
    "\31\55\1\u01ae\6\55\24\0\1\55\4\0\6\55\1\u01af"+
    "\54\55\24\0\1\55\4\0\15\55\1\u01b0\32\55\1\u01b0"+
    "\12\55\24\0\1\55\4\0\24\55\1\u01b1\31\55\1\u01b1"+
    "\4\55\24\0\1\55\4\0\23\55\1\u01b2\31\55\1\u01b2"+
    "\5\55\24\0\1\55\4\0\6\55\1\u01b3\33\55\1\u01b3"+
    "\20\55\24\0\1\55\4\0\24\55\1\u01b4\36\55\24\0"+
    "\1\55\4\0\4\55\1\u01b5\33\55\1\u01b5\22\55\24\0"+
    "\1\55\4\0\24\55\1\u01b6\36\55\24\0\1\55\4\0"+
    "\4\55\1\u01b7\33\55\1\u01b7\22\55\24\0\1\55\4\0"+
    "\16\55\1\u01b8\32\55\1\u01b8\11\55\24\0\1\55\4\0"+
    "\15\55\1\u01b9\45\55\24\0\1\55\4\0\31\55\1\u01ba"+
    "\31\55\24\0\1\55\4\0\7\55\1\u01bb\33\55\1\u01bb"+
    "\17\55\24\0\1\55\4\0\15\55\1\u01bc\32\55\1\u01bc"+
    "\12\55\24\0\1\55\4\0\4\55\1\u01bd\56\55\24\0"+
    "\1\55\4\0\4\55\1\u01be\56\55\24\0\1\55\4\0"+
    "\3\55\1\u01bf\33\55\1\u01bf\23\55\24\0\1\55\4\0"+
    "\23\55\1\u01c0\31\55\1\u01c0\5\55\24\0\1\55\4\0"+
    "\15\55\1\u01c1\32\55\1\u01c1\12\55\24\0\1\55\4\0"+
    "\23\55\1\u01c2\31\55\1\u01c2\5\55\24\0\1\55\4\0"+
    "\10\55\1\u01c3\52\55\24\0\1\55\4\0\21\55\1\u01c4"+
    "\31\55\1\u01c4\7\55\24\0\1\55\4\0\4\55\1\u01c5"+
    "\33\55\1\u01c5\22\55\24\0\1\55\4\0\15\55\1\u01c6"+
    "\32\55\1\u01c6\12\55\24\0\1\55\4\0\1\u01c7\33\55"+
    "\1\u01c7\26\55\24\0\1\55\4\0\13\55\1\u01c8\32\55"+
    "\1\u01c8\14\55\24\0\1\55\4\0\21\55\1\u01c9\31\55"+
    "\1\u01ca\7\55\24\0\1\55\4\0\21\55\1\u01ca\31\55"+
    "\1\u01ca\7\55\24\0\1\55\4\0\23\55\1\u01cb\31\55"+
    "\1\u01cb\5\55\24\0\1\55\4\0\7\55\1\u01cc\53\55"+
    "\24\0\1\55\4\0\15\55\1\u01cd\32\55\1\u01cd\12\55"+
    "\24\0\1\55\4\0\4\55\1\u01ce\56\55\24\0\1\55"+
    "\4\0\23\55\1\u01cf\37\55\24\0\1\55\4\0\22\55"+
    "\1\u01d0\31\55\1\u01d0\6\55\24\0\1\55\4\0\22\55"+
    "\1\u01d1\31\55\1\u01d1\6\55\24\0\1\55\4\0\10\55"+
    "\1\u01d2\33\55\1\u01d2\16\55\24\0\1\55\4\0\6\55"+
    "\1\u01d3\33\55\1\u01d3\20\55\24\0\1\55\4\0\6\55"+
    "\1\u01d4\54\55\24\0\1\55\4\0\4\55\1\u01d5\56\55"+
    "\24\0\1\55\4\0\10\55\1\u01d6\33\55\1\u01d6\16\55"+
    "\24\0\1\55\4\0\4\55\1\u01d7\33\55\1\u01d7\22\55"+
    "\24\0\1\55\4\0\1\u01d8\62\55\24\0\1\55\4\0"+
    "\23\55\1\u01d9\31\55\1\u01d9\5\55\24\0\1\55\4\0"+
    "\1\u01da\62\55\24\0\1\55\4\0\22\55\1\u01db\40\55"+
    "\24\0\1\55\4\0\1\u01dc\62\55\24\0\1\55\4\0"+
    "\23\55\1\u01dd\31\55\1\u01dd\5\55\24\0\1\55\4\0"+
    "\1\u01de\33\55\1\u01de\26\55\24\0\1\55\4\0\21\55"+
    "\1\u01df\31\55\1\u01df\7\55\24\0\1\55\4\0\22\55"+
    "\1\u01e0\40\55\24\0\1\55\4\0\4\55\1\u01e1\33\55"+
    "\1\u01e1\22\55\24\0\1\55\4\0\17\55\1\u01e2\43\55"+
    "\24\0\1\55\4\0\4\55\1\u01e3\33\55\1\u01e3\22\55"+
    "\24\0\1\55\4\0\22\55\1\u01e4\31\55\1\u01e4\6\55"+
    "\24\0\1\55\4\0\4\55\1\u01e5\33\55\1\u01e5\22\55"+
    "\24\0\1\55\4\0\2\55\1\u01e6\60\55\24\0\1\55"+
    "\4\0\10\55\1\u01e7\33\55\1\u01e7\16\55\24\0\1\55"+
    "\4\0\1\u01e8\33\55\1\u01e8\26\55\24\0\1\55\4\0"+
    "\16\55\1\u01e9\32\55\1\u01e9\11\55\24\0\1\55\4\0"+
    "\23\55\1\u01ea\31\55\1\u01ea\5\55\24\0\1\55\4\0"+
    "\21\55\1\u01eb\31\55\1\u01eb\7\55\24\0\1\55\4\0"+
    "\1\u01ec\33\55\1\u01ec\26\55\24\0\1\55\4\0\4\55"+
    "\1\u01ed\56\55\24\0\1\55\4\0\4\55\1\u01ee\33\55"+
    "\1\u01ee\22\55\24\0\1\55\4\0\4\55\1\u01ef\33\55"+
    "\1\u01ef\22\55\24\0\1\55\4\0\14\55\1\u01f0\46\55"+
    "\24\0\1\55\4\0\22\55\1\u01f1\31\55\1\u01f1\6\55"+
    "\24\0\1\55\4\0\1\u01f2\62\55\24\0\1\55\4\0"+
    "\24\55\1\u01f3\31\55\1\u01f3\4\55\24\0\1\55\4\0"+
    "\4\55\1\u01f4\33\55\1\u01f4\22\55\24\0\1\55\4\0"+
    "\2\55\1\u01f5\33\55\1\u01f5\24\55\24\0\1\55\4\0"+
    "\15\55\1\u01f6\45\55\24\0\1\55\4\0\4\55\1\u01f7"+
    "\33\55\1\u01f7\22\55\24\0\1\55\4\0\4\55\1\u01f8"+
    "\33\55\1\u01f8\22\55\24\0\1\55\4\0\2\55\1\u01f9"+
    "\60\55\24\0\1\55\4\0\1\u01fa\33\55\1\u01fa\26\55"+
    "\24\0\1\55\4\0\23\55\1\u01fb\31\55\1\u01fb\5\55"+
    "\24\0\1\55\4\0\22\55\1\u01fc\31\55\1\u01fc\6\55"+
    "\24\0\1\55\4\0\23\55\1\u01fd\31\55\1\u01fd\5\55"+
    "\24\0\1\55\4\0\1\u01fe\3\55\1\u01ff\33\55\1\u01ff"+
    "\22\55\24\0\1\55\4\0\4\55\1\u01ff\33\55\1\u01ff"+
    "\22\55\24\0\1\55\4\0\2\55\1\u0200\33\55\1\u0200"+
    "\24\55\24\0\1\55\4\0\10\55\1\u0201\33\55\1\u0201"+
    "\16\55\24\0\1\55\4\0\15\55\1\u0202\32\55\1\u0202"+
    "\12\55\24\0\1\55\4\0\15\55\1\u0203\32\55\1\u0203"+
    "\12\55\24\0\1\55\4\0\1\u0204\33\55\1\u0204\26\55"+
    "\24\0\1\55\4\0\3\55\1\u0205\33\55\1\u0205\23\55"+
    "\24\0\1\55\4\0\13\55\1\u0206\47\55\24\0\1\55"+
    "\4\0\3\55\1\u0207\57\55\24\0\1\55\4\0\4\55"+
    "\1\u0208\56\55\24\0\1\55\4\0\13\55\1\u0209\47\55"+
    "\24\0\1\55\4\0\30\55\1\u020a\31\55\1\u020a\24\0"+
    "\1\55\4\0\10\55\1\u020b\52\55\24\0\1\55\4\0"+
    "\15\55\1\u020c\32\55\1\u020c\12\55\24\0\1\55\4\0"+
    "\27\55\1\u020d\31\55\1\u020d\1\55\24\0\1\55\4\0"+
    "\4\55\1\u020e\33\55\1\u020e\22\55\24\0\1\55\4\0"+
    "\4\55\1\u020f\56\55\24\0\1\55\4\0\2\55\1\u0210"+
    "\33\55\1\u0210\24\55\24\0\1\55\4\0\2\55\1\u0211"+
    "\33\55\1\u0211\24\55\24\0\1\55\4\0\10\55\1\u0212"+
    "\33\55\1\u0212\16\55\24\0\1\55\4\0\1\u0213\33\55"+
    "\1\u0213\26\55\24\0\1\55\4\0\2\55\1\u0214\33\55"+
    "\1\u0214\24\55\24\0\1\55\4\0\21\55\1\u0215\41\55"+
    "\24\0\1\55\4\0\13\55\1\u0216\47\55\24\0\1\55"+
    "\4\0\23\55\1\u0217\31\55\1\u0217\5\55\24\0\1\55"+
    "\4\0\21\55\1\u0218\31\55\1\u0218\7\55\24\0\1\55"+
    "\4\0\23\55\1\u0219\37\55\24\0\1\55\4\0\10\55"+
    "\1\u021a\33\55\1\u021a\16\55\24\0\1\55\4\0\33\55"+
    "\1\u021b\27\55\24\0\1\55\4\0\4\55\1\u021c\33\55"+
    "\1\u021c\22\55\24\0\1\55\4\0\1\55\1\u021d\61\55"+
    "\24\0\1\55\4\0\3\55\1\u021e\33\55\1\u021e\23\55"+
    "\24\0\1\55\4\0\23\55\1\u021f\31\55\1\u021f\5\55"+
    "\24\0\1\55\4\0\25\55\1\u0220\31\55\1\u0220\3\55"+
    "\24\0\1\55\4\0\23\55\1\u0221\31\55\1\u0221\5\55"+
    "\24\0\1\55\4\0\13\55\1\u0222\47\55\24\0\1\55"+
    "\4\0\2\55\1\u0223\60\55\24\0\1\55\4\0\25\55"+
    "\1\u0224\35\55\24\0\1\55\4\0\2\55\1\u0225\33\55"+
    "\1\u0225\24\55\24\0\1\55\4\0\23\55\1\u0226\31\55"+
    "\1\u0226\5\55\24\0\1\55\4\0\12\55\1\u0227\32\55"+
    "\1\u0227\15\55\24\0\1\55\4\0\15\55\1\u0228\32\55"+
    "\1\u0228\12\55\24\0\1\55\4\0\21\55\1\u0229\31\55"+
    "\1\u0229\7\55\24\0\1\55\4\0\23\55\1\u022a\31\55"+
    "\1\u022a\5\55\24\0\1\55\4\0\4\55\1\u022b\33\55"+
    "\1\u022b\22\55\24\0\1\55\4\0\15\55\1\u022c\32\55"+
    "\1\u022c\12\55\24\0\1\55\4\0\3\55\1\u022d\17\55"+
    "\1\u022e\13\55\1\u022d\15\55\1\u022e\5\55\24\0\1\55"+
    "\4\0\13\55\1\u022f\47\55\24\0\1\55\4\0\4\55"+
    "\1\u0230\33\55\1\u0230\22\55\24\0\1\55\4\0\4\55"+
    "\1\u0231\33\55\1\u0231\22\55\24\0\1\55\4\0\30\55"+
    "\1\u0232\32\55\24\0\1\55\4\0\23\55\1\u0233\37\55"+
    "\24\0\1\55\4\0\4\55\1\u0234\56\55\24\0\1\55"+
    "\4\0\4\55\1\u0235\33\55\1\u0235\22\55\24\0\1\55"+
    "\4\0\23\55\1\u0236\31\55\1\u0236\5\55\24\0\1\55"+
    "\4\0\30\55\1\u0237\31\55\1\u0237\24\0\1\55\4\0"+
    "\10\55\1\u0238\33\55\1\u0238\16\55\24\0\1\55\4\0"+
    "\14\55\1\u0239\32\55\1\u0239\13\55\24\0\1\55\4\0"+
    "\23\55\1\u023a\31\55\1\u023a\5\55\24\0\1\55\4\0"+
    "\1\u023b\33\55\1\u023b\26\55\24\0\1\55\4\0\10\55"+
    "\1\u023c\33\55\1\u023c\16\55\24\0\1\55\4\0\4\55"+
    "\1\u023d\56\55\24\0\1\55\4\0\22\55\1\u023e\31\55"+
    "\1\u023e\6\55\24\0\1\55\4\0\16\55\1\u023f\32\55"+
    "\1\u023f\11\55\24\0\1\55\4\0\4\55\1\u0240\33\55"+
    "\1\u0240\22\55\24\0\1\55\4\0\23\55\1\u0241\31\55"+
    "\1\u0241\5\55\24\0\1\55\4\0\14\55\1\u0242\32\55"+
    "\1\u0242\13\55\24\0\1\55\4\0\15\55\1\u0243\32\55"+
    "\1\u0243\12\55\24\0\1\55\4\0\15\55\1\u0244\32\55"+
    "\1\u0244\12\55\24\0\1\55\4\0\4\55\1\u0245\33\55"+
    "\1\u0245\22\55\24\0\1\55\4\0\4\55\1\u0246\33\55"+
    "\1\u0246\22\55\24\0\1\55\4\0\23\55\1\u0247\31\55"+
    "\1\u0247\5\55\24\0\1\55\4\0\22\55\1\u0248\31\55"+
    "\1\u0248\6\55\24\0\1\55\4\0\23\55\1\u0249\31\55"+
    "\1\u0249\5\55\24\0\1\55\4\0\1\u024a\33\55\1\u024a"+
    "\26\55\24\0\1\55\4\0\14\55\1\u024b\32\55\1\u024b"+
    "\13\55\24\0\1\55\4\0\17\55\1\u024c\32\55\1\u024c"+
    "\10\55\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34352];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\1\1\5\11\1\1\1\11"+
    "\2\1\1\11\51\1\2\11\1\0\1\11\1\0\1\1"+
    "\1\0\1\1\6\11\125\1\1\11\1\0\145\1\1\0"+
    "\u0146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[588];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _SqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 156: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 157: break;
          case 3:
            { return MOD;
            }
          // fall through
          case 158: break;
          case 4:
            { return BITWISE_AND;
            }
          // fall through
          case 159: break;
          case 5:
            { return LP;
            }
          // fall through
          case 160: break;
          case 6:
            { return RP;
            }
          // fall through
          case 161: break;
          case 7:
            { return MULTIPLY;
            }
          // fall through
          case 162: break;
          case 8:
            { return PLUS;
            }
          // fall through
          case 163: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 164: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 165: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 166: break;
          case 12:
            { return DIVIDE;
            }
          // fall through
          case 167: break;
          case 13:
            { return DIGIT;
            }
          // fall through
          case 168: break;
          case 14:
            { return SEMI;
            }
          // fall through
          case 169: break;
          case 15:
            { return LT;
            }
          // fall through
          case 170: break;
          case 16:
            { return EQ;
            }
          // fall through
          case 171: break;
          case 17:
            { return GT;
            }
          // fall through
          case 172: break;
          case 18:
            { return ID;
            }
          // fall through
          case 173: break;
          case 19:
            { return E;
            }
          // fall through
          case 174: break;
          case 20:
            { return BITWISE_OR;
            }
          // fall through
          case 175: break;
          case 21:
            { return BITWISE_NOT;
            }
          // fall through
          case 176: break;
          case 22:
            { return NEQ;
            }
          // fall through
          case 177: break;
          case 23:
            { return STRING;
            }
          // fall through
          case 178: break;
          case 24:
            { return COMMENT;
            }
          // fall through
          case 179: break;
          case 25:
            { return SHIFT_LEFT;
            }
          // fall through
          case 180: break;
          case 26:
            { return LTE;
            }
          // fall through
          case 181: break;
          case 27:
            { return NEQ2;
            }
          // fall through
          case 182: break;
          case 28:
            { return EQ2;
            }
          // fall through
          case 183: break;
          case 29:
            { return GTE;
            }
          // fall through
          case 184: break;
          case 30:
            { return SHIFT_RIGHT;
            }
          // fall through
          case 185: break;
          case 31:
            { return AS;
            }
          // fall through
          case 186: break;
          case 32:
            { return BY;
            }
          // fall through
          case 187: break;
          case 33:
            { return IF;
            }
          // fall through
          case 188: break;
          case 34:
            { return IN;
            }
          // fall through
          case 189: break;
          case 35:
            { return IS;
            }
          // fall through
          case 190: break;
          case 36:
            { return NO;
            }
          // fall through
          case 191: break;
          case 37:
            { return OF;
            }
          // fall through
          case 192: break;
          case 38:
            { return ON;
            }
          // fall through
          case 193: break;
          case 39:
            { return OR;
            }
          // fall through
          case 194: break;
          case 40:
            { return TO;
            }
          // fall through
          case 195: break;
          case 41:
            { return CONCAT;
            }
          // fall through
          case 196: break;
          case 42:
            { return ADD;
            }
          // fall through
          case 197: break;
          case 43:
            { return ALL;
            }
          // fall through
          case 198: break;
          case 44:
            { return AND;
            }
          // fall through
          case 199: break;
          case 45:
            { return ASC;
            }
          // fall through
          case 200: break;
          case 46:
            { return END;
            }
          // fall through
          case 201: break;
          case 47:
            { return FOR;
            }
          // fall through
          case 202: break;
          case 48:
            { return KEY;
            }
          // fall through
          case 203: break;
          case 49:
            { return NOT;
            }
          // fall through
          case 204: break;
          case 50:
            { return ROW;
            }
          // fall through
          case 205: break;
          case 51:
            { return SET;
            }
          // fall through
          case 206: break;
          case 52:
            { return CASE;
            }
          // fall through
          case 207: break;
          case 53:
            { return CAST;
            }
          // fall through
          case 208: break;
          case 54:
            { return DESC;
            }
          // fall through
          case 209: break;
          case 55:
            { return DROP;
            }
          // fall through
          case 210: break;
          case 56:
            { return EACH;
            }
          // fall through
          case 211: break;
          case 57:
            { return ELSE;
            }
          // fall through
          case 212: break;
          case 58:
            { return FAIL;
            }
          // fall through
          case 213: break;
          case 59:
            { return FROM;
            }
          // fall through
          case 214: break;
          case 60:
            { return GLOB;
            }
          // fall through
          case 215: break;
          case 61:
            { return INTO;
            }
          // fall through
          case 216: break;
          case 62:
            { return JOIN;
            }
          // fall through
          case 217: break;
          case 63:
            { return LEFT;
            }
          // fall through
          case 218: break;
          case 64:
            { return LIKE;
            }
          // fall through
          case 219: break;
          case 65:
            { return NULL;
            }
          // fall through
          case 220: break;
          case 66:
            { return PLAN;
            }
          // fall through
          case 221: break;
          case 67:
            { return TEMP;
            }
          // fall through
          case 222: break;
          case 68:
            { return THEN;
            }
          // fall through
          case 223: break;
          case 69:
            { return TRUE;
            }
          // fall through
          case 224: break;
          case 70:
            { return VIEW;
            }
          // fall through
          case 225: break;
          case 71:
            { return WHEN;
            }
          // fall through
          case 226: break;
          case 72:
            { return WITH;
            }
          // fall through
          case 227: break;
          case 73:
            { return JAVADOC;
            }
          // fall through
          case 228: break;
          case 74:
            { return ABORT;
            }
          // fall through
          case 229: break;
          case 75:
            { return AFTER;
            }
          // fall through
          case 230: break;
          case 76:
            { return ALTER;
            }
          // fall through
          case 231: break;
          case 77:
            { return BEGIN;
            }
          // fall through
          case 232: break;
          case 78:
            { return CHECK;
            }
          // fall through
          case 233: break;
          case 79:
            { return CROSS;
            }
          // fall through
          case 234: break;
          case 80:
            { return FALSE;
            }
          // fall through
          case 235: break;
          case 81:
            { return GROUP;
            }
          // fall through
          case 236: break;
          case 82:
            { return INDEX;
            }
          // fall through
          case 237: break;
          case 83:
            { return INNER;
            }
          // fall through
          case 238: break;
          case 84:
            { return LIMIT;
            }
          // fall through
          case 239: break;
          case 85:
            { return MATCH;
            }
          // fall through
          case 240: break;
          case 86:
            { return ORDER;
            }
          // fall through
          case 241: break;
          case 87:
            { return OUTER;
            }
          // fall through
          case 242: break;
          case 88:
            { return QUERY;
            }
          // fall through
          case 243: break;
          case 89:
            { return RAISE;
            }
          // fall through
          case 244: break;
          case 90:
            { return ROWID;
            }
          // fall through
          case 245: break;
          case 91:
            { return TABLE;
            }
          // fall through
          case 246: break;
          case 92:
            { return UNION;
            }
          // fall through
          case 247: break;
          case 93:
            { return USING;
            }
          // fall through
          case 248: break;
          case 94:
            { return WHERE;
            }
          // fall through
          case 249: break;
          case 95:
            { return ACTION;
            }
          // fall through
          case 250: break;
          case 96:
            { return ATTACH;
            }
          // fall through
          case 251: break;
          case 97:
            { return BEFORE;
            }
          // fall through
          case 252: break;
          case 98:
            { return COLUMN;
            }
          // fall through
          case 253: break;
          case 99:
            { return COMMIT;
            }
          // fall through
          case 254: break;
          case 100:
            { return CREATE;
            }
          // fall through
          case 255: break;
          case 101:
            { return DELETE;
            }
          // fall through
          case 256: break;
          case 102:
            { return DETACH;
            }
          // fall through
          case 257: break;
          case 103:
            { return ESCAPE;
            }
          // fall through
          case 258: break;
          case 104:
            { return EXCEPT;
            }
          // fall through
          case 259: break;
          case 105:
            { return EXISTS;
            }
          // fall through
          case 260: break;
          case 106:
            { return HAVING;
            }
          // fall through
          case 261: break;
          case 107:
            { return IGNORE;
            }
          // fall through
          case 262: break;
          case 108:
            { return INSERT;
            }
          // fall through
          case 263: break;
          case 109:
            { return OFFSET;
            }
          // fall through
          case 264: break;
          case 110:
            { return PRAGMA;
            }
          // fall through
          case 265: break;
          case 111:
            { return REGEXP;
            }
          // fall through
          case 266: break;
          case 112:
            { return RENAME;
            }
          // fall through
          case 267: break;
          case 113:
            { return SELECT;
            }
          // fall through
          case 268: break;
          case 114:
            { return UNIQUE;
            }
          // fall through
          case 269: break;
          case 115:
            { return UPDATE;
            }
          // fall through
          case 270: break;
          case 116:
            { return VACUUM;
            }
          // fall through
          case 271: break;
          case 117:
            { return VALUES;
            }
          // fall through
          case 272: break;
          case 118:
            { return ANALYZE;
            }
          // fall through
          case 273: break;
          case 119:
            { return BETWEEN;
            }
          // fall through
          case 274: break;
          case 120:
            { return CASCADE;
            }
          // fall through
          case 275: break;
          case 121:
            { return COLLATE;
            }
          // fall through
          case 276: break;
          case 122:
            { return DEFAULT;
            }
          // fall through
          case 277: break;
          case 123:
            { return EXPLAIN;
            }
          // fall through
          case 278: break;
          case 124:
            { return FOREIGN;
            }
          // fall through
          case 279: break;
          case 125:
            { return INDEXED;
            }
          // fall through
          case 280: break;
          case 126:
            { return INSTEAD;
            }
          // fall through
          case 281: break;
          case 127:
            { return NATURAL;
            }
          // fall through
          case 282: break;
          case 128:
            { return PRIMARY;
            }
          // fall through
          case 283: break;
          case 129:
            { return REINDEX;
            }
          // fall through
          case 284: break;
          case 130:
            { return RELEASE;
            }
          // fall through
          case 285: break;
          case 131:
            { return REPLACE;
            }
          // fall through
          case 286: break;
          case 132:
            { return TRIGGER;
            }
          // fall through
          case 287: break;
          case 133:
            { return VIRTUAL;
            }
          // fall through
          case 288: break;
          case 134:
            { return WITHOUT;
            }
          // fall through
          case 289: break;
          case 135:
            { return CONFLICT;
            }
          // fall through
          case 290: break;
          case 136:
            { return DATABASE;
            }
          // fall through
          case 291: break;
          case 137:
            { return DEFERRED;
            }
          // fall through
          case 292: break;
          case 138:
            { return DISTINCT;
            }
          // fall through
          case 293: break;
          case 139:
            { return RESTRICT;
            }
          // fall through
          case 294: break;
          case 140:
            { return ROLLBACK;
            }
          // fall through
          case 295: break;
          case 141:
            { return EXCLUSIVE;
            }
          // fall through
          case 296: break;
          case 142:
            { return IMMEDIATE;
            }
          // fall through
          case 297: break;
          case 143:
            { return INITIALLY;
            }
          // fall through
          case 298: break;
          case 144:
            { return INTERSECT;
            }
          // fall through
          case 299: break;
          case 145:
            { return RECURSIVE;
            }
          // fall through
          case 300: break;
          case 146:
            { return SAVEPOINT;
            }
          // fall through
          case 301: break;
          case 147:
            { return TEMPORARY;
            }
          // fall through
          case 302: break;
          case 148:
            { return CONSTRAINT;
            }
          // fall through
          case 303: break;
          case 149:
            { return DEFERRABLE;
            }
          // fall through
          case 304: break;
          case 150:
            { return REFERENCES_WORD;
            }
          // fall through
          case 305: break;
          case 151:
            { return TRANSACTION;
            }
          // fall through
          case 306: break;
          case 152:
            { return CURRENT_DATE;
            }
          // fall through
          case 307: break;
          case 153:
            { return CURRENT_TIME;
            }
          // fall through
          case 308: break;
          case 154:
            { return AUTOINCREMENT;
            }
          // fall through
          case 309: break;
          case 155:
            { return CURRENT_TIMESTAMP;
            }
          // fall through
          case 310: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
