// 第七步:定义bnf语法
// 第八步:右键生成parse code
// 第九步:右键生成flex文件
{
  // 语言解析器,由Grammar-Kit插件根据bnf语法文件自动生成
  parserClass="com.github.xiaolyuh.pcel.parser.PointcutExpressionParser"
  // 定义辅助类,供 PointcutExpressionParser 类使用
  parserUtilClass="com.github.xiaolyuh.pcel.parser.PointcutExpressionParserUtil"

  // 指定生成的PsiElement子类需要继承的父类
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  // 指定所有生成的PsiElement类的类名前缀
  psiClassPrefix="Aop"
  // 指定所有生成的PsiElement实现类的类名后缀
  psiImplClassSuffix="Impl"
  // 指定所有生成的PsiElement类的包位置
  psiPackage="com.github.xiaolyuh.pcel.psi"
  // 指定所有生成的PsiElement实现类的包位置
  psiImplPackage="com.github.xiaolyuh.pcel.psi.impl"

  // 指定ElementType所在的类,由Grammar-Kit自动生成
  elementTypeHolderClass="com.github.xiaolyuh.pcel.psi.PointcutExpressionTypes"
  // 定义elementType类型,供 PointcutExpressionTypes 类使用
  elementTypeClass="com.github.xiaolyuh.pcel.psi.PointcutExpressionElementType"
  // 定义tokenType类型,供 PointcutExpressionTypes 类使用
  tokenTypeClass="com.github.xiaolyuh.pcel.psi.PointcutExpressionTokenType"
  // 定义工具类,供所有PsiElement实现类使用
  psiImplUtilClass="com.github.xiaolyuh.pcel.psi.impl.PointcutExpressionPsiImplUtil"

  tokens=[
    AT_ANNOTATION='@annotation'
    AT_TARGET='@target'
    EXECUTION='execution'
    BEAN='bean'
    // 匹配切面表达式的 (...) 部分,例如 @annotation(org.javamaster.annos.AopLock)里的 (org.javamaster.annos.AopLock) 这部分
    EXPR_PATTERN="regexp:\([\w*!+.\s()]+\)"
    // 匹配方法引用
    METHOD_REFERENCE="regexp:\p{Alpha}\w*\(\)"
    // 匹配 ||
    OR_OPERATOR="regexp:\s*\|\|\s*"
    // 匹配 &&
    AND_OPERATOR="regexp:\s*&&\s*"
    WORD="regexp:\w+"
  ]
}
// 下面的 ::= 符号可以理解为Java的 = ,即赋值的意思. 左边是规则,右边是规则的定义. * 号代表定义可以出现任意次, ? 号代表定义可选,
// | 符号表示或,更详细语法说明请查阅官方文档 https://github.com/JetBrains/Grammar-Kit
pointcutExpressionFile ::= pointcut*
pointcut ::= content pointcut_combination? {
    recoverWhile="content_recover"
}
private content_recover ::= !(WORD)
content ::= value | method
value ::= kind expr {
    pin=1
}
kind ::= AT_ANNOTATION | AT_TARGET | EXECUTION | BEAN
expr ::= EXPR_PATTERN {
    methods = [
        getReferences
    ]
}
method ::= METHOD_REFERENCE {
    methods = [
        getReferences
    ]
}
pointcut_combination ::= (OR_OPERATOR | AND_OPERATOR) pointcut {
    pin=1
}

