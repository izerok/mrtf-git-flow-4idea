// 第七步:定义bnf语法
// 第八步:右键生成parse code
// 第九步:右键生成flex文件
{
  parserClass="com.github.xiaolyuh.spel.parser.SpelParser"
  parserUtilClass="com.github.xiaolyuh.spel.parser.SpelParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Spel"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xiaolyuh.spel.psi"
  psiImplPackage="com.github.xiaolyuh.spel.psi.impl"

  elementTypeHolderClass="com.github.xiaolyuh.spel.psi.SpelTypes"
  elementTypeClass="com.github.xiaolyuh.spel.psi.SpelElementType"
  tokenTypeClass="com.github.xiaolyuh.spel.psi.SpelTokenType"
  psiImplUtilClass="com.github.xiaolyuh.spel.psi.impl.SpelPsiImplUtil"

  tokens=[
    SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'"
    IDENTIFIER="regexp:[a-zA-Z][\w_\\$]*"
    PLUS="regexp:\s*\+\s*"
    NUMBER='regexp:-?(0|[1-9]\d*)(\.\d+)?([eE][+-]?\d*)?'
    COMMA="regexp:\s*,\s*"
    EXPR="regexp:[\w=']+"
    STATIC_REFERENCE="regexp:\([\w.]+\)"
    SHARP="#"
    DOT="."
    PROJECTION=".!["
    SELECTION=".?["
    L_BRACKET="["
    R_BRACKET="]"
  ]
}

spelFile ::= spel*
spel ::= root root_combination* {
    methods=[
       getReferences
    ]
}
string_literal ::= SINGLE_QUOTED_STRING
number_literal ::= NUMBER
field_name ::= IDENTIFIER {
    methods=[
        getReferences
    ]
}
field_or_method_name ::= IDENTIFIER {
   methods=[
       getReferences
   ]
}
static_t ::= 'T' STATIC_REFERENCE {
    pin=1
    methods=[
        getReferences
    ]
}
method_param ::= root {
    methods=[
        getReferences
    ]
}
method_params ::= method_param (COMMA method_param)*
method_call ::= '(' method_params? ')' {
    pin=1
}
selection_expression ::= EXPR
field_or_method ::= DOT field_or_method_name method_call? {
    pin=1
}
field_recursive_call ::= SHARP? field_name field_or_method*
collection_projection ::= PROJECTION field_recursive_call R_BRACKET {
    pin=1
}
collection_selection ::= SELECTION selection_expression R_BRACKET {
    pin=1
}
map_selection ::= L_BRACKET field_name R_BRACKET {
    pin=1
}
root ::= (string_literal | number_literal | SHARP field_or_method_name | static_t) (field_or_method | method_call | map_selection | collection_projection | collection_selection)* {
    methods=[
        getReferences
    ]
}
root_combination ::= PLUS root {
    pin=1
}
